
Drivetrain_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007060  08007060  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007068  08007068  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800706c  0800706c  0001706c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00004ba0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c20  20004c20  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f04  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003122  00000000  00000000  00039fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  0003d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  0003e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003955  00000000  00000000  0003f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149f5  00000000  00000000  00043035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4474  00000000  00000000  00057a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013be9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055cc  00000000  00000000  0013bef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006f20 	.word	0x08006f20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08006f20 	.word	0x08006f20

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fdb4 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f88e 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 fa44 	bl	8000980 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004f8:	f000 f8f6 	bl	80006e8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80004fc:	f000 f92a 	bl	8000754 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000500:	f000 f9c8 	bl	8000894 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000504:	2108      	movs	r1, #8
 8000506:	4831      	ldr	r0, [pc, #196]	; (80005cc <main+0xe4>)
 8000508:	f002 fc08 	bl	8002d1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800050c:	210c      	movs	r1, #12
 800050e:	4830      	ldr	r0, [pc, #192]	; (80005d0 <main+0xe8>)
 8000510:	f002 fc04 	bl	8002d1c <HAL_TIM_PWM_Start>

  HAL_Delay(10);
 8000514:	200a      	movs	r0, #10
 8000516:	f000 fde1 	bl	80010dc <HAL_Delay>
  //INITIALIZE PIN STATE AS HIGH
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2110      	movs	r1, #16
 800051e:	482d      	ldr	r0, [pc, #180]	; (80005d4 <main+0xec>)
 8000520:	f001 f88e 	bl	8001640 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000524:	200a      	movs	r0, #10
 8000526:	f000 fdd9 	bl	80010dc <HAL_Delay>
  // READ INITIAL ANGLE TO GET INITIAL ANGLE OFFSET
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2110      	movs	r1, #16
 800052e:	4829      	ldr	r0, [pc, #164]	; (80005d4 <main+0xec>)
 8000530:	f001 f886 	bl	8001640 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SPI_tx[0], 2, 1);
 8000534:	2301      	movs	r3, #1
 8000536:	2202      	movs	r2, #2
 8000538:	4927      	ldr	r1, [pc, #156]	; (80005d8 <main+0xf0>)
 800053a:	4828      	ldr	r0, [pc, #160]	; (80005dc <main+0xf4>)
 800053c:	f001 fdb5 	bl	80020aa <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	4823      	ldr	r0, [pc, #140]	; (80005d4 <main+0xec>)
 8000546:	f001 f87b 	bl	8001640 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800054a:	200a      	movs	r0, #10
 800054c:	f000 fdc6 	bl	80010dc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2110      	movs	r1, #16
 8000554:	481f      	ldr	r0, [pc, #124]	; (80005d4 <main+0xec>)
 8000556:	f001 f873 	bl	8001640 <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&hspi1, &SPI_rx[0], 2, 1);
 800055a:	2301      	movs	r3, #1
 800055c:	2202      	movs	r2, #2
 800055e:	4920      	ldr	r1, [pc, #128]	; (80005e0 <main+0xf8>)
 8000560:	481e      	ldr	r0, [pc, #120]	; (80005dc <main+0xf4>)
 8000562:	f001 fede 	bl	8002322 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	481a      	ldr	r0, [pc, #104]	; (80005d4 <main+0xec>)
 800056c:	f001 f868 	bl	8001640 <HAL_GPIO_WritePin>
  INITIAL_ANGLE = (SPI_rx[0] << 8 | SPI_rx[1])&clearbits;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <main+0xf8>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	021b      	lsls	r3, r3, #8
 8000576:	b21a      	sxth	r2, r3
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <main+0xf8>)
 800057a:	785b      	ldrb	r3, [r3, #1]
 800057c:	b21b      	sxth	r3, r3
 800057e:	4313      	orrs	r3, r2
 8000580:	b21a      	sxth	r2, r3
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <main+0xfc>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	b21b      	sxth	r3, r3
 8000588:	4013      	ands	r3, r2
 800058a:	b21b      	sxth	r3, r3
 800058c:	b29a      	uxth	r2, r3
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <main+0x100>)
 8000590:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000592:	f003 fb7b 	bl	8003c8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartEncoder */
  StartEncoderHandle = osThreadNew(ReadEncoder, NULL, &StartEncoder_attributes);
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <main+0x104>)
 8000598:	2100      	movs	r1, #0
 800059a:	4815      	ldr	r0, [pc, #84]	; (80005f0 <main+0x108>)
 800059c:	f003 fbc0 	bl	8003d20 <osThreadNew>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <main+0x10c>)
 80005a4:	6013      	str	r3, [r2, #0]

  /* creation of StartStepper */
  StartStepperHandle = osThreadNew(ControlStepper, NULL, &StartStepper_attributes);
 80005a6:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <main+0x110>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	4814      	ldr	r0, [pc, #80]	; (80005fc <main+0x114>)
 80005ac:	f003 fbb8 	bl	8003d20 <osThreadNew>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a13      	ldr	r2, [pc, #76]	; (8000600 <main+0x118>)
 80005b4:	6013      	str	r3, [r2, #0]

  /* creation of StartThrust */
  StartThrustHandle = osThreadNew(ControlThrust, NULL, &StartThrust_attributes);
 80005b6:	4a13      	ldr	r2, [pc, #76]	; (8000604 <main+0x11c>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	4813      	ldr	r0, [pc, #76]	; (8000608 <main+0x120>)
 80005bc:	f003 fbb0 	bl	8003d20 <osThreadNew>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <main+0x124>)
 80005c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c6:	f003 fb85 	bl	8003cd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <main+0xe2>
 80005cc:	20004adc 	.word	0x20004adc
 80005d0:	20004a90 	.word	0x20004a90
 80005d4:	40020000 	.word	0x40020000
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20004b28 	.word	0x20004b28
 80005e0:	20004a8c 	.word	0x20004a8c
 80005e4:	20000008 	.word	0x20000008
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	08006f7c 	.word	0x08006f7c
 80005f0:	08000a89 	.word	0x08000a89
 80005f4:	20004b24 	.word	0x20004b24
 80005f8:	08006fa0 	.word	0x08006fa0
 80005fc:	08000bd1 	.word	0x08000bd1
 8000600:	20004ad8 	.word	0x20004ad8
 8000604:	08006fc4 	.word	0x08006fc4
 8000608:	08000c1d 	.word	0x08000c1d
 800060c:	20004b84 	.word	0x20004b84

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fbb0 	bl	8006d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <SystemClock_Config+0xd0>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd4>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000688:	2350      	movs	r3, #80	; 0x50
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f000 ffeb 	bl	8001674 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 fb0e 	bl	8000cc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fa4c 	bl	8001b64 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006d2:	f000 faf7 	bl	8000cc4 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_SPI1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_SPI1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_SPI1_Init+0x64>)
 80006f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_SPI1_Init+0x64>)
 800070e:	2201      	movs	r2, #1
 8000710:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_SPI1_Init+0x64>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_SPI1_Init+0x64>)
 800071c:	2218      	movs	r2, #24
 800071e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_SPI1_Init+0x64>)
 8000734:	220a      	movs	r2, #10
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_SPI1_Init+0x64>)
 800073a:	f001 fc2d 	bl	8001f98 <HAL_SPI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 fabe 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20004b28 	.word	0x20004b28
 8000750:	40013000 	.word	0x40013000

08000754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	; 0x58
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2220      	movs	r2, #32
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f006 faf9 	bl	8006d84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <MX_TIM1_Init+0x138>)
 8000794:	4a3e      	ldr	r2, [pc, #248]	; (8000890 <MX_TIM1_Init+0x13c>)
 8000796:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000798:	4b3c      	ldr	r3, [pc, #240]	; (800088c <MX_TIM1_Init+0x138>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <MX_TIM1_Init+0x138>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007a4:	4b39      	ldr	r3, [pc, #228]	; (800088c <MX_TIM1_Init+0x138>)
 80007a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <MX_TIM1_Init+0x138>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b2:	4b36      	ldr	r3, [pc, #216]	; (800088c <MX_TIM1_Init+0x138>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_TIM1_Init+0x138>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007be:	4833      	ldr	r0, [pc, #204]	; (800088c <MX_TIM1_Init+0x138>)
 80007c0:	f002 f992 	bl	8002ae8 <HAL_TIM_Base_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007ca:	f000 fa7b 	bl	8000cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d8:	4619      	mov	r1, r3
 80007da:	482c      	ldr	r0, [pc, #176]	; (800088c <MX_TIM1_Init+0x138>)
 80007dc:	f002 fd30 	bl	8003240 <HAL_TIM_ConfigClockSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007e6:	f000 fa6d 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ea:	4828      	ldr	r0, [pc, #160]	; (800088c <MX_TIM1_Init+0x138>)
 80007ec:	f002 fa3c 	bl	8002c68 <HAL_TIM_PWM_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007f6:	f000 fa65 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000806:	4619      	mov	r1, r3
 8000808:	4820      	ldr	r0, [pc, #128]	; (800088c <MX_TIM1_Init+0x138>)
 800080a:	f003 f919 	bl	8003a40 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000814:	f000 fa56 	bl	8000cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000818:	2360      	movs	r3, #96	; 0x60
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	2208      	movs	r2, #8
 800083a:	4619      	mov	r1, r3
 800083c:	4813      	ldr	r0, [pc, #76]	; (800088c <MX_TIM1_Init+0x138>)
 800083e:	f002 fc3d 	bl	80030bc <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000848:	f000 fa3c 	bl	8000cc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM1_Init+0x138>)
 8000870:	f003 f962 	bl	8003b38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800087a:	f000 fa23 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM1_Init+0x138>)
 8000880:	f000 fad2 	bl	8000e28 <HAL_TIM_MspPostInit>

}
 8000884:	bf00      	nop
 8000886:	3758      	adds	r7, #88	; 0x58
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20004adc 	.word	0x20004adc
 8000890:	40010000 	.word	0x40010000

08000894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08e      	sub	sp, #56	; 0x38
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
 80008c0:	615a      	str	r2, [r3, #20]
 80008c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <MX_TIM3_Init+0xe4>)
 80008c6:	4a2d      	ldr	r2, [pc, #180]	; (800097c <MX_TIM3_Init+0xe8>)
 80008c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_TIM3_Init+0xe4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <MX_TIM3_Init+0xe4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008d6:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_TIM3_Init+0xe4>)
 80008d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_TIM3_Init+0xe4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_TIM3_Init+0xe4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ea:	4823      	ldr	r0, [pc, #140]	; (8000978 <MX_TIM3_Init+0xe4>)
 80008ec:	f002 f8fc 	bl	8002ae8 <HAL_TIM_Base_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008f6:	f000 f9e5 	bl	8000cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000900:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000904:	4619      	mov	r1, r3
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <MX_TIM3_Init+0xe4>)
 8000908:	f002 fc9a 	bl	8003240 <HAL_TIM_ConfigClockSource>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000912:	f000 f9d7 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000916:	4818      	ldr	r0, [pc, #96]	; (8000978 <MX_TIM3_Init+0xe4>)
 8000918:	f002 f9a6 	bl	8002c68 <HAL_TIM_PWM_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000922:	f000 f9cf 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	4619      	mov	r1, r3
 8000934:	4810      	ldr	r0, [pc, #64]	; (8000978 <MX_TIM3_Init+0xe4>)
 8000936:	f003 f883 	bl	8003a40 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000940:	f000 f9c0 	bl	8000cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000944:	2360      	movs	r3, #96	; 0x60
 8000946:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	220c      	movs	r2, #12
 8000958:	4619      	mov	r1, r3
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <MX_TIM3_Init+0xe4>)
 800095c:	f002 fbae 	bl	80030bc <HAL_TIM_PWM_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000966:	f000 f9ad 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_TIM3_Init+0xe4>)
 800096c:	f000 fa5c 	bl	8000e28 <HAL_TIM_MspPostInit>

}
 8000970:	bf00      	nop
 8000972:	3738      	adds	r7, #56	; 0x38
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20004a90 	.word	0x20004a90
 800097c:	40000400 	.word	0x40000400

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <MX_GPIO_Init+0xfc>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a37      	ldr	r2, [pc, #220]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a30      	ldr	r2, [pc, #192]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a29      	ldr	r2, [pc, #164]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a22      	ldr	r2, [pc, #136]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_GPIO_Init+0xfc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <MX_GPIO_Init+0xfc>)
 8000a10:	f043 0310 	orr.w	r3, r3, #16
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_GPIO_Init+0xfc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0310 	and.w	r3, r3, #16
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_14, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f244 0110 	movw	r1, #16400	; 0x4010
 8000a28:	4815      	ldr	r0, [pc, #84]	; (8000a80 <MX_GPIO_Init+0x100>)
 8000a2a:	f000 fe09 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2110      	movs	r1, #16
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_GPIO_Init+0x104>)
 8000a34:	f000 fe04 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF4 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14;
 8000a38:	f244 0310 	movw	r3, #16400	; 0x4010
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480b      	ldr	r0, [pc, #44]	; (8000a80 <MX_GPIO_Init+0x100>)
 8000a52:	f000 fc49 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a56:	2310      	movs	r3, #16
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_GPIO_Init+0x104>)
 8000a6e:	f000 fc3b 	bl	80012e8 <HAL_GPIO_Init>

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40021400 	.word	0x40021400
 8000a84:	40020000 	.word	0x40020000

08000a88 <ReadEncoder>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadEncoder */
void ReadEncoder(void *argument)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	// LOOP TO DO ONE ANGLE READING
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //PULL CSn LOW
 8000a90:	2200      	movs	r2, #0
 8000a92:	2110      	movs	r1, #16
 8000a94:	4840      	ldr	r0, [pc, #256]	; (8000b98 <ReadEncoder+0x110>)
 8000a96:	f000 fdd3 	bl	8001640 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPI_tx[0], 2, 1); //TRANSMIT READ COMMAND(0xFF)
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	493f      	ldr	r1, [pc, #252]	; (8000b9c <ReadEncoder+0x114>)
 8000aa0:	483f      	ldr	r0, [pc, #252]	; (8000ba0 <ReadEncoder+0x118>)
 8000aa2:	f001 fb02 	bl	80020aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //PULL CSn HIGH
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	483b      	ldr	r0, [pc, #236]	; (8000b98 <ReadEncoder+0x110>)
 8000aac:	f000 fdc8 	bl	8001640 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f000 fb13 	bl	80010dc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //PULL CSn LOW
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2110      	movs	r1, #16
 8000aba:	4837      	ldr	r0, [pc, #220]	; (8000b98 <ReadEncoder+0x110>)
 8000abc:	f000 fdc0 	bl	8001640 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, &SPI_rx[0], 2, 1); //RECEIVE ANGLE READING
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	4937      	ldr	r1, [pc, #220]	; (8000ba4 <ReadEncoder+0x11c>)
 8000ac6:	4836      	ldr	r0, [pc, #216]	; (8000ba0 <ReadEncoder+0x118>)
 8000ac8:	f001 fc2b 	bl	8002322 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //PULL CSn HIGH
 8000acc:	2201      	movs	r2, #1
 8000ace:	2110      	movs	r1, #16
 8000ad0:	4831      	ldr	r0, [pc, #196]	; (8000b98 <ReadEncoder+0x110>)
 8000ad2:	f000 fdb5 	bl	8001640 <HAL_GPIO_WritePin>

	ENCODER_ANGLE = (SPI_rx[0] << 8 | SPI_rx[1])&clearbits; //FILTER OUT BIT 14&15
 8000ad6:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <ReadEncoder+0x11c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <ReadEncoder+0x11c>)
 8000ae0:	785b      	ldrb	r3, [r3, #1]
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <ReadEncoder+0x120>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	4013      	ands	r3, r2
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <ReadEncoder+0x124>)
 8000af6:	801a      	strh	r2, [r3, #0]
	ENCODER_ANGLE = (ENCODER_ANGLE - INITIAL_ANGLE)&clearbits; //REMOVE INITIAL ANGLE OFFSET
 8000af8:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <ReadEncoder+0x124>)
 8000afa:	881a      	ldrh	r2, [r3, #0]
 8000afc:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <ReadEncoder+0x128>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <ReadEncoder+0x120>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b26      	ldr	r3, [pc, #152]	; (8000bac <ReadEncoder+0x124>)
 8000b14:	801a      	strh	r2, [r3, #0]
	ANGLE_DEGREE = ENCODER_ANGLE*ConvertToDegree; //CONVERTS 14-bit number to 360 degree
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <ReadEncoder+0x124>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	ee07 3a90 	vmov	s15, r3
 8000b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b22:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000bb4 <ReadEncoder+0x12c>
 8000b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2a:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <ReadEncoder+0x130>)
 8000b2c:	edc3 7a00 	vstr	s15, [r3]

	if(ANGLE_DEGREE > 180){
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <ReadEncoder+0x130>)
 8000b32:	edd3 7a00 	vldr	s15, [r3]
 8000b36:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000bbc <ReadEncoder+0x134>
 8000b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b42:	dd09      	ble.n	8000b58 <ReadEncoder+0xd0>
		ANGLE_DEGREE = ANGLE_DEGREE - 360;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <ReadEncoder+0x130>)
 8000b46:	edd3 7a00 	vldr	s15, [r3]
 8000b4a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000bc0 <ReadEncoder+0x138>
 8000b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <ReadEncoder+0x130>)
 8000b54:	edc3 7a00 	vstr	s15, [r3]
	}
	ANGLE_ERROR = ANGLE_REF - ANGLE_DEGREE; //CALCULATE ANGLE ERROR
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <ReadEncoder+0x13c>)
 8000b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <ReadEncoder+0x130>)
 8000b68:	edd3 7a00 	vldr	s15, [r3]
 8000b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b74:	ee17 3a90 	vmov	r3, s15
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <ReadEncoder+0x140>)
 8000b7c:	801a      	strh	r2, [r3, #0]
	thread1++;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <ReadEncoder+0x144>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <ReadEncoder+0x144>)
 8000b86:	6013      	str	r3, [r2, #0]
    osThreadFlagsWait(0x01,osFlagsWaitAny, osWaitForever); // START ControlStepper thread
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f003 f9a6 	bl	8003ee0 <osThreadFlagsWait>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //PULL CSn LOW
 8000b94:	e77c      	b.n	8000a90 <ReadEncoder+0x8>
 8000b96:	bf00      	nop
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20004b28 	.word	0x20004b28
 8000ba4:	20004a8c 	.word	0x20004a8c
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	2000009e 	.word	0x2000009e
 8000bb0:	2000009c 	.word	0x2000009c
 8000bb4:	3cb402d0 	.word	0x3cb402d0
 8000bb8:	20004a88 	.word	0x20004a88
 8000bbc:	43340000 	.word	0x43340000
 8000bc0:	43b40000 	.word	0x43b40000
 8000bc4:	20000002 	.word	0x20000002
 8000bc8:	200000a0 	.word	0x200000a0
 8000bcc:	200000a8 	.word	0x200000a8

08000bd0 <ControlStepper>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlStepper */
void ControlStepper(void *argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
//		osThreadFlagsSet(StartThrustHandle, 0x03);
//		osThreadFlagsWait(0x02,osFlagsWaitAny, osWaitForever);
//	}


	TIM1->ARR  = PWM_PERIOD;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <ControlStepper+0x3c>)
 8000bda:	881a      	ldrh	r2, [r3, #0]
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <ControlStepper+0x40>)
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR3 = PWM_PERIOD/2;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <ControlStepper+0x3c>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	085b      	lsrs	r3, r3, #1
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <ControlStepper+0x40>)
 8000bea:	63da      	str	r2, [r3, #60]	; 0x3c
//		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
//		HAL_Delay(1);
//	}


	osDelay(500U);
 8000bec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf0:	f003 f9f7 	bl	8003fe2 <osDelay>
	thread2++;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <ControlStepper+0x44>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <ControlStepper+0x44>)
 8000bfc:	6013      	str	r3, [r2, #0]
	osThreadFlagsSet(StartEncoderHandle, 0x01);
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <ControlStepper+0x48>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2101      	movs	r1, #1
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 f91d 	bl	8003e44 <osThreadFlagsSet>
	TIM1->ARR  = PWM_PERIOD;
 8000c0a:	e7e5      	b.n	8000bd8 <ControlStepper+0x8>
 8000c0c:	2000000a 	.word	0x2000000a
 8000c10:	40010000 	.word	0x40010000
 8000c14:	200000ac 	.word	0x200000ac
 8000c18:	20004b24 	.word	0x20004b24

08000c1c <ControlThrust>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlThrust */
void ControlThrust(void *argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlThrust */
  /* Infinite loop */
  for(;;)
  {
	//TIM3 ARR = 65535
	osThreadFlagsWait(0x03,osFlagsWaitAny, osWaitForever);
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f003 f958 	bl	8003ee0 <osThreadFlagsWait>
	THRUST_DUTY_CYCLE = (THRUST_REF / MAX_THRUST)*65535;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <ControlThrust+0x68>)
 8000c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <ControlThrust+0x6c>)
 8000c40:	ed93 7a00 	vldr	s14, [r3]
 8000c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c48:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000c8c <ControlThrust+0x70>
 8000c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c54:	ee17 3a90 	vmov	r3, s15
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <ControlThrust+0x74>)
 8000c5c:	801a      	strh	r2, [r3, #0]
	TIM3->CCR4 = THRUST_DUTY_CYCLE;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <ControlThrust+0x74>)
 8000c60:	881a      	ldrh	r2, [r3, #0]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <ControlThrust+0x78>)
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40
	thread3++;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <ControlThrust+0x7c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <ControlThrust+0x7c>)
 8000c6e:	6013      	str	r3, [r2, #0]
    osDelay(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f003 f9b6 	bl	8003fe2 <osDelay>
    osThreadFlagsSet(StartStepperHandle, 0x02);
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <ControlThrust+0x80>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 f8e1 	bl	8003e44 <osThreadFlagsSet>
	osThreadFlagsWait(0x03,osFlagsWaitAny, osWaitForever);
 8000c82:	e7cf      	b.n	8000c24 <ControlThrust+0x8>
 8000c84:	200000a4 	.word	0x200000a4
 8000c88:	20000004 	.word	0x20000004
 8000c8c:	477fff00 	.word	0x477fff00
 8000c90:	200000a2 	.word	0x200000a2
 8000c94:	40000400 	.word	0x40000400
 8000c98:	200000b0 	.word	0x200000b0
 8000c9c:	20004ad8 	.word	0x20004ad8

08000ca0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d101      	bne.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cb2:	f000 f9f3 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40001000 	.word	0x40001000

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_MspInit+0x54>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <HAL_MspInit+0x54>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x54>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_MspInit+0x54>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_MspInit+0x54>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_MspInit+0x54>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	210f      	movs	r1, #15
 8000d12:	f06f 0001 	mvn.w	r0, #1
 8000d16:	f000 fabd 	bl	8001294 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_SPI_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12b      	bne.n	8000da2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d82:	23e0      	movs	r3, #224	; 0xe0
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d92:	2305      	movs	r3, #5
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d9e:	f000 faa3 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40013000 	.word	0x40013000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000

08000db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <HAL_TIM_Base_MspInit+0x64>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10e      	bne.n	8000de8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000de6:	e012      	b.n	8000e0e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <HAL_TIM_Base_MspInit+0x6c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10d      	bne.n	8000e0e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40000400 	.word	0x40000400

08000e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a24      	ldr	r2, [pc, #144]	; (8000ed8 <HAL_TIM_MspPostInit+0xb0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d11f      	bne.n	8000e8a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_TIM_MspPostInit+0xb4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a22      	ldr	r2, [pc, #136]	; (8000edc <HAL_TIM_MspPostInit+0xb4>)
 8000e54:	f043 0310 	orr.w	r3, r3, #16
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_TIM_MspPostInit+0xb4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <HAL_TIM_MspPostInit+0xb8>)
 8000e84:	f000 fa30 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e88:	e022      	b.n	8000ed0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <HAL_TIM_MspPostInit+0xbc>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d11d      	bne.n	8000ed0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_TIM_MspPostInit+0xb4>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_TIM_MspPostInit+0xb4>)
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_TIM_MspPostInit+0xb4>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <HAL_TIM_MspPostInit+0xc0>)
 8000ecc:	f000 fa0c 	bl	80012e8 <HAL_GPIO_Init>
}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40000400 	.word	0x40000400
 8000ee8:	40020400 	.word	0x40020400

08000eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	2036      	movs	r0, #54	; 0x36
 8000f02:	f000 f9c7 	bl	8001294 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f06:	2036      	movs	r0, #54	; 0x36
 8000f08:	f000 f9e0 	bl	80012cc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	4a1e      	ldr	r2, [pc, #120]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f28:	f107 0210 	add.w	r2, r7, #16
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fffe 	bl	8001f34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f38:	f000 ffe8 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f44:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <HAL_InitTick+0xa8>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	0c9b      	lsrs	r3, r3, #18
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_InitTick+0xac>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_InitTick+0xb0>)
 8000f54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_InitTick+0xac>)
 8000f58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_InitTick+0xac>)
 8000f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_InitTick+0xac>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_InitTick+0xac>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <HAL_InitTick+0xac>)
 8000f72:	f001 fdb9 	bl	8002ae8 <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d104      	bne.n	8000f86 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <HAL_InitTick+0xac>)
 8000f7e:	f001 fe03 	bl	8002b88 <HAL_TIM_Base_Start_IT>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3730      	adds	r7, #48	; 0x30
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	431bde83 	.word	0x431bde83
 8000f98:	20004b88 	.word	0x20004b88
 8000f9c:	40001000 	.word	0x40001000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM6_DAC_IRQHandler+0x10>)
 8000fd2:	f001 ff6b 	bl	8002eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20004b88 	.word	0x20004b88

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0x12>
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <LoopFillZerobss+0x16>)
 800100a:	490e      	ldr	r1, [pc, #56]	; (8001044 <LoopFillZerobss+0x1a>)
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <LoopFillZerobss+0x1e>)
 800100e:	2300      	movs	r3, #0
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:
 8001012:	58d4      	ldr	r4, [r2, r3]
 8001014:	50c4      	str	r4, [r0, r3]
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:
 8001018:	18c4      	adds	r4, r0, r3
 800101a:	428c      	cmp	r4, r1
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoopFillZerobss+0x22>)
 8001020:	4c0b      	ldr	r4, [pc, #44]	; (8001050 <LoopFillZerobss+0x26>)
 8001022:	2300      	movs	r3, #0
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:
 800102a:	42a2      	cmp	r2, r4
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>
 800102e:	f7ff ffd7 	bl	8000fe0 <SystemInit>
 8001032:	f005 fe73 	bl	8006d1c <__libc_init_array>
 8001036:	f7ff fa57 	bl	80004e8 <main>
 800103a:	4770      	bx	lr
 800103c:	20030000 	.word	0x20030000
 8001040:	20000000 	.word	0x20000000
 8001044:	20000080 	.word	0x20000080
 8001048:	08007070 	.word	0x08007070
 800104c:	20000080 	.word	0x20000080
 8001050:	20004c20 	.word	0x20004c20

08001054 <ADC_IRQHandler>:
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_Init+0x40>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_Init+0x40>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x40>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f8fc 	bl	800127e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	200f      	movs	r0, #15
 8001088:	f7ff ff30 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fe20 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000014 	.word	0x20000014
 80010c0:	20004bd0 	.word	0x20004bd0

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20004bd0 	.word	0x20004bd0

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000014 	.word	0x20000014

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	; (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff4c 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a6:	f7ff ff61 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	6978      	ldr	r0, [r7, #20]
 80012b2:	f7ff ffb1 	bl	8001218 <NVIC_EncodePriority>
 80012b6:	4602      	mov	r2, r0
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff80 	bl	80011c4 <__NVIC_SetPriority>
}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff54 	bl	8001188 <__NVIC_EnableIRQ>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e177      	b.n	80015f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 8166 	bne.w	80015ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001336:	2b02      	cmp	r3, #2
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d017      	beq.n	80013d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80c0 	beq.w	80015ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b66      	ldr	r3, [pc, #408]	; (800160c <HAL_GPIO_Init+0x324>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a65      	ldr	r2, [pc, #404]	; (800160c <HAL_GPIO_Init+0x324>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_GPIO_Init+0x324>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a61      	ldr	r2, [pc, #388]	; (8001610 <HAL_GPIO_Init+0x328>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_GPIO_Init+0x32c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d037      	beq.n	8001526 <HAL_GPIO_Init+0x23e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a57      	ldr	r2, [pc, #348]	; (8001618 <HAL_GPIO_Init+0x330>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d031      	beq.n	8001522 <HAL_GPIO_Init+0x23a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a56      	ldr	r2, [pc, #344]	; (800161c <HAL_GPIO_Init+0x334>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d02b      	beq.n	800151e <HAL_GPIO_Init+0x236>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a55      	ldr	r2, [pc, #340]	; (8001620 <HAL_GPIO_Init+0x338>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d025      	beq.n	800151a <HAL_GPIO_Init+0x232>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a54      	ldr	r2, [pc, #336]	; (8001624 <HAL_GPIO_Init+0x33c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d01f      	beq.n	8001516 <HAL_GPIO_Init+0x22e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a53      	ldr	r2, [pc, #332]	; (8001628 <HAL_GPIO_Init+0x340>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d019      	beq.n	8001512 <HAL_GPIO_Init+0x22a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a52      	ldr	r2, [pc, #328]	; (800162c <HAL_GPIO_Init+0x344>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d013      	beq.n	800150e <HAL_GPIO_Init+0x226>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a51      	ldr	r2, [pc, #324]	; (8001630 <HAL_GPIO_Init+0x348>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00d      	beq.n	800150a <HAL_GPIO_Init+0x222>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a50      	ldr	r2, [pc, #320]	; (8001634 <HAL_GPIO_Init+0x34c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d007      	beq.n	8001506 <HAL_GPIO_Init+0x21e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4f      	ldr	r2, [pc, #316]	; (8001638 <HAL_GPIO_Init+0x350>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d101      	bne.n	8001502 <HAL_GPIO_Init+0x21a>
 80014fe:	2309      	movs	r3, #9
 8001500:	e012      	b.n	8001528 <HAL_GPIO_Init+0x240>
 8001502:	230a      	movs	r3, #10
 8001504:	e010      	b.n	8001528 <HAL_GPIO_Init+0x240>
 8001506:	2308      	movs	r3, #8
 8001508:	e00e      	b.n	8001528 <HAL_GPIO_Init+0x240>
 800150a:	2307      	movs	r3, #7
 800150c:	e00c      	b.n	8001528 <HAL_GPIO_Init+0x240>
 800150e:	2306      	movs	r3, #6
 8001510:	e00a      	b.n	8001528 <HAL_GPIO_Init+0x240>
 8001512:	2305      	movs	r3, #5
 8001514:	e008      	b.n	8001528 <HAL_GPIO_Init+0x240>
 8001516:	2304      	movs	r3, #4
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x240>
 800151a:	2303      	movs	r3, #3
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x240>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x240>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x240>
 8001526:	2300      	movs	r3, #0
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001538:	4935      	ldr	r1, [pc, #212]	; (8001610 <HAL_GPIO_Init+0x328>)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <HAL_GPIO_Init+0x354>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156a:	4a34      	ldr	r2, [pc, #208]	; (800163c <HAL_GPIO_Init+0x354>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001570:	4b32      	ldr	r3, [pc, #200]	; (800163c <HAL_GPIO_Init+0x354>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001594:	4a29      	ldr	r2, [pc, #164]	; (800163c <HAL_GPIO_Init+0x354>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_GPIO_Init+0x354>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015be:	4a1f      	ldr	r2, [pc, #124]	; (800163c <HAL_GPIO_Init+0x354>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_GPIO_Init+0x354>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <HAL_GPIO_Init+0x354>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	f67f ae84 	bls.w	8001304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400
 800161c:	40020800 	.word	0x40020800
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40021000 	.word	0x40021000
 8001628:	40021400 	.word	0x40021400
 800162c:	40021800 	.word	0x40021800
 8001630:	40021c00 	.word	0x40021c00
 8001634:	40022000 	.word	0x40022000
 8001638:	40022400 	.word	0x40022400
 800163c:	40013c00 	.word	0x40013c00

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800165c:	e003      	b.n	8001666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	041a      	lsls	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	619a      	str	r2, [r3, #24]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e264      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d075      	beq.n	800177e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001692:	4ba3      	ldr	r3, [pc, #652]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b04      	cmp	r3, #4
 800169c:	d00c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169e:	4ba0      	ldr	r3, [pc, #640]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d112      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016aa:	4b9d      	ldr	r3, [pc, #628]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b6:	d10b      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	4b99      	ldr	r3, [pc, #612]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d05b      	beq.n	800177c <HAL_RCC_OscConfig+0x108>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d157      	bne.n	800177c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e23f      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d106      	bne.n	80016e8 <HAL_RCC_OscConfig+0x74>
 80016da:	4b91      	ldr	r3, [pc, #580]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a90      	ldr	r2, [pc, #576]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e01d      	b.n	8001724 <HAL_RCC_OscConfig+0xb0>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x98>
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a8a      	ldr	r2, [pc, #552]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b88      	ldr	r3, [pc, #544]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a87      	ldr	r2, [pc, #540]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0xb0>
 800170c:	4b84      	ldr	r3, [pc, #528]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a83      	ldr	r2, [pc, #524]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b81      	ldr	r3, [pc, #516]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a80      	ldr	r2, [pc, #512]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fcca 	bl	80010c4 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fcc6 	bl	80010c4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e204      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b76      	ldr	r3, [pc, #472]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0xc0>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fcb6 	bl	80010c4 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fcb2 	bl	80010c4 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e1f0      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	4b6c      	ldr	r3, [pc, #432]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0xe8>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d063      	beq.n	8001852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001796:	4b62      	ldr	r3, [pc, #392]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d11c      	bne.n	80017dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a2:	4b5f      	ldr	r3, [pc, #380]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d116      	bne.n	80017dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_RCC_OscConfig+0x152>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e1c4      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	4b56      	ldr	r3, [pc, #344]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4952      	ldr	r1, [pc, #328]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	e03a      	b.n	8001852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e4:	4b4f      	ldr	r3, [pc, #316]	; (8001924 <HAL_RCC_OscConfig+0x2b0>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff fc6b 	bl	80010c4 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fc67 	bl	80010c4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1a5      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	4b46      	ldr	r3, [pc, #280]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4940      	ldr	r1, [pc, #256]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
 8001824:	e015      	b.n	8001852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_OscConfig+0x2b0>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fc4a 	bl	80010c4 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001834:	f7ff fc46 	bl	80010c4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e184      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001846:	4b36      	ldr	r3, [pc, #216]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d030      	beq.n	80018c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d016      	beq.n	8001894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_RCC_OscConfig+0x2b4>)
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fc2a 	bl	80010c4 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff fc26 	bl	80010c4 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e164      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x200>
 8001892:	e015      	b.n	80018c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_RCC_OscConfig+0x2b4>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff fc13 	bl	80010c4 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a2:	f7ff fc0f 	bl	80010c4 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e14d      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80a0 	beq.w	8001a0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10f      	bne.n	80018fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fa:	2301      	movs	r3, #1
 80018fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_OscConfig+0x2b8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d121      	bne.n	800194e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_RCC_OscConfig+0x2b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_RCC_OscConfig+0x2b8>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001916:	f7ff fbd5 	bl	80010c4 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	e011      	b.n	8001942 <HAL_RCC_OscConfig+0x2ce>
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	42470000 	.word	0x42470000
 8001928:	42470e80 	.word	0x42470e80
 800192c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001930:	f7ff fbc8 	bl	80010c4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e106      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b85      	ldr	r3, [pc, #532]	; (8001b58 <HAL_RCC_OscConfig+0x4e4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d106      	bne.n	8001964 <HAL_RCC_OscConfig+0x2f0>
 8001956:	4b81      	ldr	r3, [pc, #516]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	4a80      	ldr	r2, [pc, #512]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6713      	str	r3, [r2, #112]	; 0x70
 8001962:	e01c      	b.n	800199e <HAL_RCC_OscConfig+0x32a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b05      	cmp	r3, #5
 800196a:	d10c      	bne.n	8001986 <HAL_RCC_OscConfig+0x312>
 800196c:	4b7b      	ldr	r3, [pc, #492]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	4a7a      	ldr	r2, [pc, #488]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6713      	str	r3, [r2, #112]	; 0x70
 8001978:	4b78      	ldr	r3, [pc, #480]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	4a77      	ldr	r2, [pc, #476]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6713      	str	r3, [r2, #112]	; 0x70
 8001984:	e00b      	b.n	800199e <HAL_RCC_OscConfig+0x32a>
 8001986:	4b75      	ldr	r3, [pc, #468]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198a:	4a74      	ldr	r2, [pc, #464]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	6713      	str	r3, [r2, #112]	; 0x70
 8001992:	4b72      	ldr	r3, [pc, #456]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	4a71      	ldr	r2, [pc, #452]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001998:	f023 0304 	bic.w	r3, r3, #4
 800199c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d015      	beq.n	80019d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a6:	f7ff fb8d 	bl	80010c4 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ac:	e00a      	b.n	80019c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f7ff fb89 	bl	80010c4 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019bc:	4293      	cmp	r3, r2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e0c5      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c4:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ee      	beq.n	80019ae <HAL_RCC_OscConfig+0x33a>
 80019d0:	e014      	b.n	80019fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fb77 	bl	80010c4 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff fb73 	bl	80010c4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0af      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 80019f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ee      	bne.n	80019da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d105      	bne.n	8001a0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a02:	4b56      	ldr	r3, [pc, #344]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 809b 	beq.w	8001b4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a18:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d05c      	beq.n	8001ade <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d141      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2c:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <HAL_RCC_OscConfig+0x4ec>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fb47 	bl	80010c4 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff fb43 	bl	80010c4 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e081      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4c:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69da      	ldr	r2, [r3, #28]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	019b      	lsls	r3, r3, #6
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	061b      	lsls	r3, r3, #24
 8001a7c:	4937      	ldr	r1, [pc, #220]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_OscConfig+0x4ec>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fb1c 	bl	80010c4 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff fb18 	bl	80010c4 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e056      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x41c>
 8001aae:	e04e      	b.n	8001b4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab0:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_OscConfig+0x4ec>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fb05 	bl	80010c4 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff fb01 	bl	80010c4 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e03f      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x44a>
 8001adc:	e037      	b.n	8001b4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e032      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_RCC_OscConfig+0x4e8>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d028      	beq.n	8001b4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d121      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d11a      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d111      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	085b      	lsrs	r3, r3, #1
 8001b32:	3b01      	subs	r3, #1
 8001b34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	42470060 	.word	0x42470060

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0cc      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d90c      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b65      	ldr	r3, [pc, #404]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0b8      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb8:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	494d      	ldr	r1, [pc, #308]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d044      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d119      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e07f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c22:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e067      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4934      	ldr	r1, [pc, #208]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c54:	f7ff fa36 	bl	80010c4 <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff fa32 	bl	80010c4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e04f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d20c      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e032      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4916      	ldr	r1, [pc, #88]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	490e      	ldr	r1, [pc, #56]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cea:	f000 f821 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	490a      	ldr	r1, [pc, #40]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	5ccb      	ldrb	r3, [r1, r3]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f8ee 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023c00 	.word	0x40023c00
 8001d20:	40023800 	.word	0x40023800
 8001d24:	08006fe8 	.word	0x08006fe8
 8001d28:	2000000c 	.word	0x2000000c
 8001d2c:	20000010 	.word	0x20000010

08001d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	2300      	movs	r3, #0
 8001d42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d48:	4b67      	ldr	r3, [pc, #412]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d00d      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x40>
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	f200 80bd 	bhi.w	8001ed4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x34>
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d62:	e0b7      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d64:	4b61      	ldr	r3, [pc, #388]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d66:	60bb      	str	r3, [r7, #8]
       break;
 8001d68:	e0b7      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d6a:	4b61      	ldr	r3, [pc, #388]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d6c:	60bb      	str	r3, [r7, #8]
      break;
 8001d6e:	e0b4      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d70:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d7a:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d04d      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d86:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	ea02 0800 	and.w	r8, r2, r0
 8001d9e:	ea03 0901 	and.w	r9, r3, r1
 8001da2:	4640      	mov	r0, r8
 8001da4:	4649      	mov	r1, r9
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	014b      	lsls	r3, r1, #5
 8001db0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001db4:	0142      	lsls	r2, r0, #5
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	ebb0 0008 	subs.w	r0, r0, r8
 8001dbe:	eb61 0109 	sbc.w	r1, r1, r9
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	018b      	lsls	r3, r1, #6
 8001dcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dd0:	0182      	lsls	r2, r0, #6
 8001dd2:	1a12      	subs	r2, r2, r0
 8001dd4:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd8:	f04f 0000 	mov.w	r0, #0
 8001ddc:	f04f 0100 	mov.w	r1, #0
 8001de0:	00d9      	lsls	r1, r3, #3
 8001de2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001de6:	00d0      	lsls	r0, r2, #3
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	eb12 0208 	adds.w	r2, r2, r8
 8001df0:	eb43 0309 	adc.w	r3, r3, r9
 8001df4:	f04f 0000 	mov.w	r0, #0
 8001df8:	f04f 0100 	mov.w	r1, #0
 8001dfc:	0259      	lsls	r1, r3, #9
 8001dfe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e02:	0250      	lsls	r0, r2, #9
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	f7fe f9ec 	bl	80001f0 <__aeabi_uldivmod>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e04a      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e22:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	099b      	lsrs	r3, r3, #6
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	ea02 0400 	and.w	r4, r2, r0
 8001e3a:	ea03 0501 	and.w	r5, r3, r1
 8001e3e:	4620      	mov	r0, r4
 8001e40:	4629      	mov	r1, r5
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	014b      	lsls	r3, r1, #5
 8001e4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e50:	0142      	lsls	r2, r0, #5
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	1b00      	subs	r0, r0, r4
 8001e58:	eb61 0105 	sbc.w	r1, r1, r5
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	018b      	lsls	r3, r1, #6
 8001e66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e6a:	0182      	lsls	r2, r0, #6
 8001e6c:	1a12      	subs	r2, r2, r0
 8001e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e72:	f04f 0000 	mov.w	r0, #0
 8001e76:	f04f 0100 	mov.w	r1, #0
 8001e7a:	00d9      	lsls	r1, r3, #3
 8001e7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e80:	00d0      	lsls	r0, r2, #3
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	1912      	adds	r2, r2, r4
 8001e88:	eb45 0303 	adc.w	r3, r5, r3
 8001e8c:	f04f 0000 	mov.w	r0, #0
 8001e90:	f04f 0100 	mov.w	r1, #0
 8001e94:	0299      	lsls	r1, r3, #10
 8001e96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e9a:	0290      	lsls	r0, r2, #10
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	f7fe f9a0 	bl	80001f0 <__aeabi_uldivmod>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	60bb      	str	r3, [r7, #8]
      break;
 8001ed2:	e002      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ed6:	60bb      	str	r3, [r7, #8]
      break;
 8001ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eda:	68bb      	ldr	r3, [r7, #8]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	00f42400 	.word	0x00f42400
 8001ef0:	007a1200 	.word	0x007a1200

08001ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f10:	f7ff fff0 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0a9b      	lsrs	r3, r3, #10
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4903      	ldr	r1, [pc, #12]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	08006ff8 	.word	0x08006ff8

08001f34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	220f      	movs	r2, #15
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_RCC_GetClockConfig+0x60>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 020f 	and.w	r2, r3, #15
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	601a      	str	r2, [r3, #0]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40023c00 	.word	0x40023c00

08001f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07b      	b.n	80020a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d108      	bne.n	8001fc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fba:	d009      	beq.n	8001fd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
 8001fc2:	e005      	b.n	8001fd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fe9c 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002006:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002054:	ea42 0103 	orr.w	r1, r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f003 0104 	and.w	r1, r3, #4
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	f003 0210 	and.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002090:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b088      	sub	sp, #32
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	4613      	mov	r3, r2
 80020b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_SPI_Transmit+0x22>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e126      	b.n	800231a <HAL_SPI_Transmit+0x270>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020d4:	f7fe fff6 	bl	80010c4 <HAL_GetTick>
 80020d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d002      	beq.n	80020f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
 80020ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020ee:	e10b      	b.n	8002308 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_SPI_Transmit+0x52>
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002100:	e102      	b.n	8002308 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2203      	movs	r2, #3
 8002106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	88fa      	ldrh	r2, [r7, #6]
 8002120:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002148:	d10f      	bne.n	800216a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002158:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002168:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002174:	2b40      	cmp	r3, #64	; 0x40
 8002176:	d007      	beq.n	8002188 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002190:	d14b      	bne.n	800222a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_SPI_Transmit+0xf6>
 800219a:	8afb      	ldrh	r3, [r7, #22]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d13e      	bne.n	800221e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	881a      	ldrh	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	1c9a      	adds	r2, r3, #2
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021c4:	e02b      	b.n	800221e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d112      	bne.n	80021fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	1c9a      	adds	r2, r3, #2
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80021f8:	e011      	b.n	800221e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021fa:	f7fe ff63 	bl	80010c4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d803      	bhi.n	8002212 <HAL_SPI_Transmit+0x168>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002210:	d102      	bne.n	8002218 <HAL_SPI_Transmit+0x16e>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800221c:	e074      	b.n	8002308 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ce      	bne.n	80021c6 <HAL_SPI_Transmit+0x11c>
 8002228:	e04c      	b.n	80022c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_SPI_Transmit+0x18e>
 8002232:	8afb      	ldrh	r3, [r7, #22]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d140      	bne.n	80022ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	330c      	adds	r3, #12
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800225e:	e02c      	b.n	80022ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d113      	bne.n	8002296 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	86da      	strh	r2, [r3, #54]	; 0x36
 8002294:	e011      	b.n	80022ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002296:	f7fe ff15 	bl	80010c4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d803      	bhi.n	80022ae <HAL_SPI_Transmit+0x204>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ac:	d102      	bne.n	80022b4 <HAL_SPI_Transmit+0x20a>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022b8:	e026      	b.n	8002308 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1cd      	bne.n	8002260 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	6839      	ldr	r1, [r7, #0]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 fbcb 	bl	8002a64 <SPI_EndRxTxTransaction>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	77fb      	strb	r3, [r7, #31]
 8002304:	e000      	b.n	8002308 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002306:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002318:	7ffb      	ldrb	r3, [r7, #31]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b088      	sub	sp, #32
 8002326:	af02      	add	r7, sp, #8
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800233e:	d112      	bne.n	8002366 <HAL_SPI_Receive+0x44>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10e      	bne.n	8002366 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2204      	movs	r2, #4
 800234c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f8f1 	bl	8002544 <HAL_SPI_TransmitReceive>
 8002362:	4603      	mov	r3, r0
 8002364:	e0ea      	b.n	800253c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_SPI_Receive+0x52>
 8002370:	2302      	movs	r3, #2
 8002372:	e0e3      	b.n	800253c <HAL_SPI_Receive+0x21a>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800237c:	f7fe fea2 	bl	80010c4 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d002      	beq.n	8002394 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800238e:	2302      	movs	r3, #2
 8002390:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002392:	e0ca      	b.n	800252a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_SPI_Receive+0x7e>
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023a4:	e0c1      	b.n	800252a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2204      	movs	r2, #4
 80023aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	88fa      	ldrh	r2, [r7, #6]
 80023be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	88fa      	ldrh	r2, [r7, #6]
 80023c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ec:	d10f      	bne.n	800240e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d007      	beq.n	800242c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800242a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d162      	bne.n	80024fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002434:	e02e      	b.n	8002494 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d115      	bne.n	8002470 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f103 020c 	add.w	r2, r3, #12
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800246e:	e011      	b.n	8002494 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002470:	f7fe fe28 	bl	80010c4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d803      	bhi.n	8002488 <HAL_SPI_Receive+0x166>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002486:	d102      	bne.n	800248e <HAL_SPI_Receive+0x16c>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002492:	e04a      	b.n	800252a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1cb      	bne.n	8002436 <HAL_SPI_Receive+0x114>
 800249e:	e031      	b.n	8002504 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d113      	bne.n	80024d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	b292      	uxth	r2, r2
 80024ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	1c9a      	adds	r2, r3, #2
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024d4:	e011      	b.n	80024fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024d6:	f7fe fdf5 	bl	80010c4 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d803      	bhi.n	80024ee <HAL_SPI_Receive+0x1cc>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ec:	d102      	bne.n	80024f4 <HAL_SPI_Receive+0x1d2>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024f8:	e017      	b.n	800252a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1cd      	bne.n	80024a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fa45 	bl	8002998 <SPI_EndRxTransaction>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
 8002526:	e000      	b.n	800252a <HAL_SPI_Receive+0x208>
  }

error :
 8002528:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800253a:	7dfb      	ldrb	r3, [r7, #23]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002552:	2301      	movs	r3, #1
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_SPI_TransmitReceive+0x26>
 8002566:	2302      	movs	r3, #2
 8002568:	e18a      	b.n	8002880 <HAL_SPI_TransmitReceive+0x33c>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002572:	f7fe fda7 	bl	80010c4 <HAL_GetTick>
 8002576:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800257e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800258c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002590:	2b01      	cmp	r3, #1
 8002592:	d00f      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x70>
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259a:	d107      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d103      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x68>
 80025a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d003      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
 80025ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025b2:	e15b      	b.n	800286c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_SPI_TransmitReceive+0x82>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_SPI_TransmitReceive+0x82>
 80025c0:	887b      	ldrh	r3, [r7, #2]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025cc:	e14e      	b.n	800286c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d003      	beq.n	80025e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	887a      	ldrh	r2, [r7, #2]
 80025f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	d007      	beq.n	8002636 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800263e:	d178      	bne.n	8002732 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_SPI_TransmitReceive+0x10a>
 8002648:	8b7b      	ldrh	r3, [r7, #26]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d166      	bne.n	800271c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	881a      	ldrh	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	1c9a      	adds	r2, r3, #2
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002672:	e053      	b.n	800271c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d11b      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x176>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d016      	beq.n	80026ba <HAL_SPI_TransmitReceive+0x176>
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	2b01      	cmp	r3, #1
 8002690:	d113      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	881a      	ldrh	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	1c9a      	adds	r2, r3, #2
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d119      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x1b8>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d014      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	b292      	uxth	r2, r2
 80026de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	1c9a      	adds	r2, r3, #2
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026f8:	2301      	movs	r3, #1
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026fc:	f7fe fce2 	bl	80010c4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002708:	429a      	cmp	r2, r3
 800270a:	d807      	bhi.n	800271c <HAL_SPI_TransmitReceive+0x1d8>
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002712:	d003      	beq.n	800271c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800271a:	e0a7      	b.n	800286c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1a6      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x130>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1a1      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x130>
 8002730:	e07c      	b.n	800282c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_SPI_TransmitReceive+0x1fc>
 800273a:	8b7b      	ldrh	r3, [r7, #26]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d16b      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002766:	e057      	b.n	8002818 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d11c      	bne.n	80027b0 <HAL_SPI_TransmitReceive+0x26c>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d017      	beq.n	80027b0 <HAL_SPI_TransmitReceive+0x26c>
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d114      	bne.n	80027b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	330c      	adds	r3, #12
 8002790:	7812      	ldrb	r2, [r2, #0]
 8002792:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d119      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x2ae>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d014      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027ee:	2301      	movs	r3, #1
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027f2:	f7fe fc67 	bl	80010c4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027fe:	429a      	cmp	r2, r3
 8002800:	d803      	bhi.n	800280a <HAL_SPI_TransmitReceive+0x2c6>
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002808:	d102      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x2cc>
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	2b00      	cmp	r3, #0
 800280e:	d103      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002816:	e029      	b.n	800286c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1a2      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x224>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d19d      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f917 	bl	8002a64 <SPI_EndRxTxTransaction>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002848:	e010      	b.n	800286c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10b      	bne.n	800286a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	e000      	b.n	800286c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800286a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800287c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002880:	4618      	mov	r0, r3
 8002882:	3730      	adds	r7, #48	; 0x30
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002898:	f7fe fc14 	bl	80010c4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028a8:	f7fe fc0c 	bl	80010c4 <HAL_GetTick>
 80028ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028ae:	4b39      	ldr	r3, [pc, #228]	; (8002994 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	015b      	lsls	r3, r3, #5
 80028b4:	0d1b      	lsrs	r3, r3, #20
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028be:	e054      	b.n	800296a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c6:	d050      	beq.n	800296a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028c8:	f7fe fbfc 	bl	80010c4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d902      	bls.n	80028de <SPI_WaitFlagStateUntilTimeout+0x56>
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d13d      	bne.n	800295a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028f6:	d111      	bne.n	800291c <SPI_WaitFlagStateUntilTimeout+0x94>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002900:	d004      	beq.n	800290c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290a:	d107      	bne.n	800291c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800291a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002924:	d10f      	bne.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002944:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e017      	b.n	800298a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3b01      	subs	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	429a      	cmp	r2, r3
 8002986:	d19b      	bne.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	2000000c 	.word	0x2000000c

08002998 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ac:	d111      	bne.n	80029d2 <SPI_EndRxTransaction+0x3a>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b6:	d004      	beq.n	80029c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c0:	d107      	bne.n	80029d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029da:	d12a      	bne.n	8002a32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e4:	d012      	beq.n	8002a0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff ff49 	bl	8002888 <SPI_WaitFlagStateUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d02d      	beq.n	8002a58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e026      	b.n	8002a5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2101      	movs	r1, #1
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff ff36 	bl	8002888 <SPI_WaitFlagStateUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01a      	beq.n	8002a58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f043 0220 	orr.w	r2, r3, #32
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e013      	b.n	8002a5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff ff23 	bl	8002888 <SPI_WaitFlagStateUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e000      	b.n	8002a5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <SPI_EndRxTxTransaction+0x7c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <SPI_EndRxTxTransaction+0x80>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0d5b      	lsrs	r3, r3, #21
 8002a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8e:	d112      	bne.n	8002ab6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff fef4 	bl	8002888 <SPI_WaitFlagStateUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e00f      	b.n	8002ad6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d0f2      	beq.n	8002ab6 <SPI_EndRxTxTransaction+0x52>
 8002ad0:	e000      	b.n	8002ad4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ad2:	bf00      	nop
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	2000000c 	.word	0x2000000c
 8002ae4:	165e9f81 	.word	0x165e9f81

08002ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e041      	b.n	8002b7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe f952 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 fc7a 	bl	8003420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d001      	beq.n	8002ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e04e      	b.n	8002c3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a23      	ldr	r2, [pc, #140]	; (8002c4c <HAL_TIM_Base_Start_IT+0xc4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d022      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x80>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bca:	d01d      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x80>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d018      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x80>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1e      	ldr	r2, [pc, #120]	; (8002c54 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x80>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <HAL_TIM_Base_Start_IT+0xd0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00e      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x80>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_TIM_Base_Start_IT+0xd4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d009      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x80>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a19      	ldr	r2, [pc, #100]	; (8002c60 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x80>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d111      	bne.n	8002c2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d010      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2a:	e007      	b.n	8002c3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800
 8002c58:	40000c00 	.word	0x40000c00
 8002c5c:	40010400 	.word	0x40010400
 8002c60:	40014000 	.word	0x40014000
 8002c64:	40001800 	.word	0x40001800

08002c68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e041      	b.n	8002cfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f839 	bl	8002d06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f000 fbba 	bl	8003420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_TIM_PWM_Start+0x24>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	e022      	b.n	8002d86 <HAL_TIM_PWM_Start+0x6a>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d109      	bne.n	8002d5a <HAL_TIM_PWM_Start+0x3e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	e015      	b.n	8002d86 <HAL_TIM_PWM_Start+0x6a>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d109      	bne.n	8002d74 <HAL_TIM_PWM_Start+0x58>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e008      	b.n	8002d86 <HAL_TIM_PWM_Start+0x6a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07c      	b.n	8002e88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <HAL_TIM_PWM_Start+0x82>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d9c:	e013      	b.n	8002dc6 <HAL_TIM_PWM_Start+0xaa>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d104      	bne.n	8002dae <HAL_TIM_PWM_Start+0x92>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dac:	e00b      	b.n	8002dc6 <HAL_TIM_PWM_Start+0xaa>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_PWM_Start+0xa2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dbc:	e003      	b.n	8002dc6 <HAL_TIM_PWM_Start+0xaa>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fe10 	bl	80039f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <HAL_TIM_PWM_Start+0x174>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_TIM_PWM_Start+0xcc>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2c      	ldr	r2, [pc, #176]	; (8002e94 <HAL_TIM_PWM_Start+0x178>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_TIM_PWM_Start+0xd0>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_TIM_PWM_Start+0xd2>
 8002dec:	2300      	movs	r3, #0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <HAL_TIM_PWM_Start+0x174>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d022      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x136>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e14:	d01d      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x136>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1f      	ldr	r2, [pc, #124]	; (8002e98 <HAL_TIM_PWM_Start+0x17c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d018      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x136>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <HAL_TIM_PWM_Start+0x180>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x136>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ea0 <HAL_TIM_PWM_Start+0x184>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00e      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x136>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a16      	ldr	r2, [pc, #88]	; (8002e94 <HAL_TIM_PWM_Start+0x178>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x136>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_TIM_PWM_Start+0x188>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d004      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x136>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HAL_TIM_PWM_Start+0x18c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d111      	bne.n	8002e76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d010      	beq.n	8002e86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e74:	e007      	b.n	8002e86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40010400 	.word	0x40010400
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40000800 	.word	0x40000800
 8002ea0:	40000c00 	.word	0x40000c00
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	40001800 	.word	0x40001800

08002eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0202 	mvn.w	r2, #2
 8002ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fa77 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa69 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fa7a 	bl	80033f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d122      	bne.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d11b      	bne.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0204 	mvn.w	r2, #4
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa4d 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fa3f 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fa50 	bl	80033f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d122      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d11b      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0208 	mvn.w	r2, #8
 8002f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2204      	movs	r2, #4
 8002f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fa23 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa15 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fa26 	bl	80033f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0210 	mvn.w	r2, #16
 8002fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f9f9 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f9eb 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f9fc 	bl	80033f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0201 	mvn.w	r2, #1
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fe38 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b80      	cmp	r3, #128	; 0x80
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b80      	cmp	r3, #128	; 0x80
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fdca 	bl	8003bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9c1 	bl	800340a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b20      	cmp	r3, #32
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0220 	mvn.w	r2, #32
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fd94 	bl	8003bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0ae      	b.n	8003238 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	f200 809f 	bhi.w	8003228 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	08003125 	.word	0x08003125
 80030f4:	08003229 	.word	0x08003229
 80030f8:	08003229 	.word	0x08003229
 80030fc:	08003229 	.word	0x08003229
 8003100:	08003165 	.word	0x08003165
 8003104:	08003229 	.word	0x08003229
 8003108:	08003229 	.word	0x08003229
 800310c:	08003229 	.word	0x08003229
 8003110:	080031a7 	.word	0x080031a7
 8003114:	08003229 	.word	0x08003229
 8003118:	08003229 	.word	0x08003229
 800311c:	08003229 	.word	0x08003229
 8003120:	080031e7 	.word	0x080031e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fa18 	bl	8003560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0208 	orr.w	r2, r2, #8
 800313e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0204 	bic.w	r2, r2, #4
 800314e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6999      	ldr	r1, [r3, #24]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	619a      	str	r2, [r3, #24]
      break;
 8003162:	e064      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fa68 	bl	8003640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6999      	ldr	r1, [r3, #24]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	021a      	lsls	r2, r3, #8
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	619a      	str	r2, [r3, #24]
      break;
 80031a4:	e043      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fabd 	bl	800372c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0208 	orr.w	r2, r2, #8
 80031c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0204 	bic.w	r2, r2, #4
 80031d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69d9      	ldr	r1, [r3, #28]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	61da      	str	r2, [r3, #28]
      break;
 80031e4:	e023      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fb11 	bl	8003814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69d9      	ldr	r1, [r3, #28]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	021a      	lsls	r2, r3, #8
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	61da      	str	r2, [r3, #28]
      break;
 8003226:	e002      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	75fb      	strb	r3, [r7, #23]
      break;
 800322c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003236:	7dfb      	ldrb	r3, [r7, #23]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_TIM_ConfigClockSource+0x1c>
 8003258:	2302      	movs	r3, #2
 800325a:	e0b4      	b.n	80033c6 <HAL_TIM_ConfigClockSource+0x186>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800327a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003294:	d03e      	beq.n	8003314 <HAL_TIM_ConfigClockSource+0xd4>
 8003296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329a:	f200 8087 	bhi.w	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a2:	f000 8086 	beq.w	80033b2 <HAL_TIM_ConfigClockSource+0x172>
 80032a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032aa:	d87f      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b70      	cmp	r3, #112	; 0x70
 80032ae:	d01a      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0xa6>
 80032b0:	2b70      	cmp	r3, #112	; 0x70
 80032b2:	d87b      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d050      	beq.n	800335a <HAL_TIM_ConfigClockSource+0x11a>
 80032b8:	2b60      	cmp	r3, #96	; 0x60
 80032ba:	d877      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b50      	cmp	r3, #80	; 0x50
 80032be:	d03c      	beq.n	800333a <HAL_TIM_ConfigClockSource+0xfa>
 80032c0:	2b50      	cmp	r3, #80	; 0x50
 80032c2:	d873      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d058      	beq.n	800337a <HAL_TIM_ConfigClockSource+0x13a>
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d86f      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032cc:	2b30      	cmp	r3, #48	; 0x30
 80032ce:	d064      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x15a>
 80032d0:	2b30      	cmp	r3, #48	; 0x30
 80032d2:	d86b      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d060      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x15a>
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d867      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05c      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x15a>
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d05a      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x15a>
 80032e4:	e062      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6899      	ldr	r1, [r3, #8]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f000 fb5d 	bl	80039b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	609a      	str	r2, [r3, #8]
      break;
 8003312:	e04f      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6899      	ldr	r1, [r3, #8]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f000 fb46 	bl	80039b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003336:	609a      	str	r2, [r3, #8]
      break;
 8003338:	e03c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6859      	ldr	r1, [r3, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	461a      	mov	r2, r3
 8003348:	f000 faba 	bl	80038c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2150      	movs	r1, #80	; 0x50
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fb13 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 8003358:	e02c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	461a      	mov	r2, r3
 8003368:	f000 fad9 	bl	800391e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2160      	movs	r1, #96	; 0x60
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fb03 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 8003378:	e01c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	461a      	mov	r2, r3
 8003388:	f000 fa9a 	bl	80038c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2140      	movs	r1, #64	; 0x40
 8003392:	4618      	mov	r0, r3
 8003394:	f000 faf3 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 8003398:	e00c      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f000 faea 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 80033aa:	e003      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      break;
 80033b0:	e000      	b.n	80033b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a40      	ldr	r2, [pc, #256]	; (8003534 <TIM_Base_SetConfig+0x114>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343e:	d00f      	beq.n	8003460 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3d      	ldr	r2, [pc, #244]	; (8003538 <TIM_Base_SetConfig+0x118>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00b      	beq.n	8003460 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a3c      	ldr	r2, [pc, #240]	; (800353c <TIM_Base_SetConfig+0x11c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d007      	beq.n	8003460 <TIM_Base_SetConfig+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a3b      	ldr	r2, [pc, #236]	; (8003540 <TIM_Base_SetConfig+0x120>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_Base_SetConfig+0x40>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a3a      	ldr	r2, [pc, #232]	; (8003544 <TIM_Base_SetConfig+0x124>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d108      	bne.n	8003472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <TIM_Base_SetConfig+0x114>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d02b      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003480:	d027      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <TIM_Base_SetConfig+0x118>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d023      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2b      	ldr	r2, [pc, #172]	; (800353c <TIM_Base_SetConfig+0x11c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01f      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2a      	ldr	r2, [pc, #168]	; (8003540 <TIM_Base_SetConfig+0x120>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01b      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a29      	ldr	r2, [pc, #164]	; (8003544 <TIM_Base_SetConfig+0x124>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d017      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a28      	ldr	r2, [pc, #160]	; (8003548 <TIM_Base_SetConfig+0x128>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a27      	ldr	r2, [pc, #156]	; (800354c <TIM_Base_SetConfig+0x12c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00f      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a26      	ldr	r2, [pc, #152]	; (8003550 <TIM_Base_SetConfig+0x130>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a25      	ldr	r2, [pc, #148]	; (8003554 <TIM_Base_SetConfig+0x134>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d007      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a24      	ldr	r2, [pc, #144]	; (8003558 <TIM_Base_SetConfig+0x138>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a23      	ldr	r2, [pc, #140]	; (800355c <TIM_Base_SetConfig+0x13c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d108      	bne.n	80034e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <TIM_Base_SetConfig+0x114>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0xf8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a0c      	ldr	r2, [pc, #48]	; (8003544 <TIM_Base_SetConfig+0x124>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d103      	bne.n	8003520 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	615a      	str	r2, [r3, #20]
}
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000
 8003538:	40000400 	.word	0x40000400
 800353c:	40000800 	.word	0x40000800
 8003540:	40000c00 	.word	0x40000c00
 8003544:	40010400 	.word	0x40010400
 8003548:	40014000 	.word	0x40014000
 800354c:	40014400 	.word	0x40014400
 8003550:	40014800 	.word	0x40014800
 8003554:	40001800 	.word	0x40001800
 8003558:	40001c00 	.word	0x40001c00
 800355c:	40002000 	.word	0x40002000

08003560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0303 	bic.w	r3, r3, #3
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 0302 	bic.w	r3, r3, #2
 80035a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a20      	ldr	r2, [pc, #128]	; (8003638 <TIM_OC1_SetConfig+0xd8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_OC1_SetConfig+0x64>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a1f      	ldr	r2, [pc, #124]	; (800363c <TIM_OC1_SetConfig+0xdc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10c      	bne.n	80035de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f023 0308 	bic.w	r3, r3, #8
 80035ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a15      	ldr	r2, [pc, #84]	; (8003638 <TIM_OC1_SetConfig+0xd8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_OC1_SetConfig+0x8e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a14      	ldr	r2, [pc, #80]	; (800363c <TIM_OC1_SetConfig+0xdc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d111      	bne.n	8003612 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	621a      	str	r2, [r3, #32]
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40010000 	.word	0x40010000
 800363c:	40010400 	.word	0x40010400

08003640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f023 0210 	bic.w	r2, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0320 	bic.w	r3, r3, #32
 800368a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a22      	ldr	r2, [pc, #136]	; (8003724 <TIM_OC2_SetConfig+0xe4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_OC2_SetConfig+0x68>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a21      	ldr	r2, [pc, #132]	; (8003728 <TIM_OC2_SetConfig+0xe8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10d      	bne.n	80036c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a17      	ldr	r2, [pc, #92]	; (8003724 <TIM_OC2_SetConfig+0xe4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC2_SetConfig+0x94>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a16      	ldr	r2, [pc, #88]	; (8003728 <TIM_OC2_SetConfig+0xe8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d113      	bne.n	80036fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40010000 	.word	0x40010000
 8003728:	40010400 	.word	0x40010400

0800372c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0303 	bic.w	r3, r3, #3
 8003762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a21      	ldr	r2, [pc, #132]	; (800380c <TIM_OC3_SetConfig+0xe0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC3_SetConfig+0x66>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a20      	ldr	r2, [pc, #128]	; (8003810 <TIM_OC3_SetConfig+0xe4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10d      	bne.n	80037ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a16      	ldr	r2, [pc, #88]	; (800380c <TIM_OC3_SetConfig+0xe0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_OC3_SetConfig+0x92>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a15      	ldr	r2, [pc, #84]	; (8003810 <TIM_OC3_SetConfig+0xe4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d113      	bne.n	80037e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40010000 	.word	0x40010000
 8003810:	40010400 	.word	0x40010400

08003814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800385e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	031b      	lsls	r3, r3, #12
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <TIM_OC4_SetConfig+0xa4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d003      	beq.n	800387c <TIM_OC4_SetConfig+0x68>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a11      	ldr	r2, [pc, #68]	; (80038bc <TIM_OC4_SetConfig+0xa8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d109      	bne.n	8003890 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	019b      	lsls	r3, r3, #6
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40010000 	.word	0x40010000
 80038bc:	40010400 	.word	0x40010400

080038c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f023 0201 	bic.w	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f023 030a 	bic.w	r3, r3, #10
 80038fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4313      	orrs	r3, r2
 8003904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	621a      	str	r2, [r3, #32]
}
 8003912:	bf00      	nop
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800391e:	b480      	push	{r7}
 8003920:	b087      	sub	sp, #28
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f023 0210 	bic.w	r2, r3, #16
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	031b      	lsls	r3, r3, #12
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800395a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	621a      	str	r2, [r3, #32]
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	f043 0307 	orr.w	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	021a      	lsls	r2, r3, #8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	609a      	str	r2, [r3, #8]
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	2201      	movs	r2, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1a      	ldr	r2, [r3, #32]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	401a      	ands	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e05a      	b.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a21      	ldr	r2, [pc, #132]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa4:	d01d      	beq.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d018      	beq.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1a      	ldr	r2, [pc, #104]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10c      	bne.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40010400 	.word	0x40010400
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40001800 	.word	0x40001800

08003b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e03d      	b.n	8003bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <__NVIC_SetPriority>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	6039      	str	r1, [r7, #0]
 8003c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	db0a      	blt.n	8003c2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	490c      	ldr	r1, [pc, #48]	; (8003c50 <__NVIC_SetPriority+0x4c>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	0112      	lsls	r2, r2, #4
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	440b      	add	r3, r1
 8003c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c2c:	e00a      	b.n	8003c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4908      	ldr	r1, [pc, #32]	; (8003c54 <__NVIC_SetPriority+0x50>)
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	3b04      	subs	r3, #4
 8003c3c:	0112      	lsls	r2, r2, #4
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	440b      	add	r3, r1
 8003c42:	761a      	strb	r2, [r3, #24]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000e100 	.word	0xe000e100
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <SysTick_Handler+0x1c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003c60:	f001 fdf6 	bl	8005850 <xTaskGetSchedulerState>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d001      	beq.n	8003c6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c6a:	f002 fddd 	bl	8006828 <xPortSysTickHandler>
  }
}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000e010 	.word	0xe000e010

08003c78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	f06f 0004 	mvn.w	r0, #4
 8003c82:	f7ff ffbf 	bl	8003c04 <__NVIC_SetPriority>
#endif
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c92:	f3ef 8305 	mrs	r3, IPSR
 8003c96:	603b      	str	r3, [r7, #0]
  return(result);
 8003c98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c9e:	f06f 0305 	mvn.w	r3, #5
 8003ca2:	607b      	str	r3, [r7, #4]
 8003ca4:	e00c      	b.n	8003cc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <osKernelInitialize+0x44>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d105      	bne.n	8003cba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <osKernelInitialize+0x44>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	e002      	b.n	8003cc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cc0:	687b      	ldr	r3, [r7, #4]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	200000b4 	.word	0x200000b4

08003cd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cda:	f3ef 8305 	mrs	r3, IPSR
 8003cde:	603b      	str	r3, [r7, #0]
  return(result);
 8003ce0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ce6:	f06f 0305 	mvn.w	r3, #5
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	e010      	b.n	8003d10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <osKernelStart+0x48>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d109      	bne.n	8003d0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003cf6:	f7ff ffbf 	bl	8003c78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <osKernelStart+0x48>)
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d00:	f001 f94a 	bl	8004f98 <vTaskStartScheduler>
      stat = osOK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	e002      	b.n	8003d10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d10:	687b      	ldr	r3, [r7, #4]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200000b4 	.word	0x200000b4

08003d20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08e      	sub	sp, #56	; 0x38
 8003d24:	af04      	add	r7, sp, #16
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d30:	f3ef 8305 	mrs	r3, IPSR
 8003d34:	617b      	str	r3, [r7, #20]
  return(result);
 8003d36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d17e      	bne.n	8003e3a <osThreadNew+0x11a>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d07b      	beq.n	8003e3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d46:	2318      	movs	r3, #24
 8003d48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d045      	beq.n	8003de6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <osThreadNew+0x48>
        name = attr->name;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <osThreadNew+0x6e>
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b38      	cmp	r3, #56	; 0x38
 8003d80:	d805      	bhi.n	8003d8e <osThreadNew+0x6e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <osThreadNew+0x72>
        return (NULL);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e054      	b.n	8003e3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00e      	beq.n	8003dc8 <osThreadNew+0xa8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2bbb      	cmp	r3, #187	; 0xbb
 8003db0:	d90a      	bls.n	8003dc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <osThreadNew+0xa8>
        mem = 1;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e010      	b.n	8003dea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10c      	bne.n	8003dea <osThreadNew+0xca>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d108      	bne.n	8003dea <osThreadNew+0xca>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d104      	bne.n	8003dea <osThreadNew+0xca>
          mem = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61bb      	str	r3, [r7, #24]
 8003de4:	e001      	b.n	8003dea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d110      	bne.n	8003e12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003df8:	9202      	str	r2, [sp, #8]
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6a3a      	ldr	r2, [r7, #32]
 8003e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 feda 	bl	8004bc0 <xTaskCreateStatic>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	e013      	b.n	8003e3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d110      	bne.n	8003e3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	f107 0310 	add.w	r3, r7, #16
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 ff25 	bl	8004c7a <xTaskCreate>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <osThreadNew+0x11a>
            hTask = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e3a:	693b      	ldr	r3, [r7, #16]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3728      	adds	r7, #40	; 0x28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <osThreadFlagsSet+0x1a>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	da03      	bge.n	8003e66 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8003e5e:	f06f 0303 	mvn.w	r3, #3
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e035      	b.n	8003ed2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e6c:	f3ef 8305 	mrs	r3, IPSR
 8003e70:	613b      	str	r3, [r7, #16]
  return(result);
 8003e72:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01f      	beq.n	8003eb8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003e7c:	f107 0308 	add.w	r3, r7, #8
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2300      	movs	r3, #0
 8003e84:	2201      	movs	r2, #1
 8003e86:	6839      	ldr	r1, [r7, #0]
 8003e88:	6978      	ldr	r0, [r7, #20]
 8003e8a:	f001 fe8b 	bl	8005ba4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	2200      	movs	r2, #0
 8003e94:	9200      	str	r2, [sp, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2100      	movs	r1, #0
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f001 fe82 	bl	8005ba4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d015      	beq.n	8003ed2 <osThreadFlagsSet+0x8e>
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <osThreadFlagsSet+0x98>)
 8003ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	e00c      	b.n	8003ed2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2201      	movs	r2, #1
 8003ebc:	6839      	ldr	r1, [r7, #0]
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f001 fdb2 	bl	8005a28 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003ec4:	f107 030c 	add.w	r3, r7, #12
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2100      	movs	r1, #0
 8003ecc:	6978      	ldr	r0, [r7, #20]
 8003ece:	f001 fdab 	bl	8005a28 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	e000ed04 	.word	0xe000ed04

08003ee0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08c      	sub	sp, #48	; 0x30
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eec:	f3ef 8305 	mrs	r3, IPSR
 8003ef0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ef2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8003ef8:	f06f 0305 	mvn.w	r3, #5
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003efe:	e06b      	b.n	8003fd8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da03      	bge.n	8003f0e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8003f06:	f06f 0303 	mvn.w	r3, #3
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f0c:	e064      	b.n	8003fd8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f1c:	e001      	b.n	8003f22 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8003f2a:	f001 f951 	bl	80051d0 <xTaskGetTickCount>
 8003f2e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8003f30:	f107 0210 	add.w	r2, r7, #16
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f001 fd15 	bl	8005968 <xTaskNotifyWait>
 8003f3e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d137      	bne.n	8003fb6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8003f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f52:	4313      	orrs	r3, r2
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00c      	beq.n	8003f7a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	4013      	ands	r3, r2
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d032      	beq.n	8003fd2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003f72:	f06f 0302 	mvn.w	r3, #2
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003f78:	e02e      	b.n	8003fd8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d128      	bne.n	8003fd6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003f8a:	f06f 0302 	mvn.w	r3, #2
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003f90:	e022      	b.n	8003fd8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8003f92:	f001 f91d 	bl	80051d0 <xTaskGetTickCount>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d902      	bls.n	8003fac <osThreadFlagsWait+0xcc>
          tout  = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003faa:	e00e      	b.n	8003fca <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb4:	e009      	b.n	8003fca <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d103      	bne.n	8003fc4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8003fbc:	f06f 0302 	mvn.w	r3, #2
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc2:	e002      	b.n	8003fca <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003fc4:	f06f 0301 	mvn.w	r3, #1
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1af      	bne.n	8003f30 <osThreadFlagsWait+0x50>
 8003fd0:	e002      	b.n	8003fd8 <osThreadFlagsWait+0xf8>
            break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <osThreadFlagsWait+0xf8>
            break;
 8003fd6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3730      	adds	r7, #48	; 0x30
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fea:	f3ef 8305 	mrs	r3, IPSR
 8003fee:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <osDelay+0x1c>
    stat = osErrorISR;
 8003ff6:	f06f 0305 	mvn.w	r3, #5
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e007      	b.n	800400e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <osDelay+0x2c>
      vTaskDelay(ticks);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 ff91 	bl	8004f30 <vTaskDelay>
    }
  }

  return (stat);
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4a07      	ldr	r2, [pc, #28]	; (8004044 <vApplicationGetIdleTaskMemory+0x2c>)
 8004028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	4a06      	ldr	r2, [pc, #24]	; (8004048 <vApplicationGetIdleTaskMemory+0x30>)
 800402e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	601a      	str	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	200000b8 	.word	0x200000b8
 8004048:	20000174 	.word	0x20000174

0800404c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a07      	ldr	r2, [pc, #28]	; (8004078 <vApplicationGetTimerTaskMemory+0x2c>)
 800405c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4a06      	ldr	r2, [pc, #24]	; (800407c <vApplicationGetTimerTaskMemory+0x30>)
 8004062:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800406a:	601a      	str	r2, [r3, #0]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	20000374 	.word	0x20000374
 800407c:	20000430 	.word	0x20000430

08004080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f103 0208 	add.w	r2, r3, #8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f103 0208 	add.w	r2, r3, #8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f103 0208 	add.w	r2, r3, #8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	601a      	str	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004122:	b480      	push	{r7}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004138:	d103      	bne.n	8004142 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e00c      	b.n	800415c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3308      	adds	r3, #8
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e002      	b.n	8004150 <vListInsert+0x2e>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	d2f6      	bcs.n	800414a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	601a      	str	r2, [r3, #0]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6892      	ldr	r2, [r2, #8]
 80041aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6852      	ldr	r2, [r2, #4]
 80041b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d103      	bne.n	80041c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	1e5a      	subs	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004212:	f002 fa77 	bl	8006704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	441a      	add	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	3b01      	subs	r3, #1
 8004244:	68f9      	ldr	r1, [r7, #12]
 8004246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	441a      	add	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	22ff      	movs	r2, #255	; 0xff
 8004256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	22ff      	movs	r2, #255	; 0xff
 800425e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d114      	bne.n	8004292 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01a      	beq.n	80042a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3310      	adds	r3, #16
 8004274:	4618      	mov	r0, r3
 8004276:	f001 f929 	bl	80054cc <xTaskRemoveFromEventList>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d012      	beq.n	80042a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <xQueueGenericReset+0xcc>)
 8004282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	e009      	b.n	80042a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3310      	adds	r3, #16
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fef2 	bl	8004080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3324      	adds	r3, #36	; 0x24
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff feed 	bl	8004080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042a6:	f002 fa5d 	bl	8006764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08e      	sub	sp, #56	; 0x38
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <xQueueGenericCreateStatic+0x52>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <xQueueGenericCreateStatic+0x56>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <xQueueGenericCreateStatic+0x58>
 800430e:	2300      	movs	r3, #0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	623b      	str	r3, [r7, #32]
}
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d102      	bne.n	8004336 <xQueueGenericCreateStatic+0x7e>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <xQueueGenericCreateStatic+0x82>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <xQueueGenericCreateStatic+0x84>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	61fb      	str	r3, [r7, #28]
}
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004356:	2350      	movs	r3, #80	; 0x50
 8004358:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b50      	cmp	r3, #80	; 0x50
 800435e:	d00a      	beq.n	8004376 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	61bb      	str	r3, [r7, #24]
}
 8004372:	bf00      	nop
 8004374:	e7fe      	b.n	8004374 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004376:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00d      	beq.n	800439e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800438a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	4613      	mov	r3, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f805 	bl	80043a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3730      	adds	r7, #48	; 0x30
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e002      	b.n	80043ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043d6:	2101      	movs	r1, #1
 80043d8:	69b8      	ldr	r0, [r7, #24]
 80043da:	f7ff ff05 	bl	80041e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08e      	sub	sp, #56	; 0x38
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043fe:	2300      	movs	r3, #0
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <xQueueGenericSend+0x32>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d103      	bne.n	8004430 <xQueueGenericSend+0x40>
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <xQueueGenericSend+0x44>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <xQueueGenericSend+0x46>
 8004434:	2300      	movs	r3, #0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <xQueueGenericSend+0x60>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d103      	bne.n	800445e <xQueueGenericSend+0x6e>
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <xQueueGenericSend+0x72>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <xQueueGenericSend+0x74>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <xQueueGenericSend+0x8e>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	623b      	str	r3, [r7, #32]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800447e:	f001 f9e7 	bl	8005850 <xTaskGetSchedulerState>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <xQueueGenericSend+0x9e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <xQueueGenericSend+0xa2>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <xQueueGenericSend+0xa4>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <xQueueGenericSend+0xbe>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	61fb      	str	r3, [r7, #28]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ae:	f002 f929 	bl	8006704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <xQueueGenericSend+0xd4>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d129      	bne.n	8004518 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ca:	f000 fa0b 	bl	80048e4 <prvCopyDataToQueue>
 80044ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d010      	beq.n	80044fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	3324      	adds	r3, #36	; 0x24
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fff5 	bl	80054cc <xTaskRemoveFromEventList>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d013      	beq.n	8004510 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044e8:	4b3f      	ldr	r3, [pc, #252]	; (80045e8 <xQueueGenericSend+0x1f8>)
 80044ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	e00a      	b.n	8004510 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004500:	4b39      	ldr	r3, [pc, #228]	; (80045e8 <xQueueGenericSend+0x1f8>)
 8004502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004510:	f002 f928 	bl	8006764 <vPortExitCritical>
				return pdPASS;
 8004514:	2301      	movs	r3, #1
 8004516:	e063      	b.n	80045e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d103      	bne.n	8004526 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800451e:	f002 f921 	bl	8006764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004522:	2300      	movs	r3, #0
 8004524:	e05c      	b.n	80045e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	4618      	mov	r0, r3
 8004532:	f001 f82f 	bl	8005594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004536:	2301      	movs	r3, #1
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800453a:	f002 f913 	bl	8006764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800453e:	f000 fd9b 	bl	8005078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004542:	f002 f8df 	bl	8006704 <vPortEnterCritical>
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800454c:	b25b      	sxtb	r3, r3
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004552:	d103      	bne.n	800455c <xQueueGenericSend+0x16c>
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004562:	b25b      	sxtb	r3, r3
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004568:	d103      	bne.n	8004572 <xQueueGenericSend+0x182>
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004572:	f002 f8f7 	bl	8006764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004576:	1d3a      	adds	r2, r7, #4
 8004578:	f107 0314 	add.w	r3, r7, #20
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f001 f81e 	bl	80055c0 <xTaskCheckForTimeOut>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d124      	bne.n	80045d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800458a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800458c:	f000 faa2 	bl	8004ad4 <prvIsQueueFull>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d018      	beq.n	80045c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	3310      	adds	r3, #16
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	4611      	mov	r1, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 ff44 	bl	800542c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045a6:	f000 fa2d 	bl	8004a04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045aa:	f000 fd73 	bl	8005094 <xTaskResumeAll>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f af7c 	bne.w	80044ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <xQueueGenericSend+0x1f8>)
 80045b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	e772      	b.n	80044ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ca:	f000 fa1b 	bl	8004a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045ce:	f000 fd61 	bl	8005094 <xTaskResumeAll>
 80045d2:	e76c      	b.n	80044ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045d6:	f000 fa15 	bl	8004a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045da:	f000 fd5b 	bl	8005094 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3738      	adds	r7, #56	; 0x38
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b090      	sub	sp, #64	; 0x40
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d103      	bne.n	8004628 <xQueueGenericSendFromISR+0x3c>
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <xQueueGenericSendFromISR+0x40>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <xQueueGenericSendFromISR+0x42>
 800462c:	2300      	movs	r3, #0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d103      	bne.n	8004656 <xQueueGenericSendFromISR+0x6a>
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <xQueueGenericSendFromISR+0x6e>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <xQueueGenericSendFromISR+0x70>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	623b      	str	r3, [r7, #32]
}
 8004672:	bf00      	nop
 8004674:	e7fe      	b.n	8004674 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004676:	f002 f927 	bl	80068c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800467a:	f3ef 8211 	mrs	r2, BASEPRI
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	61fa      	str	r2, [r7, #28]
 8004690:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004692:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	429a      	cmp	r2, r3
 80046a0:	d302      	bcc.n	80046a8 <xQueueGenericSendFromISR+0xbc>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d12f      	bne.n	8004708 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80046be:	f000 f911 	bl	80048e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ca:	d112      	bne.n	80046f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d016      	beq.n	8004702 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	3324      	adds	r3, #36	; 0x24
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fef7 	bl	80054cc <xTaskRemoveFromEventList>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00e      	beq.n	8004702 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e007      	b.n	8004702 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046f6:	3301      	adds	r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	b25a      	sxtb	r2, r3
 80046fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004702:	2301      	movs	r3, #1
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004706:	e001      	b.n	800470c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004708:	2300      	movs	r3, #0
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004716:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800471a:	4618      	mov	r0, r3
 800471c:	3740      	adds	r7, #64	; 0x40
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	; 0x30
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <xQueueReceive+0x30>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	623b      	str	r3, [r7, #32]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d103      	bne.n	8004762 <xQueueReceive+0x3e>
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <xQueueReceive+0x42>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <xQueueReceive+0x44>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <xQueueReceive+0x5e>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61fb      	str	r3, [r7, #28]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004782:	f001 f865 	bl	8005850 <xTaskGetSchedulerState>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <xQueueReceive+0x6e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <xQueueReceive+0x72>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <xQueueReceive+0x74>
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <xQueueReceive+0x8e>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	61bb      	str	r3, [r7, #24]
}
 80047ae:	bf00      	nop
 80047b0:	e7fe      	b.n	80047b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047b2:	f001 ffa7 	bl	8006704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01f      	beq.n	8004802 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c6:	f000 f8f7 	bl	80049b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	1e5a      	subs	r2, r3, #1
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00f      	beq.n	80047fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	3310      	adds	r3, #16
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fe74 	bl	80054cc <xTaskRemoveFromEventList>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047ea:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <xQueueReceive+0x1bc>)
 80047ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047fa:	f001 ffb3 	bl	8006764 <vPortExitCritical>
				return pdPASS;
 80047fe:	2301      	movs	r3, #1
 8004800:	e069      	b.n	80048d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d103      	bne.n	8004810 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004808:	f001 ffac 	bl	8006764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800480c:	2300      	movs	r3, #0
 800480e:	e062      	b.n	80048d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004816:	f107 0310 	add.w	r3, r7, #16
 800481a:	4618      	mov	r0, r3
 800481c:	f000 feba 	bl	8005594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004820:	2301      	movs	r3, #1
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004824:	f001 ff9e 	bl	8006764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004828:	f000 fc26 	bl	8005078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800482c:	f001 ff6a 	bl	8006704 <vPortEnterCritical>
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004836:	b25b      	sxtb	r3, r3
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483c:	d103      	bne.n	8004846 <xQueueReceive+0x122>
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800484c:	b25b      	sxtb	r3, r3
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004852:	d103      	bne.n	800485c <xQueueReceive+0x138>
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800485c:	f001 ff82 	bl	8006764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004860:	1d3a      	adds	r2, r7, #4
 8004862:	f107 0310 	add.w	r3, r7, #16
 8004866:	4611      	mov	r1, r2
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fea9 	bl	80055c0 <xTaskCheckForTimeOut>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d123      	bne.n	80048bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004876:	f000 f917 	bl	8004aa8 <prvIsQueueEmpty>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d017      	beq.n	80048b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	3324      	adds	r3, #36	; 0x24
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fdcf 	bl	800542c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800488e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004890:	f000 f8b8 	bl	8004a04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004894:	f000 fbfe 	bl	8005094 <xTaskResumeAll>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d189      	bne.n	80047b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800489e:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <xQueueReceive+0x1bc>)
 80048a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	e780      	b.n	80047b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048b2:	f000 f8a7 	bl	8004a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048b6:	f000 fbed 	bl	8005094 <xTaskResumeAll>
 80048ba:	e77a      	b.n	80047b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048be:	f000 f8a1 	bl	8004a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048c2:	f000 fbe7 	bl	8005094 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048c8:	f000 f8ee 	bl	8004aa8 <prvIsQueueEmpty>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f43f af6f 	beq.w	80047b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3730      	adds	r7, #48	; 0x30
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10d      	bne.n	800491e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d14d      	bne.n	80049a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 ffbc 	bl	800588c <xTaskPriorityDisinherit>
 8004914:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	e043      	b.n	80049a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d119      	bne.n	8004958 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6858      	ldr	r0, [r3, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	461a      	mov	r2, r3
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	f002 fa1a 	bl	8006d68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	441a      	add	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	d32b      	bcc.n	80049a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	e026      	b.n	80049a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	68d8      	ldr	r0, [r3, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	461a      	mov	r2, r3
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	f002 fa00 	bl	8006d68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	425b      	negs	r3, r3
 8004972:	441a      	add	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d207      	bcs.n	8004994 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	425b      	negs	r3, r3
 800498e:	441a      	add	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d105      	bne.n	80049a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049ae:	697b      	ldr	r3, [r7, #20]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d018      	beq.n	80049fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	441a      	add	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d303      	bcc.n	80049ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68d9      	ldr	r1, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	461a      	mov	r2, r3
 80049f6:	6838      	ldr	r0, [r7, #0]
 80049f8:	f002 f9b6 	bl	8006d68 <memcpy>
	}
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a0c:	f001 fe7a 	bl	8006704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a18:	e011      	b.n	8004a3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d012      	beq.n	8004a48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3324      	adds	r3, #36	; 0x24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fd50 	bl	80054cc <xTaskRemoveFromEventList>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a32:	f000 fe27 	bl	8005684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	dce9      	bgt.n	8004a1a <prvUnlockQueue+0x16>
 8004a46:	e000      	b.n	8004a4a <prvUnlockQueue+0x46>
					break;
 8004a48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a52:	f001 fe87 	bl	8006764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a56:	f001 fe55 	bl	8006704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a62:	e011      	b.n	8004a88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d012      	beq.n	8004a92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3310      	adds	r3, #16
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fd2b 	bl	80054cc <xTaskRemoveFromEventList>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a7c:	f000 fe02 	bl	8005684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a80:	7bbb      	ldrb	r3, [r7, #14]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	dce9      	bgt.n	8004a64 <prvUnlockQueue+0x60>
 8004a90:	e000      	b.n	8004a94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	22ff      	movs	r2, #255	; 0xff
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a9c:	f001 fe62 	bl	8006764 <vPortExitCritical>
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ab0:	f001 fe28 	bl	8006704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004abc:	2301      	movs	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e001      	b.n	8004ac6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ac6:	f001 fe4d 	bl	8006764 <vPortExitCritical>

	return xReturn;
 8004aca:	68fb      	ldr	r3, [r7, #12]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004adc:	f001 fe12 	bl	8006704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d102      	bne.n	8004af2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e001      	b.n	8004af6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004af6:	f001 fe35 	bl	8006764 <vPortExitCritical>

	return xReturn;
 8004afa:	68fb      	ldr	r3, [r7, #12]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e014      	b.n	8004b3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b14:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <vQueueAddToRegistry+0x50>)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10b      	bne.n	8004b38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b20:	490c      	ldr	r1, [pc, #48]	; (8004b54 <vQueueAddToRegistry+0x50>)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <vQueueAddToRegistry+0x50>)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b36:	e006      	b.n	8004b46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b07      	cmp	r3, #7
 8004b42:	d9e7      	bls.n	8004b14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	20004bd4 	.word	0x20004bd4

08004b58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b68:	f001 fdcc 	bl	8006704 <vPortEnterCritical>
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b72:	b25b      	sxtb	r3, r3
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b78:	d103      	bne.n	8004b82 <vQueueWaitForMessageRestricted+0x2a>
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b8e:	d103      	bne.n	8004b98 <vQueueWaitForMessageRestricted+0x40>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b98:	f001 fde4 	bl	8006764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	3324      	adds	r3, #36	; 0x24
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fc61 	bl	8005474 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bb2:	6978      	ldr	r0, [r7, #20]
 8004bb4:	f7ff ff26 	bl	8004a04 <prvUnlockQueue>
	}
 8004bb8:	bf00      	nop
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08e      	sub	sp, #56	; 0x38
 8004bc4:	af04      	add	r7, sp, #16
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <xTaskCreateStatic+0x2a>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	623b      	str	r3, [r7, #32]
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <xTaskCreateStatic+0x46>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	61fb      	str	r3, [r7, #28]
}
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c06:	23bc      	movs	r3, #188	; 0xbc
 8004c08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2bbc      	cmp	r3, #188	; 0xbc
 8004c0e:	d00a      	beq.n	8004c26 <xTaskCreateStatic+0x66>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	61bb      	str	r3, [r7, #24]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01e      	beq.n	8004c6c <xTaskCreateStatic+0xac>
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	2202      	movs	r2, #2
 8004c42:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c46:	2300      	movs	r3, #0
 8004c48:	9303      	str	r3, [sp, #12]
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	9302      	str	r3, [sp, #8]
 8004c4e:	f107 0314 	add.w	r3, r7, #20
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f850 	bl	8004d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c66:	f000 f8f3 	bl	8004e50 <prvAddNewTaskToReadyList>
 8004c6a:	e001      	b.n	8004c70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c70:	697b      	ldr	r3, [r7, #20]
	}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3728      	adds	r7, #40	; 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b08c      	sub	sp, #48	; 0x30
 8004c7e:	af04      	add	r7, sp, #16
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 fe5a 	bl	8006948 <pvPortMalloc>
 8004c94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00e      	beq.n	8004cba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c9c:	20bc      	movs	r0, #188	; 0xbc
 8004c9e:	f001 fe53 	bl	8006948 <pvPortMalloc>
 8004ca2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
 8004cb0:	e005      	b.n	8004cbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cb2:	6978      	ldr	r0, [r7, #20]
 8004cb4:	f001 ff14 	bl	8006ae0 <vPortFree>
 8004cb8:	e001      	b.n	8004cbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d017      	beq.n	8004cf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ccc:	88fa      	ldrh	r2, [r7, #6]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9303      	str	r3, [sp, #12]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	9302      	str	r3, [sp, #8]
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f80e 	bl	8004d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ce8:	69f8      	ldr	r0, [r7, #28]
 8004cea:	f000 f8b1 	bl	8004e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e002      	b.n	8004cfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	21a5      	movs	r1, #165	; 0xa5
 8004d1e:	f002 f831 	bl	8006d84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f023 0307 	bic.w	r3, r3, #7
 8004d3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	617b      	str	r3, [r7, #20]
}
 8004d58:	bf00      	nop
 8004d5a:	e7fe      	b.n	8004d5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01f      	beq.n	8004da2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	e012      	b.n	8004d8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	7819      	ldrb	r1, [r3, #0]
 8004d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	3334      	adds	r3, #52	; 0x34
 8004d78:	460a      	mov	r2, r1
 8004d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d006      	beq.n	8004d96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	2b0f      	cmp	r3, #15
 8004d92:	d9e9      	bls.n	8004d68 <prvInitialiseNewTask+0x64>
 8004d94:	e000      	b.n	8004d98 <prvInitialiseNewTask+0x94>
			{
				break;
 8004d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004da0:	e003      	b.n	8004daa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	2b37      	cmp	r3, #55	; 0x37
 8004dae:	d901      	bls.n	8004db4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004db0:	2337      	movs	r3, #55	; 0x37
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff f978 	bl	80040c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff f973 	bl	80040c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	3354      	adds	r3, #84	; 0x54
 8004e04:	2260      	movs	r2, #96	; 0x60
 8004e06:	2100      	movs	r1, #0
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f001 ffbb 	bl	8006d84 <memset>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	4a0c      	ldr	r2, [pc, #48]	; (8004e44 <prvInitialiseNewTask+0x140>)
 8004e12:	659a      	str	r2, [r3, #88]	; 0x58
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <prvInitialiseNewTask+0x144>)
 8004e18:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	4a0b      	ldr	r2, [pc, #44]	; (8004e4c <prvInitialiseNewTask+0x148>)
 8004e1e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	69b8      	ldr	r0, [r7, #24]
 8004e26:	f001 fb43 	bl	80064b0 <pxPortInitialiseStack>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e3c:	bf00      	nop
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	08007020 	.word	0x08007020
 8004e48:	08007040 	.word	0x08007040
 8004e4c:	08007000 	.word	0x08007000

08004e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e58:	f001 fc54 	bl	8006704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e5c:	4b2d      	ldr	r3, [pc, #180]	; (8004f14 <prvAddNewTaskToReadyList+0xc4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3301      	adds	r3, #1
 8004e62:	4a2c      	ldr	r2, [pc, #176]	; (8004f14 <prvAddNewTaskToReadyList+0xc4>)
 8004e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e66:	4b2c      	ldr	r3, [pc, #176]	; (8004f18 <prvAddNewTaskToReadyList+0xc8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e6e:	4a2a      	ldr	r2, [pc, #168]	; (8004f18 <prvAddNewTaskToReadyList+0xc8>)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e74:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <prvAddNewTaskToReadyList+0xc4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d110      	bne.n	8004e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e7c:	f000 fc26 	bl	80056cc <prvInitialiseTaskLists>
 8004e80:	e00d      	b.n	8004e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e82:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <prvAddNewTaskToReadyList+0xcc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e8a:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <prvAddNewTaskToReadyList+0xc8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d802      	bhi.n	8004e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e98:	4a1f      	ldr	r2, [pc, #124]	; (8004f18 <prvAddNewTaskToReadyList+0xc8>)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e9e:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <prvAddNewTaskToReadyList+0xd0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <prvAddNewTaskToReadyList+0xd0>)
 8004ea6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <prvAddNewTaskToReadyList+0xd0>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <prvAddNewTaskToReadyList+0xd4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d903      	bls.n	8004ec4 <prvAddNewTaskToReadyList+0x74>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	4a18      	ldr	r2, [pc, #96]	; (8004f24 <prvAddNewTaskToReadyList+0xd4>)
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4a15      	ldr	r2, [pc, #84]	; (8004f28 <prvAddNewTaskToReadyList+0xd8>)
 8004ed2:	441a      	add	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f7ff f8fd 	bl	80040da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ee0:	f001 fc40 	bl	8006764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <prvAddNewTaskToReadyList+0xcc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00e      	beq.n	8004f0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004eec:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <prvAddNewTaskToReadyList+0xc8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d207      	bcs.n	8004f0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004efa:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <prvAddNewTaskToReadyList+0xdc>)
 8004efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000d04 	.word	0x20000d04
 8004f18:	20000830 	.word	0x20000830
 8004f1c:	20000d10 	.word	0x20000d10
 8004f20:	20000d20 	.word	0x20000d20
 8004f24:	20000d0c 	.word	0x20000d0c
 8004f28:	20000834 	.word	0x20000834
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d017      	beq.n	8004f72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f42:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <vTaskDelay+0x60>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <vTaskDelay+0x30>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	60bb      	str	r3, [r7, #8]
}
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f60:	f000 f88a 	bl	8005078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f64:	2100      	movs	r1, #0
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 ff00 	bl	8005d6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f6c:	f000 f892 	bl	8005094 <xTaskResumeAll>
 8004f70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d107      	bne.n	8004f88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <vTaskDelay+0x64>)
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20000d2c 	.word	0x20000d2c
 8004f94:	e000ed04 	.word	0xe000ed04

08004f98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	; 0x28
 8004f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fa6:	463a      	mov	r2, r7
 8004fa8:	1d39      	adds	r1, r7, #4
 8004faa:	f107 0308 	add.w	r3, r7, #8
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff f832 	bl	8004018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	9202      	str	r2, [sp, #8]
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	460a      	mov	r2, r1
 8004fc6:	4924      	ldr	r1, [pc, #144]	; (8005058 <vTaskStartScheduler+0xc0>)
 8004fc8:	4824      	ldr	r0, [pc, #144]	; (800505c <vTaskStartScheduler+0xc4>)
 8004fca:	f7ff fdf9 	bl	8004bc0 <xTaskCreateStatic>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4a23      	ldr	r2, [pc, #140]	; (8005060 <vTaskStartScheduler+0xc8>)
 8004fd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fd4:	4b22      	ldr	r3, [pc, #136]	; (8005060 <vTaskStartScheduler+0xc8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e001      	b.n	8004fe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d102      	bne.n	8004ff2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004fec:	f000 ff12 	bl	8005e14 <xTimerCreateTimerTask>
 8004ff0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d11b      	bne.n	8005030 <vTaskStartScheduler+0x98>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	613b      	str	r3, [r7, #16]
}
 800500a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800500c:	4b15      	ldr	r3, [pc, #84]	; (8005064 <vTaskStartScheduler+0xcc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3354      	adds	r3, #84	; 0x54
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <vTaskStartScheduler+0xd0>)
 8005014:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <vTaskStartScheduler+0xd4>)
 8005018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800501c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800501e:	4b14      	ldr	r3, [pc, #80]	; (8005070 <vTaskStartScheduler+0xd8>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005024:	4b13      	ldr	r3, [pc, #76]	; (8005074 <vTaskStartScheduler+0xdc>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800502a:	f001 fac9 	bl	80065c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800502e:	e00e      	b.n	800504e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005036:	d10a      	bne.n	800504e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	60fb      	str	r3, [r7, #12]
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <vTaskStartScheduler+0xb4>
}
 800504e:	bf00      	nop
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	08006f64 	.word	0x08006f64
 800505c:	0800569d 	.word	0x0800569d
 8005060:	20000d28 	.word	0x20000d28
 8005064:	20000830 	.word	0x20000830
 8005068:	2000001c 	.word	0x2000001c
 800506c:	20000d24 	.word	0x20000d24
 8005070:	20000d10 	.word	0x20000d10
 8005074:	20000d08 	.word	0x20000d08

08005078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <vTaskSuspendAll+0x18>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3301      	adds	r3, #1
 8005082:	4a03      	ldr	r2, [pc, #12]	; (8005090 <vTaskSuspendAll+0x18>)
 8005084:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005086:	bf00      	nop
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	20000d2c 	.word	0x20000d2c

08005094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800509e:	2300      	movs	r3, #0
 80050a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050a2:	4b42      	ldr	r3, [pc, #264]	; (80051ac <xTaskResumeAll+0x118>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	603b      	str	r3, [r7, #0]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050c0:	f001 fb20 	bl	8006704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050c4:	4b39      	ldr	r3, [pc, #228]	; (80051ac <xTaskResumeAll+0x118>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	4a38      	ldr	r2, [pc, #224]	; (80051ac <xTaskResumeAll+0x118>)
 80050cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ce:	4b37      	ldr	r3, [pc, #220]	; (80051ac <xTaskResumeAll+0x118>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d162      	bne.n	800519c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050d6:	4b36      	ldr	r3, [pc, #216]	; (80051b0 <xTaskResumeAll+0x11c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d05e      	beq.n	800519c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050de:	e02f      	b.n	8005140 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e0:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <xTaskResumeAll+0x120>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3318      	adds	r3, #24
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff f851 	bl	8004194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff f84c 	bl	8004194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	4b2d      	ldr	r3, [pc, #180]	; (80051b8 <xTaskResumeAll+0x124>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d903      	bls.n	8005110 <xTaskResumeAll+0x7c>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	4a2a      	ldr	r2, [pc, #168]	; (80051b8 <xTaskResumeAll+0x124>)
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4a27      	ldr	r2, [pc, #156]	; (80051bc <xTaskResumeAll+0x128>)
 800511e:	441a      	add	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f7fe ffd7 	bl	80040da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	4b23      	ldr	r3, [pc, #140]	; (80051c0 <xTaskResumeAll+0x12c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800513a:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <xTaskResumeAll+0x130>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005140:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <xTaskResumeAll+0x120>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1cb      	bne.n	80050e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800514e:	f000 fb5f 	bl	8005810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <xTaskResumeAll+0x134>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d010      	beq.n	8005180 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800515e:	f000 f847 	bl	80051f0 <xTaskIncrementTick>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005168:	4b16      	ldr	r3, [pc, #88]	; (80051c4 <xTaskResumeAll+0x130>)
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3b01      	subs	r3, #1
 8005172:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f1      	bne.n	800515e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800517a:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <xTaskResumeAll+0x134>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005180:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <xTaskResumeAll+0x130>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d009      	beq.n	800519c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005188:	2301      	movs	r3, #1
 800518a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800518c:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <xTaskResumeAll+0x138>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800519c:	f001 fae2 	bl	8006764 <vPortExitCritical>

	return xAlreadyYielded;
 80051a0:	68bb      	ldr	r3, [r7, #8]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000d2c 	.word	0x20000d2c
 80051b0:	20000d04 	.word	0x20000d04
 80051b4:	20000cc4 	.word	0x20000cc4
 80051b8:	20000d0c 	.word	0x20000d0c
 80051bc:	20000834 	.word	0x20000834
 80051c0:	20000830 	.word	0x20000830
 80051c4:	20000d18 	.word	0x20000d18
 80051c8:	20000d14 	.word	0x20000d14
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <xTaskGetTickCount+0x1c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051dc:	687b      	ldr	r3, [r7, #4]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	20000d08 	.word	0x20000d08

080051f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051fa:	4b4f      	ldr	r3, [pc, #316]	; (8005338 <xTaskIncrementTick+0x148>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 808f 	bne.w	8005322 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005204:	4b4d      	ldr	r3, [pc, #308]	; (800533c <xTaskIncrementTick+0x14c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3301      	adds	r3, #1
 800520a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800520c:	4a4b      	ldr	r2, [pc, #300]	; (800533c <xTaskIncrementTick+0x14c>)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d120      	bne.n	800525a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005218:	4b49      	ldr	r3, [pc, #292]	; (8005340 <xTaskIncrementTick+0x150>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <xTaskIncrementTick+0x48>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	603b      	str	r3, [r7, #0]
}
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <xTaskIncrementTick+0x46>
 8005238:	4b41      	ldr	r3, [pc, #260]	; (8005340 <xTaskIncrementTick+0x150>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	4b41      	ldr	r3, [pc, #260]	; (8005344 <xTaskIncrementTick+0x154>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a3f      	ldr	r2, [pc, #252]	; (8005340 <xTaskIncrementTick+0x150>)
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	4a3f      	ldr	r2, [pc, #252]	; (8005344 <xTaskIncrementTick+0x154>)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b3e      	ldr	r3, [pc, #248]	; (8005348 <xTaskIncrementTick+0x158>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	4a3d      	ldr	r2, [pc, #244]	; (8005348 <xTaskIncrementTick+0x158>)
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	f000 fadb 	bl	8005810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800525a:	4b3c      	ldr	r3, [pc, #240]	; (800534c <xTaskIncrementTick+0x15c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	429a      	cmp	r2, r3
 8005262:	d349      	bcc.n	80052f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005264:	4b36      	ldr	r3, [pc, #216]	; (8005340 <xTaskIncrementTick+0x150>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800526e:	4b37      	ldr	r3, [pc, #220]	; (800534c <xTaskIncrementTick+0x15c>)
 8005270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005274:	601a      	str	r2, [r3, #0]
					break;
 8005276:	e03f      	b.n	80052f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005278:	4b31      	ldr	r3, [pc, #196]	; (8005340 <xTaskIncrementTick+0x150>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	d203      	bcs.n	8005298 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005290:	4a2e      	ldr	r2, [pc, #184]	; (800534c <xTaskIncrementTick+0x15c>)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005296:	e02f      	b.n	80052f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	3304      	adds	r3, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe ff79 	bl	8004194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	3318      	adds	r3, #24
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe ff70 	bl	8004194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	4b25      	ldr	r3, [pc, #148]	; (8005350 <xTaskIncrementTick+0x160>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d903      	bls.n	80052c8 <xTaskIncrementTick+0xd8>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4a22      	ldr	r2, [pc, #136]	; (8005350 <xTaskIncrementTick+0x160>)
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <xTaskIncrementTick+0x164>)
 80052d6:	441a      	add	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f7fe fefb 	bl	80040da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <xTaskIncrementTick+0x168>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d3b8      	bcc.n	8005264 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80052f2:	2301      	movs	r3, #1
 80052f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052f6:	e7b5      	b.n	8005264 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052f8:	4b17      	ldr	r3, [pc, #92]	; (8005358 <xTaskIncrementTick+0x168>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fe:	4915      	ldr	r1, [pc, #84]	; (8005354 <xTaskIncrementTick+0x164>)
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d901      	bls.n	8005314 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005310:	2301      	movs	r3, #1
 8005312:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005314:	4b11      	ldr	r3, [pc, #68]	; (800535c <xTaskIncrementTick+0x16c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800531c:	2301      	movs	r3, #1
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e004      	b.n	800532c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <xTaskIncrementTick+0x170>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <xTaskIncrementTick+0x170>)
 800532a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800532c:	697b      	ldr	r3, [r7, #20]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000d2c 	.word	0x20000d2c
 800533c:	20000d08 	.word	0x20000d08
 8005340:	20000cbc 	.word	0x20000cbc
 8005344:	20000cc0 	.word	0x20000cc0
 8005348:	20000d1c 	.word	0x20000d1c
 800534c:	20000d24 	.word	0x20000d24
 8005350:	20000d0c 	.word	0x20000d0c
 8005354:	20000834 	.word	0x20000834
 8005358:	20000830 	.word	0x20000830
 800535c:	20000d18 	.word	0x20000d18
 8005360:	20000d14 	.word	0x20000d14

08005364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800536a:	4b2a      	ldr	r3, [pc, #168]	; (8005414 <vTaskSwitchContext+0xb0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005372:	4b29      	ldr	r3, [pc, #164]	; (8005418 <vTaskSwitchContext+0xb4>)
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005378:	e046      	b.n	8005408 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800537a:	4b27      	ldr	r3, [pc, #156]	; (8005418 <vTaskSwitchContext+0xb4>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005380:	4b26      	ldr	r3, [pc, #152]	; (800541c <vTaskSwitchContext+0xb8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	e010      	b.n	80053aa <vTaskSwitchContext+0x46>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	607b      	str	r3, [r7, #4]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <vTaskSwitchContext+0x3e>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	491d      	ldr	r1, [pc, #116]	; (8005420 <vTaskSwitchContext+0xbc>)
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0e4      	beq.n	8005388 <vTaskSwitchContext+0x24>
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a15      	ldr	r2, [pc, #84]	; (8005420 <vTaskSwitchContext+0xbc>)
 80053ca:	4413      	add	r3, r2
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	605a      	str	r2, [r3, #4]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	3308      	adds	r3, #8
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d104      	bne.n	80053ee <vTaskSwitchContext+0x8a>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4a0b      	ldr	r2, [pc, #44]	; (8005424 <vTaskSwitchContext+0xc0>)
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4a08      	ldr	r2, [pc, #32]	; (800541c <vTaskSwitchContext+0xb8>)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <vTaskSwitchContext+0xc0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3354      	adds	r3, #84	; 0x54
 8005404:	4a08      	ldr	r2, [pc, #32]	; (8005428 <vTaskSwitchContext+0xc4>)
 8005406:	6013      	str	r3, [r2, #0]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	20000d2c 	.word	0x20000d2c
 8005418:	20000d18 	.word	0x20000d18
 800541c:	20000d0c 	.word	0x20000d0c
 8005420:	20000834 	.word	0x20000834
 8005424:	20000830 	.word	0x20000830
 8005428:	2000001c 	.word	0x2000001c

0800542c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	60fb      	str	r3, [r7, #12]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005452:	4b07      	ldr	r3, [pc, #28]	; (8005470 <vTaskPlaceOnEventList+0x44>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3318      	adds	r3, #24
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fe fe61 	bl	8004122 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005460:	2101      	movs	r1, #1
 8005462:	6838      	ldr	r0, [r7, #0]
 8005464:	f000 fc82 	bl	8005d6c <prvAddCurrentTaskToDelayedList>
}
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000830 	.word	0x20000830

08005474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	617b      	str	r3, [r7, #20]
}
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3318      	adds	r3, #24
 80054a2:	4619      	mov	r1, r3
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7fe fe18 	bl	80040da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80054b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	68b8      	ldr	r0, [r7, #8]
 80054ba:	f000 fc57 	bl	8005d6c <prvAddCurrentTaskToDelayedList>
	}
 80054be:	bf00      	nop
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000830 	.word	0x20000830

080054cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60fb      	str	r3, [r7, #12]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	3318      	adds	r3, #24
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fe fe49 	bl	8004194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <xTaskRemoveFromEventList+0xb0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11d      	bne.n	8005546 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	3304      	adds	r3, #4
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fe40 	bl	8004194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005518:	4b19      	ldr	r3, [pc, #100]	; (8005580 <xTaskRemoveFromEventList+0xb4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d903      	bls.n	8005528 <xTaskRemoveFromEventList+0x5c>
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	4a16      	ldr	r2, [pc, #88]	; (8005580 <xTaskRemoveFromEventList+0xb4>)
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <xTaskRemoveFromEventList+0xb8>)
 8005536:	441a      	add	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	3304      	adds	r3, #4
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f7fe fdcb 	bl	80040da <vListInsertEnd>
 8005544:	e005      	b.n	8005552 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	3318      	adds	r3, #24
 800554a:	4619      	mov	r1, r3
 800554c:	480e      	ldr	r0, [pc, #56]	; (8005588 <xTaskRemoveFromEventList+0xbc>)
 800554e:	f7fe fdc4 	bl	80040da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005556:	4b0d      	ldr	r3, [pc, #52]	; (800558c <xTaskRemoveFromEventList+0xc0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	429a      	cmp	r2, r3
 800555e:	d905      	bls.n	800556c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005564:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <xTaskRemoveFromEventList+0xc4>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e001      	b.n	8005570 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005570:	697b      	ldr	r3, [r7, #20]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000d2c 	.word	0x20000d2c
 8005580:	20000d0c 	.word	0x20000d0c
 8005584:	20000834 	.word	0x20000834
 8005588:	20000cc4 	.word	0x20000cc4
 800558c:	20000830 	.word	0x20000830
 8005590:	20000d18 	.word	0x20000d18

08005594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <vTaskInternalSetTimeOutState+0x24>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <vTaskInternalSetTimeOutState+0x28>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	605a      	str	r2, [r3, #4]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	20000d1c 	.word	0x20000d1c
 80055bc:	20000d08 	.word	0x20000d08

080055c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	60fb      	str	r3, [r7, #12]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005602:	f001 f87f 	bl	8006704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005606:	4b1d      	ldr	r3, [pc, #116]	; (800567c <xTaskCheckForTimeOut+0xbc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800561e:	d102      	bne.n	8005626 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	e023      	b.n	800566e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <xTaskCheckForTimeOut+0xc0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d007      	beq.n	8005642 <xTaskCheckForTimeOut+0x82>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	429a      	cmp	r2, r3
 800563a:	d302      	bcc.n	8005642 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800563c:	2301      	movs	r3, #1
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	e015      	b.n	800566e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	429a      	cmp	r2, r3
 800564a:	d20b      	bcs.n	8005664 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	1ad2      	subs	r2, r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff9b 	bl	8005594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	e004      	b.n	800566e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800566a:	2301      	movs	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800566e:	f001 f879 	bl	8006764 <vPortExitCritical>

	return xReturn;
 8005672:	69fb      	ldr	r3, [r7, #28]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20000d08 	.word	0x20000d08
 8005680:	20000d1c 	.word	0x20000d1c

08005684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <vTaskMissedYield+0x14>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000d18 	.word	0x20000d18

0800569c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056a4:	f000 f852 	bl	800574c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <prvIdleTask+0x28>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d9f9      	bls.n	80056a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <prvIdleTask+0x2c>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056c0:	e7f0      	b.n	80056a4 <prvIdleTask+0x8>
 80056c2:	bf00      	nop
 80056c4:	20000834 	.word	0x20000834
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056d2:	2300      	movs	r3, #0
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	e00c      	b.n	80056f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4a12      	ldr	r2, [pc, #72]	; (800572c <prvInitialiseTaskLists+0x60>)
 80056e4:	4413      	add	r3, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fcca 	bl	8004080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3301      	adds	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b37      	cmp	r3, #55	; 0x37
 80056f6:	d9ef      	bls.n	80056d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056f8:	480d      	ldr	r0, [pc, #52]	; (8005730 <prvInitialiseTaskLists+0x64>)
 80056fa:	f7fe fcc1 	bl	8004080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056fe:	480d      	ldr	r0, [pc, #52]	; (8005734 <prvInitialiseTaskLists+0x68>)
 8005700:	f7fe fcbe 	bl	8004080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005704:	480c      	ldr	r0, [pc, #48]	; (8005738 <prvInitialiseTaskLists+0x6c>)
 8005706:	f7fe fcbb 	bl	8004080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800570a:	480c      	ldr	r0, [pc, #48]	; (800573c <prvInitialiseTaskLists+0x70>)
 800570c:	f7fe fcb8 	bl	8004080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005710:	480b      	ldr	r0, [pc, #44]	; (8005740 <prvInitialiseTaskLists+0x74>)
 8005712:	f7fe fcb5 	bl	8004080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <prvInitialiseTaskLists+0x78>)
 8005718:	4a05      	ldr	r2, [pc, #20]	; (8005730 <prvInitialiseTaskLists+0x64>)
 800571a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <prvInitialiseTaskLists+0x7c>)
 800571e:	4a05      	ldr	r2, [pc, #20]	; (8005734 <prvInitialiseTaskLists+0x68>)
 8005720:	601a      	str	r2, [r3, #0]
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000834 	.word	0x20000834
 8005730:	20000c94 	.word	0x20000c94
 8005734:	20000ca8 	.word	0x20000ca8
 8005738:	20000cc4 	.word	0x20000cc4
 800573c:	20000cd8 	.word	0x20000cd8
 8005740:	20000cf0 	.word	0x20000cf0
 8005744:	20000cbc 	.word	0x20000cbc
 8005748:	20000cc0 	.word	0x20000cc0

0800574c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005752:	e019      	b.n	8005788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005754:	f000 ffd6 	bl	8006704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005758:	4b10      	ldr	r3, [pc, #64]	; (800579c <prvCheckTasksWaitingTermination+0x50>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f7fe fd15 	bl	8004194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800576a:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <prvCheckTasksWaitingTermination+0x54>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3b01      	subs	r3, #1
 8005770:	4a0b      	ldr	r2, [pc, #44]	; (80057a0 <prvCheckTasksWaitingTermination+0x54>)
 8005772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <prvCheckTasksWaitingTermination+0x58>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3b01      	subs	r3, #1
 800577a:	4a0a      	ldr	r2, [pc, #40]	; (80057a4 <prvCheckTasksWaitingTermination+0x58>)
 800577c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800577e:	f000 fff1 	bl	8006764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f810 	bl	80057a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005788:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <prvCheckTasksWaitingTermination+0x58>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e1      	bne.n	8005754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000cd8 	.word	0x20000cd8
 80057a0:	20000d04 	.word	0x20000d04
 80057a4:	20000cec 	.word	0x20000cec

080057a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3354      	adds	r3, #84	; 0x54
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 fafb 	bl	8006db0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d108      	bne.n	80057d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 f989 	bl	8006ae0 <vPortFree>
				vPortFree( pxTCB );
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 f986 	bl	8006ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057d4:	e018      	b.n	8005808 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d103      	bne.n	80057e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 f97d 	bl	8006ae0 <vPortFree>
	}
 80057e6:	e00f      	b.n	8005808 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d00a      	beq.n	8005808 <prvDeleteTCB+0x60>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	60fb      	str	r3, [r7, #12]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <prvDeleteTCB+0x5e>
	}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005816:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <prvResetNextTaskUnblockTime+0x38>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <prvResetNextTaskUnblockTime+0x3c>)
 8005822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005828:	e008      	b.n	800583c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582a:	4b07      	ldr	r3, [pc, #28]	; (8005848 <prvResetNextTaskUnblockTime+0x38>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	4a04      	ldr	r2, [pc, #16]	; (800584c <prvResetNextTaskUnblockTime+0x3c>)
 800583a:	6013      	str	r3, [r2, #0]
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	20000cbc 	.word	0x20000cbc
 800584c:	20000d24 	.word	0x20000d24

08005850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <xTaskGetSchedulerState+0x34>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800585e:	2301      	movs	r3, #1
 8005860:	607b      	str	r3, [r7, #4]
 8005862:	e008      	b.n	8005876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005864:	4b08      	ldr	r3, [pc, #32]	; (8005888 <xTaskGetSchedulerState+0x38>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800586c:	2302      	movs	r3, #2
 800586e:	607b      	str	r3, [r7, #4]
 8005870:	e001      	b.n	8005876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005872:	2300      	movs	r3, #0
 8005874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005876:	687b      	ldr	r3, [r7, #4]
	}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	20000d10 	.word	0x20000d10
 8005888:	20000d2c 	.word	0x20000d2c

0800588c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d056      	beq.n	8005950 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058a2:	4b2e      	ldr	r3, [pc, #184]	; (800595c <xTaskPriorityDisinherit+0xd0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d00a      	beq.n	80058c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	60fb      	str	r3, [r7, #12]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	60bb      	str	r3, [r7, #8]
}
 80058dc:	bf00      	nop
 80058de:	e7fe      	b.n	80058de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	1e5a      	subs	r2, r3, #1
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d02c      	beq.n	8005950 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d128      	bne.n	8005950 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	3304      	adds	r3, #4
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe fc46 	bl	8004194 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <xTaskPriorityDisinherit+0xd4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d903      	bls.n	8005930 <xTaskPriorityDisinherit+0xa4>
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	4a0c      	ldr	r2, [pc, #48]	; (8005960 <xTaskPriorityDisinherit+0xd4>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4a09      	ldr	r2, [pc, #36]	; (8005964 <xTaskPriorityDisinherit+0xd8>)
 800593e:	441a      	add	r2, r3
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f7fe fbc7 	bl	80040da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800594c:	2301      	movs	r3, #1
 800594e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005950:	697b      	ldr	r3, [r7, #20]
	}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000830 	.word	0x20000830
 8005960:	20000d0c 	.word	0x20000d0c
 8005964:	20000834 	.word	0x20000834

08005968 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005976:	f000 fec5 	bl	8006704 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800597a:	4b29      	ldr	r3, [pc, #164]	; (8005a20 <xTaskNotifyWait+0xb8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d01c      	beq.n	80059c2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005988:	4b25      	ldr	r3, [pc, #148]	; (8005a20 <xTaskNotifyWait+0xb8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	43d2      	mvns	r2, r2
 8005994:	400a      	ands	r2, r1
 8005996:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800599a:	4b21      	ldr	r3, [pc, #132]	; (8005a20 <xTaskNotifyWait+0xb8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059aa:	2101      	movs	r1, #1
 80059ac:	6838      	ldr	r0, [r7, #0]
 80059ae:	f000 f9dd 	bl	8005d6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80059b2:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <xTaskNotifyWait+0xbc>)
 80059b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80059c2:	f000 fecf 	bl	8006764 <vPortExitCritical>

		taskENTER_CRITICAL();
 80059c6:	f000 fe9d 	bl	8006704 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <xTaskNotifyWait+0xb8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <xTaskNotifyWait+0xb8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d002      	beq.n	80059f0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e00a      	b.n	8005a06 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <xTaskNotifyWait+0xb8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	43d2      	mvns	r2, r2
 80059fc:	400a      	ands	r2, r1
 80059fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8005a02:	2301      	movs	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <xTaskNotifyWait+0xb8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8005a10:	f000 fea8 	bl	8006764 <vPortExitCritical>

		return xReturn;
 8005a14:	697b      	ldr	r3, [r7, #20]
	}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000830 	.word	0x20000830
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <xTaskGenericNotify+0x30>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	61bb      	str	r3, [r7, #24]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005a5c:	f000 fe52 	bl	8006704 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005a76:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d82d      	bhi.n	8005ae2 <xTaskGenericNotify+0xba>
 8005a86:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <xTaskGenericNotify+0x64>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005b05 	.word	0x08005b05
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005ab3 	.word	0x08005ab3
 8005a98:	08005ac3 	.word	0x08005ac3
 8005a9c:	08005acd 	.word	0x08005acd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005ab0:	e02b      	b.n	8005b0a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005ac0:	e023      	b.n	8005b0a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005aca:	e01e      	b.n	8005b0a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005acc:	7ffb      	ldrb	r3, [r7, #31]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d004      	beq.n	8005adc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005ada:	e016      	b.n	8005b0a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005ae0:	e013      	b.n	8005b0a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aec:	d00c      	beq.n	8005b08 <xTaskGenericNotify+0xe0>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	617b      	str	r3, [r7, #20]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <xTaskGenericNotify+0xda>
					break;
 8005b04:	bf00      	nop
 8005b06:	e000      	b.n	8005b0a <xTaskGenericNotify+0xe2>

					break;
 8005b08:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005b0a:	7ffb      	ldrb	r3, [r7, #31]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d13a      	bne.n	8005b86 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe fb3d 	bl	8004194 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <xTaskGenericNotify+0x16c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d903      	bls.n	8005b2e <xTaskGenericNotify+0x106>
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	4a1a      	ldr	r2, [pc, #104]	; (8005b94 <xTaskGenericNotify+0x16c>)
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4a17      	ldr	r2, [pc, #92]	; (8005b98 <xTaskGenericNotify+0x170>)
 8005b3c:	441a      	add	r2, r3
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	3304      	adds	r3, #4
 8005b42:	4619      	mov	r1, r3
 8005b44:	4610      	mov	r0, r2
 8005b46:	f7fe fac8 	bl	80040da <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <xTaskGenericNotify+0x140>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	613b      	str	r3, [r7, #16]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <xTaskGenericNotify+0x174>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d907      	bls.n	8005b86 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <xTaskGenericNotify+0x178>)
 8005b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005b86:	f000 fded 	bl	8006764 <vPortExitCritical>

		return xReturn;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3728      	adds	r7, #40	; 0x28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000d0c 	.word	0x20000d0c
 8005b98:	20000834 	.word	0x20000834
 8005b9c:	20000830 	.word	0x20000830
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08e      	sub	sp, #56	; 0x38
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bd4:	f000 fe78 	bl	80068c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005bdc:	f3ef 8211 	mrs	r2, BASEPRI
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	623a      	str	r2, [r7, #32]
 8005bf2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005bf4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d82f      	bhi.n	8005c80 <xTaskGenericNotifyFromISR+0xdc>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <xTaskGenericNotifyFromISR+0x84>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005ca3 	.word	0x08005ca3
 8005c2c:	08005c3d 	.word	0x08005c3d
 8005c30:	08005c4f 	.word	0x08005c4f
 8005c34:	08005c5f 	.word	0x08005c5f
 8005c38:	08005c69 	.word	0x08005c69
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	431a      	orrs	r2, r3
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005c4c:	e02c      	b.n	8005ca8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005c5c:	e024      	b.n	8005ca8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005c66:	e01f      	b.n	8005ca8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005c68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d004      	beq.n	8005c7a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005c78:	e016      	b.n	8005ca8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005c7e:	e013      	b.n	8005ca8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c8a:	d00c      	beq.n	8005ca6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	61bb      	str	r3, [r7, #24]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8005ca2:	bf00      	nop
 8005ca4:	e000      	b.n	8005ca8 <xTaskGenericNotifyFromISR+0x104>
					break;
 8005ca6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d146      	bne.n	8005d3e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	617b      	str	r3, [r7, #20]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cce:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <xTaskGenericNotifyFromISR+0x1b0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d11d      	bne.n	8005d12 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	3304      	adds	r3, #4
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fa5a 	bl	8004194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	4b1c      	ldr	r3, [pc, #112]	; (8005d58 <xTaskGenericNotifyFromISR+0x1b4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d903      	bls.n	8005cf4 <xTaskGenericNotifyFromISR+0x150>
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <xTaskGenericNotifyFromISR+0x1b4>)
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <xTaskGenericNotifyFromISR+0x1b8>)
 8005d02:	441a      	add	r2, r3
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f7fe f9e5 	bl	80040da <vListInsertEnd>
 8005d10:	e005      	b.n	8005d1e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	3318      	adds	r3, #24
 8005d16:	4619      	mov	r1, r3
 8005d18:	4811      	ldr	r0, [pc, #68]	; (8005d60 <xTaskGenericNotifyFromISR+0x1bc>)
 8005d1a:	f7fe f9de 	bl	80040da <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d22:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <xTaskGenericNotifyFromISR+0x1c0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d908      	bls.n	8005d3e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	2201      	movs	r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <xTaskGenericNotifyFromISR+0x1c4>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f383 8811 	msr	BASEPRI, r3
}
 8005d48:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3738      	adds	r7, #56	; 0x38
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20000d2c 	.word	0x20000d2c
 8005d58:	20000d0c 	.word	0x20000d0c
 8005d5c:	20000834 	.word	0x20000834
 8005d60:	20000cc4 	.word	0x20000cc4
 8005d64:	20000830 	.word	0x20000830
 8005d68:	20000d18 	.word	0x20000d18

08005d6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d76:	4b21      	ldr	r3, [pc, #132]	; (8005dfc <prvAddCurrentTaskToDelayedList+0x90>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d7c:	4b20      	ldr	r3, [pc, #128]	; (8005e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fa06 	bl	8004194 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d8e:	d10a      	bne.n	8005da6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d96:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4819      	ldr	r0, [pc, #100]	; (8005e04 <prvAddCurrentTaskToDelayedList+0x98>)
 8005da0:	f7fe f99b 	bl	80040da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005da4:	e026      	b.n	8005df4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4413      	add	r3, r2
 8005dac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dae:	4b14      	ldr	r3, [pc, #80]	; (8005e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d209      	bcs.n	8005dd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dbe:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f7fe f9a9 	bl	8004122 <vListInsert>
}
 8005dd0:	e010      	b.n	8005df4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dd2:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f7fe f99f 	bl	8004122 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005de4:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d202      	bcs.n	8005df4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005dee:	4a08      	ldr	r2, [pc, #32]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6013      	str	r3, [r2, #0]
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000d08 	.word	0x20000d08
 8005e00:	20000830 	.word	0x20000830
 8005e04:	20000cf0 	.word	0x20000cf0
 8005e08:	20000cc0 	.word	0x20000cc0
 8005e0c:	20000cbc 	.word	0x20000cbc
 8005e10:	20000d24 	.word	0x20000d24

08005e14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08a      	sub	sp, #40	; 0x28
 8005e18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e1e:	f000 fb07 	bl	8006430 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e22:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <xTimerCreateTimerTask+0x80>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d021      	beq.n	8005e6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e32:	1d3a      	adds	r2, r7, #4
 8005e34:	f107 0108 	add.w	r1, r7, #8
 8005e38:	f107 030c 	add.w	r3, r7, #12
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fe f905 	bl	800404c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	9202      	str	r2, [sp, #8]
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	2300      	movs	r3, #0
 8005e52:	460a      	mov	r2, r1
 8005e54:	4910      	ldr	r1, [pc, #64]	; (8005e98 <xTimerCreateTimerTask+0x84>)
 8005e56:	4811      	ldr	r0, [pc, #68]	; (8005e9c <xTimerCreateTimerTask+0x88>)
 8005e58:	f7fe feb2 	bl	8004bc0 <xTaskCreateStatic>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	4a10      	ldr	r2, [pc, #64]	; (8005ea0 <xTimerCreateTimerTask+0x8c>)
 8005e60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e62:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <xTimerCreateTimerTask+0x8c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	613b      	str	r3, [r7, #16]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e8a:	697b      	ldr	r3, [r7, #20]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000d60 	.word	0x20000d60
 8005e98:	08006f6c 	.word	0x08006f6c
 8005e9c:	08005fd9 	.word	0x08005fd9
 8005ea0:	20000d64 	.word	0x20000d64

08005ea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08a      	sub	sp, #40	; 0x28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	623b      	str	r3, [r7, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	e7fe      	b.n	8005ed0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ed2:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <xTimerGenericCommand+0x98>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d02a      	beq.n	8005f30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b05      	cmp	r3, #5
 8005eea:	dc18      	bgt.n	8005f1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005eec:	f7ff fcb0 	bl	8005850 <xTaskGetSchedulerState>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d109      	bne.n	8005f0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ef6:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <xTimerGenericCommand+0x98>)
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	f107 0110 	add.w	r1, r7, #16
 8005efe:	2300      	movs	r3, #0
 8005f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f02:	f7fe fa75 	bl	80043f0 <xQueueGenericSend>
 8005f06:	6278      	str	r0, [r7, #36]	; 0x24
 8005f08:	e012      	b.n	8005f30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <xTimerGenericCommand+0x98>)
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	f107 0110 	add.w	r1, r7, #16
 8005f12:	2300      	movs	r3, #0
 8005f14:	2200      	movs	r2, #0
 8005f16:	f7fe fa6b 	bl	80043f0 <xQueueGenericSend>
 8005f1a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f1c:	e008      	b.n	8005f30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <xTimerGenericCommand+0x98>)
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	f107 0110 	add.w	r1, r7, #16
 8005f26:	2300      	movs	r3, #0
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	f7fe fb5f 	bl	80045ec <xQueueGenericSendFromISR>
 8005f2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3728      	adds	r7, #40	; 0x28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000d60 	.word	0x20000d60

08005f40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4a:	4b22      	ldr	r3, [pc, #136]	; (8005fd4 <prvProcessExpiredTimer+0x94>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe f91b 	bl	8004194 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d022      	beq.n	8005fb2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	18d1      	adds	r1, r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	6978      	ldr	r0, [r7, #20]
 8005f7a:	f000 f8d1 	bl	8006120 <prvInsertTimerInActiveList>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01f      	beq.n	8005fc4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f84:	2300      	movs	r3, #0
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	6978      	ldr	r0, [r7, #20]
 8005f90:	f7ff ff88 	bl	8005ea4 <xTimerGenericCommand>
 8005f94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d113      	bne.n	8005fc4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	6978      	ldr	r0, [r7, #20]
 8005fca:	4798      	blx	r3
}
 8005fcc:	bf00      	nop
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000d58 	.word	0x20000d58

08005fd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fe0:	f107 0308 	add.w	r3, r7, #8
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 f857 	bl	8006098 <prvGetNextExpireTime>
 8005fea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f803 	bl	8005ffc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ff6:	f000 f8d5 	bl	80061a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ffa:	e7f1      	b.n	8005fe0 <prvTimerTask+0x8>

08005ffc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006006:	f7ff f837 	bl	8005078 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800600a:	f107 0308 	add.w	r3, r7, #8
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f866 	bl	80060e0 <prvSampleTimeNow>
 8006014:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d130      	bne.n	800607e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <prvProcessTimerOrBlockTask+0x3c>
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	429a      	cmp	r2, r3
 8006028:	d806      	bhi.n	8006038 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800602a:	f7ff f833 	bl	8005094 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800602e:	68f9      	ldr	r1, [r7, #12]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff ff85 	bl	8005f40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006036:	e024      	b.n	8006082 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d008      	beq.n	8006050 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <prvProcessTimerOrBlockTask+0x90>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <prvProcessTimerOrBlockTask+0x50>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <prvProcessTimerOrBlockTask+0x52>
 800604c:	2300      	movs	r3, #0
 800604e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006050:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <prvProcessTimerOrBlockTask+0x94>)
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	4619      	mov	r1, r3
 800605e:	f7fe fd7b 	bl	8004b58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006062:	f7ff f817 	bl	8005094 <xTaskResumeAll>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <prvProcessTimerOrBlockTask+0x98>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	f3bf 8f6f 	isb	sy
}
 800607c:	e001      	b.n	8006082 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800607e:	f7ff f809 	bl	8005094 <xTaskResumeAll>
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000d5c 	.word	0x20000d5c
 8006090:	20000d60 	.word	0x20000d60
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060a0:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <prvGetNextExpireTime+0x44>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <prvGetNextExpireTime+0x16>
 80060aa:	2201      	movs	r2, #1
 80060ac:	e000      	b.n	80060b0 <prvGetNextExpireTime+0x18>
 80060ae:	2200      	movs	r2, #0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060bc:	4b07      	ldr	r3, [pc, #28]	; (80060dc <prvGetNextExpireTime+0x44>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	e001      	b.n	80060cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060cc:	68fb      	ldr	r3, [r7, #12]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000d58 	.word	0x20000d58

080060e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060e8:	f7ff f872 	bl	80051d0 <xTaskGetTickCount>
 80060ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060ee:	4b0b      	ldr	r3, [pc, #44]	; (800611c <prvSampleTimeNow+0x3c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d205      	bcs.n	8006104 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060f8:	f000 f936 	bl	8006368 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e002      	b.n	800610a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800610a:	4a04      	ldr	r2, [pc, #16]	; (800611c <prvSampleTimeNow+0x3c>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000d68 	.word	0x20000d68

08006120 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	d812      	bhi.n	800616c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	1ad2      	subs	r2, r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	429a      	cmp	r2, r3
 8006152:	d302      	bcc.n	800615a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006154:	2301      	movs	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e01b      	b.n	8006192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <prvInsertTimerInActiveList+0x7c>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3304      	adds	r3, #4
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f7fd ffdc 	bl	8004122 <vListInsert>
 800616a:	e012      	b.n	8006192 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d206      	bcs.n	8006182 <prvInsertTimerInActiveList+0x62>
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d302      	bcc.n	8006182 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	e007      	b.n	8006192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006182:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <prvInsertTimerInActiveList+0x80>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3304      	adds	r3, #4
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7fd ffc8 	bl	8004122 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006192:	697b      	ldr	r3, [r7, #20]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000d5c 	.word	0x20000d5c
 80061a0:	20000d58 	.word	0x20000d58

080061a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08e      	sub	sp, #56	; 0x38
 80061a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061aa:	e0ca      	b.n	8006342 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da18      	bge.n	80061e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061b2:	1d3b      	adds	r3, r7, #4
 80061b4:	3304      	adds	r3, #4
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	61fb      	str	r3, [r7, #28]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061da:	6850      	ldr	r0, [r2, #4]
 80061dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061de:	6892      	ldr	r2, [r2, #8]
 80061e0:	4611      	mov	r1, r2
 80061e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f2c0 80aa 	blt.w	8006340 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	3304      	adds	r3, #4
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fd ffc9 	bl	8004194 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006202:	463b      	mov	r3, r7
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff ff6b 	bl	80060e0 <prvSampleTimeNow>
 800620a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b09      	cmp	r3, #9
 8006210:	f200 8097 	bhi.w	8006342 <prvProcessReceivedCommands+0x19e>
 8006214:	a201      	add	r2, pc, #4	; (adr r2, 800621c <prvProcessReceivedCommands+0x78>)
 8006216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621a:	bf00      	nop
 800621c:	08006245 	.word	0x08006245
 8006220:	08006245 	.word	0x08006245
 8006224:	08006245 	.word	0x08006245
 8006228:	080062b9 	.word	0x080062b9
 800622c:	080062cd 	.word	0x080062cd
 8006230:	08006317 	.word	0x08006317
 8006234:	08006245 	.word	0x08006245
 8006238:	08006245 	.word	0x08006245
 800623c:	080062b9 	.word	0x080062b9
 8006240:	080062cd 	.word	0x080062cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	18d1      	adds	r1, r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006264:	f7ff ff5c 	bl	8006120 <prvInsertTimerInActiveList>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d069      	beq.n	8006342 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006274:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d05e      	beq.n	8006342 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	441a      	add	r2, r3
 800628c:	2300      	movs	r3, #0
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	2300      	movs	r3, #0
 8006292:	2100      	movs	r1, #0
 8006294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006296:	f7ff fe05 	bl	8005ea4 <xTimerGenericCommand>
 800629a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d14f      	bne.n	8006342 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	61bb      	str	r3, [r7, #24]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80062ca:	e03a      	b.n	8006342 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	617b      	str	r3, [r7, #20]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	18d1      	adds	r1, r2, r3
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006310:	f7ff ff06 	bl	8006120 <prvInsertTimerInActiveList>
					break;
 8006314:	e015      	b.n	8006342 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d103      	bne.n	800632c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006326:	f000 fbdb 	bl	8006ae0 <vPortFree>
 800632a:	e00a      	b.n	8006342 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800633e:	e000      	b.n	8006342 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006340:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <prvProcessReceivedCommands+0x1c0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	1d39      	adds	r1, r7, #4
 8006348:	2200      	movs	r2, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe f9ea 	bl	8004724 <xQueueReceive>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	f47f af2a 	bne.w	80061ac <prvProcessReceivedCommands+0x8>
	}
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	3730      	adds	r7, #48	; 0x30
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000d60 	.word	0x20000d60

08006368 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800636e:	e048      	b.n	8006402 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006370:	4b2d      	ldr	r3, [pc, #180]	; (8006428 <prvSwitchTimerLists+0xc0>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637a:	4b2b      	ldr	r3, [pc, #172]	; (8006428 <prvSwitchTimerLists+0xc0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3304      	adds	r3, #4
 8006388:	4618      	mov	r0, r3
 800638a:	f7fd ff03 	bl	8004194 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d02e      	beq.n	8006402 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4413      	add	r3, r2
 80063ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d90e      	bls.n	80063d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063c2:	4b19      	ldr	r3, [pc, #100]	; (8006428 <prvSwitchTimerLists+0xc0>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f7fd fea8 	bl	8004122 <vListInsert>
 80063d2:	e016      	b.n	8006402 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063d4:	2300      	movs	r3, #0
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	2300      	movs	r3, #0
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	2100      	movs	r1, #0
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fd60 	bl	8005ea4 <xTimerGenericCommand>
 80063e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	603b      	str	r3, [r7, #0]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <prvSwitchTimerLists+0xc0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1b1      	bne.n	8006370 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <prvSwitchTimerLists+0xc0>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <prvSwitchTimerLists+0xc4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a04      	ldr	r2, [pc, #16]	; (8006428 <prvSwitchTimerLists+0xc0>)
 8006418:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800641a:	4a04      	ldr	r2, [pc, #16]	; (800642c <prvSwitchTimerLists+0xc4>)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	6013      	str	r3, [r2, #0]
}
 8006420:	bf00      	nop
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000d58 	.word	0x20000d58
 800642c:	20000d5c 	.word	0x20000d5c

08006430 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006436:	f000 f965 	bl	8006704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800643a:	4b15      	ldr	r3, [pc, #84]	; (8006490 <prvCheckForValidListAndQueue+0x60>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d120      	bne.n	8006484 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006442:	4814      	ldr	r0, [pc, #80]	; (8006494 <prvCheckForValidListAndQueue+0x64>)
 8006444:	f7fd fe1c 	bl	8004080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006448:	4813      	ldr	r0, [pc, #76]	; (8006498 <prvCheckForValidListAndQueue+0x68>)
 800644a:	f7fd fe19 	bl	8004080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800644e:	4b13      	ldr	r3, [pc, #76]	; (800649c <prvCheckForValidListAndQueue+0x6c>)
 8006450:	4a10      	ldr	r2, [pc, #64]	; (8006494 <prvCheckForValidListAndQueue+0x64>)
 8006452:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006454:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <prvCheckForValidListAndQueue+0x70>)
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <prvCheckForValidListAndQueue+0x68>)
 8006458:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800645a:	2300      	movs	r3, #0
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <prvCheckForValidListAndQueue+0x74>)
 8006460:	4a11      	ldr	r2, [pc, #68]	; (80064a8 <prvCheckForValidListAndQueue+0x78>)
 8006462:	2110      	movs	r1, #16
 8006464:	200a      	movs	r0, #10
 8006466:	f7fd ff27 	bl	80042b8 <xQueueGenericCreateStatic>
 800646a:	4603      	mov	r3, r0
 800646c:	4a08      	ldr	r2, [pc, #32]	; (8006490 <prvCheckForValidListAndQueue+0x60>)
 800646e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <prvCheckForValidListAndQueue+0x60>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <prvCheckForValidListAndQueue+0x60>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	490b      	ldr	r1, [pc, #44]	; (80064ac <prvCheckForValidListAndQueue+0x7c>)
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fb40 	bl	8004b04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006484:	f000 f96e 	bl	8006764 <vPortExitCritical>
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000d60 	.word	0x20000d60
 8006494:	20000d30 	.word	0x20000d30
 8006498:	20000d44 	.word	0x20000d44
 800649c:	20000d58 	.word	0x20000d58
 80064a0:	20000d5c 	.word	0x20000d5c
 80064a4:	20000e0c 	.word	0x20000e0c
 80064a8:	20000d6c 	.word	0x20000d6c
 80064ac:	08006f74 	.word	0x08006f74

080064b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3b04      	subs	r3, #4
 80064c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3b04      	subs	r3, #4
 80064ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f023 0201 	bic.w	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3b04      	subs	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064e0:	4a0c      	ldr	r2, [pc, #48]	; (8006514 <pxPortInitialiseStack+0x64>)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3b14      	subs	r3, #20
 80064ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3b04      	subs	r3, #4
 80064f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f06f 0202 	mvn.w	r2, #2
 80064fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3b20      	subs	r3, #32
 8006504:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006506:	68fb      	ldr	r3, [r7, #12]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	08006519 	.word	0x08006519

08006518 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <prvTaskExitError+0x54>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652a:	d00a      	beq.n	8006542 <prvTaskExitError+0x2a>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60fb      	str	r3, [r7, #12]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <prvTaskExitError+0x28>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	60bb      	str	r3, [r7, #8]
}
 8006554:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006556:	bf00      	nop
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0fc      	beq.n	8006558 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000018 	.word	0x20000018

08006570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <pxCurrentTCBConst2>)
 8006572:	6819      	ldr	r1, [r3, #0]
 8006574:	6808      	ldr	r0, [r1, #0]
 8006576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657a:	f380 8809 	msr	PSP, r0
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f04f 0000 	mov.w	r0, #0
 8006586:	f380 8811 	msr	BASEPRI, r0
 800658a:	4770      	bx	lr
 800658c:	f3af 8000 	nop.w

08006590 <pxCurrentTCBConst2>:
 8006590:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop

08006598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006598:	4808      	ldr	r0, [pc, #32]	; (80065bc <prvPortStartFirstTask+0x24>)
 800659a:	6800      	ldr	r0, [r0, #0]
 800659c:	6800      	ldr	r0, [r0, #0]
 800659e:	f380 8808 	msr	MSP, r0
 80065a2:	f04f 0000 	mov.w	r0, #0
 80065a6:	f380 8814 	msr	CONTROL, r0
 80065aa:	b662      	cpsie	i
 80065ac:	b661      	cpsie	f
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	df00      	svc	0
 80065b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065ba:	bf00      	nop
 80065bc:	e000ed08 	.word	0xe000ed08

080065c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065c6:	4b46      	ldr	r3, [pc, #280]	; (80066e0 <xPortStartScheduler+0x120>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a46      	ldr	r2, [pc, #280]	; (80066e4 <xPortStartScheduler+0x124>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d10a      	bne.n	80065e6 <xPortStartScheduler+0x26>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	613b      	str	r3, [r7, #16]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065e6:	4b3e      	ldr	r3, [pc, #248]	; (80066e0 <xPortStartScheduler+0x120>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a3f      	ldr	r2, [pc, #252]	; (80066e8 <xPortStartScheduler+0x128>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10a      	bne.n	8006606 <xPortStartScheduler+0x46>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60fb      	str	r3, [r7, #12]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006606:	4b39      	ldr	r3, [pc, #228]	; (80066ec <xPortStartScheduler+0x12c>)
 8006608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	22ff      	movs	r2, #255	; 0xff
 8006616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006628:	b2da      	uxtb	r2, r3
 800662a:	4b31      	ldr	r3, [pc, #196]	; (80066f0 <xPortStartScheduler+0x130>)
 800662c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800662e:	4b31      	ldr	r3, [pc, #196]	; (80066f4 <xPortStartScheduler+0x134>)
 8006630:	2207      	movs	r2, #7
 8006632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006634:	e009      	b.n	800664a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006636:	4b2f      	ldr	r3, [pc, #188]	; (80066f4 <xPortStartScheduler+0x134>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3b01      	subs	r3, #1
 800663c:	4a2d      	ldr	r2, [pc, #180]	; (80066f4 <xPortStartScheduler+0x134>)
 800663e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	d0ef      	beq.n	8006636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006656:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <xPortStartScheduler+0x134>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f1c3 0307 	rsb	r3, r3, #7
 800665e:	2b04      	cmp	r3, #4
 8006660:	d00a      	beq.n	8006678 <xPortStartScheduler+0xb8>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	60bb      	str	r3, [r7, #8]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006678:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <xPortStartScheduler+0x134>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <xPortStartScheduler+0x134>)
 8006680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <xPortStartScheduler+0x134>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800668a:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <xPortStartScheduler+0x134>)
 800668c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	b2da      	uxtb	r2, r3
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006696:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <xPortStartScheduler+0x138>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <xPortStartScheduler+0x138>)
 800669c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <xPortStartScheduler+0x138>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a14      	ldr	r2, [pc, #80]	; (80066f8 <xPortStartScheduler+0x138>)
 80066a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066ae:	f000 f8dd 	bl	800686c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <xPortStartScheduler+0x13c>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066b8:	f000 f8fc 	bl	80068b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066bc:	4b10      	ldr	r3, [pc, #64]	; (8006700 <xPortStartScheduler+0x140>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a0f      	ldr	r2, [pc, #60]	; (8006700 <xPortStartScheduler+0x140>)
 80066c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066c8:	f7ff ff66 	bl	8006598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066cc:	f7fe fe4a 	bl	8005364 <vTaskSwitchContext>
	prvTaskExitError();
 80066d0:	f7ff ff22 	bl	8006518 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	e000ed00 	.word	0xe000ed00
 80066e4:	410fc271 	.word	0x410fc271
 80066e8:	410fc270 	.word	0x410fc270
 80066ec:	e000e400 	.word	0xe000e400
 80066f0:	20000e5c 	.word	0x20000e5c
 80066f4:	20000e60 	.word	0x20000e60
 80066f8:	e000ed20 	.word	0xe000ed20
 80066fc:	20000018 	.word	0x20000018
 8006700:	e000ef34 	.word	0xe000ef34

08006704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	607b      	str	r3, [r7, #4]
}
 800671c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800671e:	4b0f      	ldr	r3, [pc, #60]	; (800675c <vPortEnterCritical+0x58>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a0d      	ldr	r2, [pc, #52]	; (800675c <vPortEnterCritical+0x58>)
 8006726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <vPortEnterCritical+0x58>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10f      	bne.n	8006750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006730:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <vPortEnterCritical+0x5c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <vPortEnterCritical+0x4c>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	603b      	str	r3, [r7, #0]
}
 800674c:	bf00      	nop
 800674e:	e7fe      	b.n	800674e <vPortEnterCritical+0x4a>
	}
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	20000018 	.word	0x20000018
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800676a:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <vPortExitCritical+0x50>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <vPortExitCritical+0x24>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	607b      	str	r3, [r7, #4]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <vPortExitCritical+0x50>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3b01      	subs	r3, #1
 800678e:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <vPortExitCritical+0x50>)
 8006790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006792:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <vPortExitCritical+0x50>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d105      	bne.n	80067a6 <vPortExitCritical+0x42>
 800679a:	2300      	movs	r3, #0
 800679c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	f383 8811 	msr	BASEPRI, r3
}
 80067a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20000018 	.word	0x20000018
	...

080067c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067c0:	f3ef 8009 	mrs	r0, PSP
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4b15      	ldr	r3, [pc, #84]	; (8006820 <pxCurrentTCBConst>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	f01e 0f10 	tst.w	lr, #16
 80067d0:	bf08      	it	eq
 80067d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067da:	6010      	str	r0, [r2, #0]
 80067dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067e4:	f380 8811 	msr	BASEPRI, r0
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f7fe fdb8 	bl	8005364 <vTaskSwitchContext>
 80067f4:	f04f 0000 	mov.w	r0, #0
 80067f8:	f380 8811 	msr	BASEPRI, r0
 80067fc:	bc09      	pop	{r0, r3}
 80067fe:	6819      	ldr	r1, [r3, #0]
 8006800:	6808      	ldr	r0, [r1, #0]
 8006802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006806:	f01e 0f10 	tst.w	lr, #16
 800680a:	bf08      	it	eq
 800680c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006810:	f380 8809 	msr	PSP, r0
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst>:
 8006820:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	607b      	str	r3, [r7, #4]
}
 8006840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006842:	f7fe fcd5 	bl	80051f0 <xTaskIncrementTick>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <xPortSysTickHandler+0x40>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f383 8811 	msr	BASEPRI, r3
}
 800685e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <vPortSetupTimerInterrupt+0x34>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006876:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <vPortSetupTimerInterrupt+0x38>)
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800687c:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <vPortSetupTimerInterrupt+0x3c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <vPortSetupTimerInterrupt+0x40>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <vPortSetupTimerInterrupt+0x44>)
 800688a:	3b01      	subs	r3, #1
 800688c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800688e:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <vPortSetupTimerInterrupt+0x34>)
 8006890:	2207      	movs	r2, #7
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	e000e010 	.word	0xe000e010
 80068a4:	e000e018 	.word	0xe000e018
 80068a8:	2000000c 	.word	0x2000000c
 80068ac:	10624dd3 	.word	0x10624dd3
 80068b0:	e000e014 	.word	0xe000e014

080068b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80068c4 <vPortEnableVFP+0x10>
 80068b8:	6801      	ldr	r1, [r0, #0]
 80068ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80068be:	6001      	str	r1, [r0, #0]
 80068c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068c2:	bf00      	nop
 80068c4:	e000ed88 	.word	0xe000ed88

080068c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068ce:	f3ef 8305 	mrs	r3, IPSR
 80068d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b0f      	cmp	r3, #15
 80068d8:	d914      	bls.n	8006904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068da:	4a17      	ldr	r2, [pc, #92]	; (8006938 <vPortValidateInterruptPriority+0x70>)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068e4:	4b15      	ldr	r3, [pc, #84]	; (800693c <vPortValidateInterruptPriority+0x74>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	7afa      	ldrb	r2, [r7, #11]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d20a      	bcs.n	8006904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	607b      	str	r3, [r7, #4]
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006904:	4b0e      	ldr	r3, [pc, #56]	; (8006940 <vPortValidateInterruptPriority+0x78>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800690c:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <vPortValidateInterruptPriority+0x7c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d90a      	bls.n	800692a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	603b      	str	r3, [r7, #0]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <vPortValidateInterruptPriority+0x60>
	}
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	e000e3f0 	.word	0xe000e3f0
 800693c:	20000e5c 	.word	0x20000e5c
 8006940:	e000ed0c 	.word	0xe000ed0c
 8006944:	20000e60 	.word	0x20000e60

08006948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08a      	sub	sp, #40	; 0x28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006954:	f7fe fb90 	bl	8005078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006958:	4b5b      	ldr	r3, [pc, #364]	; (8006ac8 <pvPortMalloc+0x180>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006960:	f000 f920 	bl	8006ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006964:	4b59      	ldr	r3, [pc, #356]	; (8006acc <pvPortMalloc+0x184>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	f040 8093 	bne.w	8006a98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01d      	beq.n	80069b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006978:	2208      	movs	r2, #8
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	2b00      	cmp	r3, #0
 8006988:	d014      	beq.n	80069b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f023 0307 	bic.w	r3, r3, #7
 8006990:	3308      	adds	r3, #8
 8006992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <pvPortMalloc+0x6c>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	617b      	str	r3, [r7, #20]
}
 80069b0:	bf00      	nop
 80069b2:	e7fe      	b.n	80069b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d06e      	beq.n	8006a98 <pvPortMalloc+0x150>
 80069ba:	4b45      	ldr	r3, [pc, #276]	; (8006ad0 <pvPortMalloc+0x188>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d869      	bhi.n	8006a98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069c4:	4b43      	ldr	r3, [pc, #268]	; (8006ad4 <pvPortMalloc+0x18c>)
 80069c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069c8:	4b42      	ldr	r3, [pc, #264]	; (8006ad4 <pvPortMalloc+0x18c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069ce:	e004      	b.n	80069da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d903      	bls.n	80069ec <pvPortMalloc+0xa4>
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1f1      	bne.n	80069d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069ec:	4b36      	ldr	r3, [pc, #216]	; (8006ac8 <pvPortMalloc+0x180>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d050      	beq.n	8006a98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2208      	movs	r2, #8
 80069fc:	4413      	add	r3, r2
 80069fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	1ad2      	subs	r2, r2, r3
 8006a10:	2308      	movs	r3, #8
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d91f      	bls.n	8006a58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <pvPortMalloc+0xf8>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	613b      	str	r3, [r7, #16]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	1ad2      	subs	r2, r2, r3
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a52:	69b8      	ldr	r0, [r7, #24]
 8006a54:	f000 f908 	bl	8006c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <pvPortMalloc+0x188>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	4a1b      	ldr	r2, [pc, #108]	; (8006ad0 <pvPortMalloc+0x188>)
 8006a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a66:	4b1a      	ldr	r3, [pc, #104]	; (8006ad0 <pvPortMalloc+0x188>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <pvPortMalloc+0x190>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d203      	bcs.n	8006a7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a72:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <pvPortMalloc+0x188>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <pvPortMalloc+0x190>)
 8006a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	4b13      	ldr	r3, [pc, #76]	; (8006acc <pvPortMalloc+0x184>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a8e:	4b13      	ldr	r3, [pc, #76]	; (8006adc <pvPortMalloc+0x194>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	4a11      	ldr	r2, [pc, #68]	; (8006adc <pvPortMalloc+0x194>)
 8006a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a98:	f7fe fafc 	bl	8005094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <pvPortMalloc+0x174>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	60fb      	str	r3, [r7, #12]
}
 8006ab8:	bf00      	nop
 8006aba:	e7fe      	b.n	8006aba <pvPortMalloc+0x172>
	return pvReturn;
 8006abc:	69fb      	ldr	r3, [r7, #28]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3728      	adds	r7, #40	; 0x28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20004a6c 	.word	0x20004a6c
 8006acc:	20004a80 	.word	0x20004a80
 8006ad0:	20004a70 	.word	0x20004a70
 8006ad4:	20004a64 	.word	0x20004a64
 8006ad8:	20004a74 	.word	0x20004a74
 8006adc:	20004a78 	.word	0x20004a78

08006ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d04d      	beq.n	8006b8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006af2:	2308      	movs	r3, #8
 8006af4:	425b      	negs	r3, r3
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4413      	add	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	4b24      	ldr	r3, [pc, #144]	; (8006b98 <vPortFree+0xb8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <vPortFree+0x44>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	60fb      	str	r3, [r7, #12]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <vPortFree+0x62>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60bb      	str	r3, [r7, #8]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	4b14      	ldr	r3, [pc, #80]	; (8006b98 <vPortFree+0xb8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01e      	beq.n	8006b8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d11a      	bne.n	8006b8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <vPortFree+0xb8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	43db      	mvns	r3, r3
 8006b62:	401a      	ands	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b68:	f7fe fa86 	bl	8005078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <vPortFree+0xbc>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4413      	add	r3, r2
 8006b76:	4a09      	ldr	r2, [pc, #36]	; (8006b9c <vPortFree+0xbc>)
 8006b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b7a:	6938      	ldr	r0, [r7, #16]
 8006b7c:	f000 f874 	bl	8006c68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b80:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <vPortFree+0xc0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3301      	adds	r3, #1
 8006b86:	4a06      	ldr	r2, [pc, #24]	; (8006ba0 <vPortFree+0xc0>)
 8006b88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b8a:	f7fe fa83 	bl	8005094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b8e:	bf00      	nop
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20004a80 	.word	0x20004a80
 8006b9c:	20004a70 	.word	0x20004a70
 8006ba0:	20004a7c 	.word	0x20004a7c

08006ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006baa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bb0:	4b27      	ldr	r3, [pc, #156]	; (8006c50 <prvHeapInit+0xac>)
 8006bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00c      	beq.n	8006bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0307 	bic.w	r3, r3, #7
 8006bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <prvHeapInit+0xac>)
 8006bd4:	4413      	add	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bdc:	4a1d      	ldr	r2, [pc, #116]	; (8006c54 <prvHeapInit+0xb0>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006be2:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <prvHeapInit+0xb0>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	4413      	add	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0307 	bic.w	r3, r3, #7
 8006bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <prvHeapInit+0xb4>)
 8006c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c06:	4b14      	ldr	r3, [pc, #80]	; (8006c58 <prvHeapInit+0xb4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c0e:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <prvHeapInit+0xb4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	1ad2      	subs	r2, r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c24:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <prvHeapInit+0xb4>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a0a      	ldr	r2, [pc, #40]	; (8006c5c <prvHeapInit+0xb8>)
 8006c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <prvHeapInit+0xbc>)
 8006c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c3c:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <prvHeapInit+0xc0>)
 8006c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c42:	601a      	str	r2, [r3, #0]
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20000e64 	.word	0x20000e64
 8006c54:	20004a64 	.word	0x20004a64
 8006c58:	20004a6c 	.word	0x20004a6c
 8006c5c:	20004a74 	.word	0x20004a74
 8006c60:	20004a70 	.word	0x20004a70
 8006c64:	20004a80 	.word	0x20004a80

08006c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c70:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <prvInsertBlockIntoFreeList+0xac>)
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e002      	b.n	8006c7c <prvInsertBlockIntoFreeList+0x14>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d8f7      	bhi.n	8006c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d108      	bne.n	8006caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	441a      	add	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	441a      	add	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d118      	bne.n	8006cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <prvInsertBlockIntoFreeList+0xb0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d00d      	beq.n	8006ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	441a      	add	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e008      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e003      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d002      	beq.n	8006d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20004a64 	.word	0x20004a64
 8006d18:	20004a6c 	.word	0x20004a6c

08006d1c <__libc_init_array>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	4d0d      	ldr	r5, [pc, #52]	; (8006d54 <__libc_init_array+0x38>)
 8006d20:	4c0d      	ldr	r4, [pc, #52]	; (8006d58 <__libc_init_array+0x3c>)
 8006d22:	1b64      	subs	r4, r4, r5
 8006d24:	10a4      	asrs	r4, r4, #2
 8006d26:	2600      	movs	r6, #0
 8006d28:	42a6      	cmp	r6, r4
 8006d2a:	d109      	bne.n	8006d40 <__libc_init_array+0x24>
 8006d2c:	4d0b      	ldr	r5, [pc, #44]	; (8006d5c <__libc_init_array+0x40>)
 8006d2e:	4c0c      	ldr	r4, [pc, #48]	; (8006d60 <__libc_init_array+0x44>)
 8006d30:	f000 f8f6 	bl	8006f20 <_init>
 8006d34:	1b64      	subs	r4, r4, r5
 8006d36:	10a4      	asrs	r4, r4, #2
 8006d38:	2600      	movs	r6, #0
 8006d3a:	42a6      	cmp	r6, r4
 8006d3c:	d105      	bne.n	8006d4a <__libc_init_array+0x2e>
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d44:	4798      	blx	r3
 8006d46:	3601      	adds	r6, #1
 8006d48:	e7ee      	b.n	8006d28 <__libc_init_array+0xc>
 8006d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4e:	4798      	blx	r3
 8006d50:	3601      	adds	r6, #1
 8006d52:	e7f2      	b.n	8006d3a <__libc_init_array+0x1e>
 8006d54:	08007068 	.word	0x08007068
 8006d58:	08007068 	.word	0x08007068
 8006d5c:	08007068 	.word	0x08007068
 8006d60:	0800706c 	.word	0x0800706c

08006d64 <__retarget_lock_acquire_recursive>:
 8006d64:	4770      	bx	lr

08006d66 <__retarget_lock_release_recursive>:
 8006d66:	4770      	bx	lr

08006d68 <memcpy>:
 8006d68:	440a      	add	r2, r1
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d70:	d100      	bne.n	8006d74 <memcpy+0xc>
 8006d72:	4770      	bx	lr
 8006d74:	b510      	push	{r4, lr}
 8006d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	d1f9      	bne.n	8006d76 <memcpy+0xe>
 8006d82:	bd10      	pop	{r4, pc}

08006d84 <memset>:
 8006d84:	4402      	add	r2, r0
 8006d86:	4603      	mov	r3, r0
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d100      	bne.n	8006d8e <memset+0xa>
 8006d8c:	4770      	bx	lr
 8006d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d92:	e7f9      	b.n	8006d88 <memset+0x4>

08006d94 <cleanup_glue>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	460c      	mov	r4, r1
 8006d98:	6809      	ldr	r1, [r1, #0]
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	b109      	cbz	r1, 8006da2 <cleanup_glue+0xe>
 8006d9e:	f7ff fff9 	bl	8006d94 <cleanup_glue>
 8006da2:	4621      	mov	r1, r4
 8006da4:	4628      	mov	r0, r5
 8006da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006daa:	f000 b869 	b.w	8006e80 <_free_r>
	...

08006db0 <_reclaim_reent>:
 8006db0:	4b2c      	ldr	r3, [pc, #176]	; (8006e64 <_reclaim_reent+0xb4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4283      	cmp	r3, r0
 8006db6:	b570      	push	{r4, r5, r6, lr}
 8006db8:	4604      	mov	r4, r0
 8006dba:	d051      	beq.n	8006e60 <_reclaim_reent+0xb0>
 8006dbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006dbe:	b143      	cbz	r3, 8006dd2 <_reclaim_reent+0x22>
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d14a      	bne.n	8006e5c <_reclaim_reent+0xac>
 8006dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dc8:	6819      	ldr	r1, [r3, #0]
 8006dca:	b111      	cbz	r1, 8006dd2 <_reclaim_reent+0x22>
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 f857 	bl	8006e80 <_free_r>
 8006dd2:	6961      	ldr	r1, [r4, #20]
 8006dd4:	b111      	cbz	r1, 8006ddc <_reclaim_reent+0x2c>
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 f852 	bl	8006e80 <_free_r>
 8006ddc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006dde:	b111      	cbz	r1, 8006de6 <_reclaim_reent+0x36>
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 f84d 	bl	8006e80 <_free_r>
 8006de6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006de8:	b111      	cbz	r1, 8006df0 <_reclaim_reent+0x40>
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f848 	bl	8006e80 <_free_r>
 8006df0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006df2:	b111      	cbz	r1, 8006dfa <_reclaim_reent+0x4a>
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f843 	bl	8006e80 <_free_r>
 8006dfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006dfc:	b111      	cbz	r1, 8006e04 <_reclaim_reent+0x54>
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 f83e 	bl	8006e80 <_free_r>
 8006e04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006e06:	b111      	cbz	r1, 8006e0e <_reclaim_reent+0x5e>
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 f839 	bl	8006e80 <_free_r>
 8006e0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006e10:	b111      	cbz	r1, 8006e18 <_reclaim_reent+0x68>
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 f834 	bl	8006e80 <_free_r>
 8006e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e1a:	b111      	cbz	r1, 8006e22 <_reclaim_reent+0x72>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 f82f 	bl	8006e80 <_free_r>
 8006e22:	69a3      	ldr	r3, [r4, #24]
 8006e24:	b1e3      	cbz	r3, 8006e60 <_reclaim_reent+0xb0>
 8006e26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006e28:	4620      	mov	r0, r4
 8006e2a:	4798      	blx	r3
 8006e2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006e2e:	b1b9      	cbz	r1, 8006e60 <_reclaim_reent+0xb0>
 8006e30:	4620      	mov	r0, r4
 8006e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e36:	f7ff bfad 	b.w	8006d94 <cleanup_glue>
 8006e3a:	5949      	ldr	r1, [r1, r5]
 8006e3c:	b941      	cbnz	r1, 8006e50 <_reclaim_reent+0xa0>
 8006e3e:	3504      	adds	r5, #4
 8006e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e42:	2d80      	cmp	r5, #128	; 0x80
 8006e44:	68d9      	ldr	r1, [r3, #12]
 8006e46:	d1f8      	bne.n	8006e3a <_reclaim_reent+0x8a>
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 f819 	bl	8006e80 <_free_r>
 8006e4e:	e7ba      	b.n	8006dc6 <_reclaim_reent+0x16>
 8006e50:	680e      	ldr	r6, [r1, #0]
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 f814 	bl	8006e80 <_free_r>
 8006e58:	4631      	mov	r1, r6
 8006e5a:	e7ef      	b.n	8006e3c <_reclaim_reent+0x8c>
 8006e5c:	2500      	movs	r5, #0
 8006e5e:	e7ef      	b.n	8006e40 <_reclaim_reent+0x90>
 8006e60:	bd70      	pop	{r4, r5, r6, pc}
 8006e62:	bf00      	nop
 8006e64:	2000001c 	.word	0x2000001c

08006e68 <__malloc_lock>:
 8006e68:	4801      	ldr	r0, [pc, #4]	; (8006e70 <__malloc_lock+0x8>)
 8006e6a:	f7ff bf7b 	b.w	8006d64 <__retarget_lock_acquire_recursive>
 8006e6e:	bf00      	nop
 8006e70:	20004c18 	.word	0x20004c18

08006e74 <__malloc_unlock>:
 8006e74:	4801      	ldr	r0, [pc, #4]	; (8006e7c <__malloc_unlock+0x8>)
 8006e76:	f7ff bf76 	b.w	8006d66 <__retarget_lock_release_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20004c18 	.word	0x20004c18

08006e80 <_free_r>:
 8006e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e82:	2900      	cmp	r1, #0
 8006e84:	d048      	beq.n	8006f18 <_free_r+0x98>
 8006e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e8a:	9001      	str	r0, [sp, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e92:	bfb8      	it	lt
 8006e94:	18e4      	addlt	r4, r4, r3
 8006e96:	f7ff ffe7 	bl	8006e68 <__malloc_lock>
 8006e9a:	4a20      	ldr	r2, [pc, #128]	; (8006f1c <_free_r+0x9c>)
 8006e9c:	9801      	ldr	r0, [sp, #4]
 8006e9e:	6813      	ldr	r3, [r2, #0]
 8006ea0:	4615      	mov	r5, r2
 8006ea2:	b933      	cbnz	r3, 8006eb2 <_free_r+0x32>
 8006ea4:	6063      	str	r3, [r4, #4]
 8006ea6:	6014      	str	r4, [r2, #0]
 8006ea8:	b003      	add	sp, #12
 8006eaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eae:	f7ff bfe1 	b.w	8006e74 <__malloc_unlock>
 8006eb2:	42a3      	cmp	r3, r4
 8006eb4:	d90b      	bls.n	8006ece <_free_r+0x4e>
 8006eb6:	6821      	ldr	r1, [r4, #0]
 8006eb8:	1862      	adds	r2, r4, r1
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	bf04      	itt	eq
 8006ebe:	681a      	ldreq	r2, [r3, #0]
 8006ec0:	685b      	ldreq	r3, [r3, #4]
 8006ec2:	6063      	str	r3, [r4, #4]
 8006ec4:	bf04      	itt	eq
 8006ec6:	1852      	addeq	r2, r2, r1
 8006ec8:	6022      	streq	r2, [r4, #0]
 8006eca:	602c      	str	r4, [r5, #0]
 8006ecc:	e7ec      	b.n	8006ea8 <_free_r+0x28>
 8006ece:	461a      	mov	r2, r3
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	b10b      	cbz	r3, 8006ed8 <_free_r+0x58>
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d9fa      	bls.n	8006ece <_free_r+0x4e>
 8006ed8:	6811      	ldr	r1, [r2, #0]
 8006eda:	1855      	adds	r5, r2, r1
 8006edc:	42a5      	cmp	r5, r4
 8006ede:	d10b      	bne.n	8006ef8 <_free_r+0x78>
 8006ee0:	6824      	ldr	r4, [r4, #0]
 8006ee2:	4421      	add	r1, r4
 8006ee4:	1854      	adds	r4, r2, r1
 8006ee6:	42a3      	cmp	r3, r4
 8006ee8:	6011      	str	r1, [r2, #0]
 8006eea:	d1dd      	bne.n	8006ea8 <_free_r+0x28>
 8006eec:	681c      	ldr	r4, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	6053      	str	r3, [r2, #4]
 8006ef2:	4421      	add	r1, r4
 8006ef4:	6011      	str	r1, [r2, #0]
 8006ef6:	e7d7      	b.n	8006ea8 <_free_r+0x28>
 8006ef8:	d902      	bls.n	8006f00 <_free_r+0x80>
 8006efa:	230c      	movs	r3, #12
 8006efc:	6003      	str	r3, [r0, #0]
 8006efe:	e7d3      	b.n	8006ea8 <_free_r+0x28>
 8006f00:	6825      	ldr	r5, [r4, #0]
 8006f02:	1961      	adds	r1, r4, r5
 8006f04:	428b      	cmp	r3, r1
 8006f06:	bf04      	itt	eq
 8006f08:	6819      	ldreq	r1, [r3, #0]
 8006f0a:	685b      	ldreq	r3, [r3, #4]
 8006f0c:	6063      	str	r3, [r4, #4]
 8006f0e:	bf04      	itt	eq
 8006f10:	1949      	addeq	r1, r1, r5
 8006f12:	6021      	streq	r1, [r4, #0]
 8006f14:	6054      	str	r4, [r2, #4]
 8006f16:	e7c7      	b.n	8006ea8 <_free_r+0x28>
 8006f18:	b003      	add	sp, #12
 8006f1a:	bd30      	pop	{r4, r5, pc}
 8006f1c:	20004a84 	.word	0x20004a84

08006f20 <_init>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	bf00      	nop
 8006f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f26:	bc08      	pop	{r3}
 8006f28:	469e      	mov	lr, r3
 8006f2a:	4770      	bx	lr

08006f2c <_fini>:
 8006f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2e:	bf00      	nop
 8006f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f32:	bc08      	pop	{r3}
 8006f34:	469e      	mov	lr, r3
 8006f36:	4770      	bx	lr
