
Drivetrain_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008568  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008718  08008718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008840  08008840  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008840  08008840  00018840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008848  08008848  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008848  08008848  00018848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800884c  0800884c  0001884c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00004cb8  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d40  20004d40  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f651  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003719  00000000  00000000  0003f709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  00042e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f8  00000000  00000000  00044548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e26  00000000  00000000  00045b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ae0  00000000  00000000  00049966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e939c  00000000  00000000  00062446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b7e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065bc  00000000  00000000  0014b838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008700 	.word	0x08008700

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08008700 	.word	0x08008700

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f001 f8e8 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f8ea 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 fb14 	bl	8000b20 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004f8:	f000 f9a6 	bl	8000848 <MX_SPI1_Init>
  MX_TIM1_Init();
 80004fc:	f000 fa10 	bl	8000920 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000500:	f000 f94e 	bl	80007a0 <MX_CAN1_Init>
  MX_SPI2_Init();
 8000504:	f000 f9d6 	bl	80008b4 <MX_SPI2_Init>
  MX_UART4_Init();
 8000508:	f000 fab6 	bl	8000a78 <MX_UART4_Init>
  MX_UART5_Init();
 800050c:	f000 fade 	bl	8000acc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000510:	2104      	movs	r1, #4
 8000512:	4857      	ldr	r0, [pc, #348]	; (8000670 <main+0x188>)
 8000514:	f003 fcd2 	bl	8003ebc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000518:	2108      	movs	r1, #8
 800051a:	4855      	ldr	r0, [pc, #340]	; (8000670 <main+0x188>)
 800051c:	f003 fcce 	bl	8003ebc <HAL_TIM_PWM_Start>

  HAL_CAN_Start(&hcan1);
 8000520:	4854      	ldr	r0, [pc, #336]	; (8000674 <main+0x18c>)
 8000522:	f001 fb0f 	bl	8001b44 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000526:	2102      	movs	r1, #2
 8000528:	4852      	ldr	r0, [pc, #328]	; (8000674 <main+0x18c>)
 800052a:	f001 fc61 	bl	8001df0 <HAL_CAN_ActivateNotification>

  HAL_Delay(10);
 800052e:	200a      	movs	r0, #10
 8000530:	f001 f908 	bl	8001744 <HAL_Delay>

  // INITIALIZE PIN STATE AS HIGH FOR ENCODER 1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2110      	movs	r1, #16
 8000538:	484f      	ldr	r0, [pc, #316]	; (8000678 <main+0x190>)
 800053a:	f002 f93d 	bl	80027b8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800053e:	200a      	movs	r0, #10
 8000540:	f001 f900 	bl	8001744 <HAL_Delay>

  // INITIALIZE PIN STATE AS HIGH FOR ENCODER 2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054a:	484c      	ldr	r0, [pc, #304]	; (800067c <main+0x194>)
 800054c:	f002 f934 	bl	80027b8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000550:	200a      	movs	r0, #10
 8000552:	f001 f8f7 	bl	8001744 <HAL_Delay>

  // READ INITAL ANGLE OFFSET ENCODER 1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2110      	movs	r1, #16
 800055a:	4847      	ldr	r0, [pc, #284]	; (8000678 <main+0x190>)
 800055c:	f002 f92c 	bl	80027b8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SPI_tx1[0], 2, 1);
 8000560:	2301      	movs	r3, #1
 8000562:	2202      	movs	r2, #2
 8000564:	4946      	ldr	r1, [pc, #280]	; (8000680 <main+0x198>)
 8000566:	4847      	ldr	r0, [pc, #284]	; (8000684 <main+0x19c>)
 8000568:	f002 fe6f 	bl	800324a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	4841      	ldr	r0, [pc, #260]	; (8000678 <main+0x190>)
 8000572:	f002 f921 	bl	80027b8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000576:	200a      	movs	r0, #10
 8000578:	f001 f8e4 	bl	8001744 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2110      	movs	r1, #16
 8000580:	483d      	ldr	r0, [pc, #244]	; (8000678 <main+0x190>)
 8000582:	f002 f919 	bl	80027b8 <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&hspi1, &SPI_rx1[0], 2, 1);
 8000586:	2301      	movs	r3, #1
 8000588:	2202      	movs	r2, #2
 800058a:	493f      	ldr	r1, [pc, #252]	; (8000688 <main+0x1a0>)
 800058c:	483d      	ldr	r0, [pc, #244]	; (8000684 <main+0x19c>)
 800058e:	f002 ff98 	bl	80034c2 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2110      	movs	r1, #16
 8000596:	4838      	ldr	r0, [pc, #224]	; (8000678 <main+0x190>)
 8000598:	f002 f90e 	bl	80027b8 <HAL_GPIO_WritePin>
  INITIAL_ANGLE_1 = (SPI_rx1[0] << 8 | SPI_rx1[1])&clearbits;
 800059c:	4b3a      	ldr	r3, [pc, #232]	; (8000688 <main+0x1a0>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	b21a      	sxth	r2, r3
 80005a4:	4b38      	ldr	r3, [pc, #224]	; (8000688 <main+0x1a0>)
 80005a6:	785b      	ldrb	r3, [r3, #1]
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	4b37      	ldr	r3, [pc, #220]	; (800068c <main+0x1a4>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	4013      	ands	r3, r2
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	4b35      	ldr	r3, [pc, #212]	; (8000690 <main+0x1a8>)
 80005bc:	801a      	strh	r2, [r3, #0]
  HAL_Delay(10);
 80005be:	200a      	movs	r0, #10
 80005c0:	f001 f8c0 	bl	8001744 <HAL_Delay>

  // READ INITAL ANGLE OFFSET ENCODER 2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ca:	482c      	ldr	r0, [pc, #176]	; (800067c <main+0x194>)
 80005cc:	f002 f8f4 	bl	80027b8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &SPI_tx2[0], 2, 1);
 80005d0:	2301      	movs	r3, #1
 80005d2:	2202      	movs	r2, #2
 80005d4:	492f      	ldr	r1, [pc, #188]	; (8000694 <main+0x1ac>)
 80005d6:	4830      	ldr	r0, [pc, #192]	; (8000698 <main+0x1b0>)
 80005d8:	f002 fe37 	bl	800324a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e2:	4826      	ldr	r0, [pc, #152]	; (800067c <main+0x194>)
 80005e4:	f002 f8e8 	bl	80027b8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f001 f8ab 	bl	8001744 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f4:	4821      	ldr	r0, [pc, #132]	; (800067c <main+0x194>)
 80005f6:	f002 f8df 	bl	80027b8 <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&hspi2, &SPI_rx2[0], 2, 1);
 80005fa:	2301      	movs	r3, #1
 80005fc:	2202      	movs	r2, #2
 80005fe:	4927      	ldr	r1, [pc, #156]	; (800069c <main+0x1b4>)
 8000600:	4825      	ldr	r0, [pc, #148]	; (8000698 <main+0x1b0>)
 8000602:	f002 ff5e 	bl	80034c2 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060c:	481b      	ldr	r0, [pc, #108]	; (800067c <main+0x194>)
 800060e:	f002 f8d3 	bl	80027b8 <HAL_GPIO_WritePin>
  INITIAL_ANGLE_2 = (SPI_rx2[0] << 8 | SPI_rx2[1])&clearbits;
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <main+0x1b4>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21a      	sxth	r2, r3
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <main+0x1b4>)
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	b21b      	sxth	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <main+0x1a4>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	b21b      	sxth	r3, r3
 800062a:	4013      	ands	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <main+0x1b8>)
 8000632:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000634:	f004 ff18 	bl	8005468 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartEncoder */
  StartEncoderHandle = osThreadNew(ReadEncoder, NULL, &StartEncoder_attributes);
 8000638:	4a1a      	ldr	r2, [pc, #104]	; (80006a4 <main+0x1bc>)
 800063a:	2100      	movs	r1, #0
 800063c:	481a      	ldr	r0, [pc, #104]	; (80006a8 <main+0x1c0>)
 800063e:	f004 ff5d 	bl	80054fc <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a19      	ldr	r2, [pc, #100]	; (80006ac <main+0x1c4>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of StartStepper */
  StartStepperHandle = osThreadNew(ControlStepper, NULL, &StartStepper_attributes);
 8000648:	4a19      	ldr	r2, [pc, #100]	; (80006b0 <main+0x1c8>)
 800064a:	2100      	movs	r1, #0
 800064c:	4819      	ldr	r0, [pc, #100]	; (80006b4 <main+0x1cc>)
 800064e:	f004 ff55 	bl	80054fc <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <main+0x1d0>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of startThrust */
  startThrustHandle = osThreadNew(ControlThrust, NULL, &startThrust_attributes);
 8000658:	4a18      	ldr	r2, [pc, #96]	; (80006bc <main+0x1d4>)
 800065a:	2100      	movs	r1, #0
 800065c:	4818      	ldr	r0, [pc, #96]	; (80006c0 <main+0x1d8>)
 800065e:	f004 ff4d 	bl	80054fc <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <main+0x1dc>)
 8000666:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000668:	f004 ff22 	bl	80054b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x184>
 800066e:	bf00      	nop
 8000670:	20004b58 	.word	0x20004b58
 8000674:	20004c4c 	.word	0x20004c4c
 8000678:	40020000 	.word	0x40020000
 800067c:	40020400 	.word	0x40020400
 8000680:	20000000 	.word	0x20000000
 8000684:	20004bf0 	.word	0x20004bf0
 8000688:	20004b0c 	.word	0x20004b0c
 800068c:	2000000e 	.word	0x2000000e
 8000690:	200000a4 	.word	0x200000a4
 8000694:	20000004 	.word	0x20000004
 8000698:	20004a94 	.word	0x20004a94
 800069c:	20004b54 	.word	0x20004b54
 80006a0:	200000ac 	.word	0x200000ac
 80006a4:	0800875c 	.word	0x0800875c
 80006a8:	08000d21 	.word	0x08000d21
 80006ac:	20004ba8 	.word	0x20004ba8
 80006b0:	08008780 	.word	0x08008780
 80006b4:	08000f81 	.word	0x08000f81
 80006b8:	20004b08 	.word	0x20004b08
 80006bc:	080087a4 	.word	0x080087a4
 80006c0:	080010c9 	.word	0x080010c9
 80006c4:	20004ba0 	.word	0x20004ba0

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f007 ff44 	bl	8008564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000740:	2350      	movs	r3, #80	; 0x50
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000748:	2307      	movs	r3, #7
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f002 f84b 	bl	80027ec <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800075c:	f000 fcf8 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f002 faac 	bl	8002cdc <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 fce1 	bl	8001150 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007a8:	4a26      	ldr	r2, [pc, #152]	; (8000844 <MX_CAN1_Init+0xa4>)
 80007aa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007ae:	2210      	movs	r2, #16
 80007b0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007c4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007cc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007f2:	4813      	ldr	r0, [pc, #76]	; (8000840 <MX_CAN1_Init+0xa0>)
 80007f4:	f000 ffca 	bl	800178c <HAL_CAN_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80007fe:	f000 fca7 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  //CAN FILTER CONFIGURATION
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x200<<5;
 800080e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000812:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x110<<5;
 8000818:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800081c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;
 800082a:	2314      	movs	r3, #20
 800082c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	4803      	ldr	r0, [pc, #12]	; (8000840 <MX_CAN1_Init+0xa0>)
 8000834:	f001 f8a6 	bl	8001984 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20004c4c 	.word	0x20004c4c
 8000844:	40006400 	.word	0x40006400

08000848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_SPI1_Init+0x64>)
 800084e:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <MX_SPI1_Init+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_SPI1_Init+0x64>)
 8000854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_SPI1_Init+0x64>)
 800086e:	2201      	movs	r2, #1
 8000870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_SPI1_Init+0x64>)
 8000874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_SPI1_Init+0x64>)
 800087c:	2218      	movs	r2, #24
 800087e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_SPI1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_SPI1_Init+0x64>)
 8000894:	220a      	movs	r2, #10
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_SPI1_Init+0x64>)
 800089a:	f002 fc4d 	bl	8003138 <HAL_SPI_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a4:	f000 fc54 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20004bf0 	.word	0x20004bf0
 80008b0:	40013000 	.word	0x40013000

080008b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_SPI2_Init+0x64>)
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <MX_SPI2_Init+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_SPI2_Init+0x64>)
 80008c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_SPI2_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_SPI2_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_SPI2_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_SPI2_Init+0x64>)
 80008da:	2201      	movs	r2, #1
 80008dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_SPI2_Init+0x64>)
 80008e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_SPI2_Init+0x64>)
 80008e8:	2218      	movs	r2, #24
 80008ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_SPI2_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_SPI2_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_SPI2_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_SPI2_Init+0x64>)
 8000900:	220a      	movs	r2, #10
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_SPI2_Init+0x64>)
 8000906:	f002 fc17 	bl	8003138 <HAL_SPI_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000910:	f000 fc1e 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20004a94 	.word	0x20004a94
 800091c:	40003800 	.word	0x40003800

08000920 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b096      	sub	sp, #88	; 0x58
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2220      	movs	r2, #32
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f007 fe03 	bl	8008564 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800095e:	4b44      	ldr	r3, [pc, #272]	; (8000a70 <MX_TIM1_Init+0x150>)
 8000960:	4a44      	ldr	r2, [pc, #272]	; (8000a74 <MX_TIM1_Init+0x154>)
 8000962:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000964:	4b42      	ldr	r3, [pc, #264]	; (8000a70 <MX_TIM1_Init+0x150>)
 8000966:	2201      	movs	r2, #1
 8000968:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <MX_TIM1_Init+0x150>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000970:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <MX_TIM1_Init+0x150>)
 8000972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000976:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b3d      	ldr	r3, [pc, #244]	; (8000a70 <MX_TIM1_Init+0x150>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800097e:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <MX_TIM1_Init+0x150>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000984:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <MX_TIM1_Init+0x150>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800098a:	4839      	ldr	r0, [pc, #228]	; (8000a70 <MX_TIM1_Init+0x150>)
 800098c:	f003 f97c 	bl	8003c88 <HAL_TIM_Base_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000996:	f000 fbdb 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009a4:	4619      	mov	r1, r3
 80009a6:	4832      	ldr	r0, [pc, #200]	; (8000a70 <MX_TIM1_Init+0x150>)
 80009a8:	f003 fd1a 	bl	80043e0 <HAL_TIM_ConfigClockSource>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009b2:	f000 fbcd 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009b6:	482e      	ldr	r0, [pc, #184]	; (8000a70 <MX_TIM1_Init+0x150>)
 80009b8:	f003 fa26 	bl	8003e08 <HAL_TIM_PWM_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009c2:	f000 fbc5 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009d2:	4619      	mov	r1, r3
 80009d4:	4826      	ldr	r0, [pc, #152]	; (8000a70 <MX_TIM1_Init+0x150>)
 80009d6:	f004 f903 	bl	8004be0 <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009e0:	f000 fbb6 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e4:	2360      	movs	r3, #96	; 0x60
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	2204      	movs	r2, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4819      	ldr	r0, [pc, #100]	; (8000a70 <MX_TIM1_Init+0x150>)
 8000a0a:	f003 fc27 	bl	800425c <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a14:	f000 fb9c 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4813      	ldr	r0, [pc, #76]	; (8000a70 <MX_TIM1_Init+0x150>)
 8000a22:	f003 fc1b 	bl	800425c <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a2c:	f000 fb90 	bl	8001150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <MX_TIM1_Init+0x150>)
 8000a54:	f004 f940 	bl	8004cd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a5e:	f000 fb77 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <MX_TIM1_Init+0x150>)
 8000a64:	f000 fcb4 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8000a68:	bf00      	nop
 8000a6a:	3758      	adds	r7, #88	; 0x58
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20004b58 	.word	0x20004b58
 8000a74:	40010000 	.word	0x40010000

08000a78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_UART4_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_UART4_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_UART4_Init+0x4c>)
 8000a84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_UART4_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_UART4_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_UART4_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_UART4_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_UART4_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_UART4_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_UART4_Init+0x4c>)
 8000ab0:	f004 f978 	bl	8004da4 <HAL_HalfDuplex_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000aba:	f000 fb49 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20004bac 	.word	0x20004bac
 8000ac8:	40004c00 	.word	0x40004c00

08000acc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_UART5_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <MX_UART5_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_UART5_Init+0x4c>)
 8000ad8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000adc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_UART5_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_UART5_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_UART5_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_UART5_Init+0x4c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_UART5_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_UART5_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_UART5_Init+0x4c>)
 8000b04:	f004 f94e 	bl	8004da4 <HAL_HalfDuplex_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f000 fb1f 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20004b10 	.word	0x20004b10
 8000b1c:	40005000 	.word	0x40005000

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	4b5c      	ldr	r3, [pc, #368]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a5b      	ldr	r2, [pc, #364]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b59      	ldr	r3, [pc, #356]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0320 	and.w	r3, r3, #32
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	4b55      	ldr	r3, [pc, #340]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a54      	ldr	r2, [pc, #336]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b52      	ldr	r3, [pc, #328]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b4e      	ldr	r3, [pc, #312]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a4d      	ldr	r2, [pc, #308]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b4b      	ldr	r3, [pc, #300]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b47      	ldr	r3, [pc, #284]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a46      	ldr	r2, [pc, #280]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b44      	ldr	r3, [pc, #272]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b40      	ldr	r3, [pc, #256]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a3f      	ldr	r2, [pc, #252]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000bb0:	f043 0310 	orr.w	r3, r3, #16
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b39      	ldr	r3, [pc, #228]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a38      	ldr	r2, [pc, #224]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b36      	ldr	r3, [pc, #216]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b32      	ldr	r3, [pc, #200]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a31      	ldr	r2, [pc, #196]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <MX_GPIO_Init+0x18c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_14, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f244 0110 	movw	r1, #16400	; 0x4010
 8000c00:	482b      	ldr	r0, [pc, #172]	; (8000cb0 <MX_GPIO_Init+0x190>)
 8000c02:	f001 fdd9 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f248 0110 	movw	r1, #32784	; 0x8010
 8000c0c:	4829      	ldr	r0, [pc, #164]	; (8000cb4 <MX_GPIO_Init+0x194>)
 8000c0e:	f001 fdd3 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c18:	4827      	ldr	r0, [pc, #156]	; (8000cb8 <MX_GPIO_Init+0x198>)
 8000c1a:	f001 fdcd 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c24:	4825      	ldr	r0, [pc, #148]	; (8000cbc <MX_GPIO_Init+0x19c>)
 8000c26:	f001 fdc7 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF4 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14;
 8000c2a:	f244 0310 	movw	r3, #16400	; 0x4010
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <MX_GPIO_Init+0x190>)
 8000c44:	f001 fc0c 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000c48:	f248 0310 	movw	r3, #32784	; 0x8010
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4814      	ldr	r0, [pc, #80]	; (8000cb4 <MX_GPIO_Init+0x194>)
 8000c62:	f001 fbfd 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <MX_GPIO_Init+0x198>)
 8000c80:	f001 fbee 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <MX_GPIO_Init+0x19c>)
 8000c9e:	f001 fbdf 	bl	8002460 <HAL_GPIO_Init>

}
 8000ca2:	bf00      	nop
 8000ca4:	3730      	adds	r7, #48	; 0x30
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40021400 	.word	0x40021400
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

/* CAN RX0 CALLBACK FUNCTION */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_rx);
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 ff7c 	bl	8001bcc <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 8){
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	2b08      	cmp	r3, #8
 8000cda:	d111      	bne.n	8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		THRUST_1[0] = CAN_rx[0];
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000ce2:	701a      	strb	r2, [r3, #0]
		THRUST_2[0] = CAN_rx[0];
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000cea:	701a      	strb	r2, [r3, #0]
		ANGLE_REF_1 = CAN_rx[1];
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000cf4:	701a      	strb	r2, [r3, #0]
		ANGLE_REF_2 = CAN_rx[1];
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000cf8:	785b      	ldrb	r3, [r3, #1]
 8000cfa:	b25a      	sxtb	r2, r3
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000cfe:	701a      	strb	r2, [r3, #0]
	}
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20004afc 	.word	0x20004afc
 8000d0c:	20004c8c 	.word	0x20004c8c
 8000d10:	20000008 	.word	0x20000008
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	200000a8 	.word	0x200000a8
 8000d1c:	200000b0 	.word	0x200000b0

08000d20 <ReadEncoder>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadEncoder */
void ReadEncoder(void *argument)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	  	  	  	  	  /************************
	  	  	  	  	   * ---- ENCODER 1 ----- *
	  	  	  	  	   ************************/

	// READ ENCODER 1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //PULL CSn LOW
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	487d      	ldr	r0, [pc, #500]	; (8000f24 <ReadEncoder+0x204>)
 8000d2e:	f001 fd43 	bl	80027b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPI_tx1[0], 2, 1); //TRANSMIT READ COMMAND(0xFFFF)
 8000d32:	2301      	movs	r3, #1
 8000d34:	2202      	movs	r2, #2
 8000d36:	497c      	ldr	r1, [pc, #496]	; (8000f28 <ReadEncoder+0x208>)
 8000d38:	487c      	ldr	r0, [pc, #496]	; (8000f2c <ReadEncoder+0x20c>)
 8000d3a:	f002 fa86 	bl	800324a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //PULL CSn HIGH
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2110      	movs	r1, #16
 8000d42:	4878      	ldr	r0, [pc, #480]	; (8000f24 <ReadEncoder+0x204>)
 8000d44:	f001 fd38 	bl	80027b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f000 fcfb 	bl	8001744 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //PULL CSn LOW
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2110      	movs	r1, #16
 8000d52:	4874      	ldr	r0, [pc, #464]	; (8000f24 <ReadEncoder+0x204>)
 8000d54:	f001 fd30 	bl	80027b8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, &SPI_rx1[0], 2, 1); //RECEIVE ANGLE READING
 8000d58:	2301      	movs	r3, #1
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	4974      	ldr	r1, [pc, #464]	; (8000f30 <ReadEncoder+0x210>)
 8000d5e:	4873      	ldr	r0, [pc, #460]	; (8000f2c <ReadEncoder+0x20c>)
 8000d60:	f002 fbaf 	bl	80034c2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //PULL CSn HIGH
 8000d64:	2201      	movs	r2, #1
 8000d66:	2110      	movs	r1, #16
 8000d68:	486e      	ldr	r0, [pc, #440]	; (8000f24 <ReadEncoder+0x204>)
 8000d6a:	f001 fd25 	bl	80027b8 <HAL_GPIO_WritePin>

	//CLEAR NON-DATA BITS ENCODER 1
	ENCODER_ANGLE_1 = (SPI_rx1[0] << 8 | SPI_rx1[1])&clearbits; //FILTER OUT BIT 14&15
 8000d6e:	4b70      	ldr	r3, [pc, #448]	; (8000f30 <ReadEncoder+0x210>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b6e      	ldr	r3, [pc, #440]	; (8000f30 <ReadEncoder+0x210>)
 8000d78:	785b      	ldrb	r3, [r3, #1]
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	4b6c      	ldr	r3, [pc, #432]	; (8000f34 <ReadEncoder+0x214>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	4013      	ands	r3, r2
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b6a      	ldr	r3, [pc, #424]	; (8000f38 <ReadEncoder+0x218>)
 8000d8e:	801a      	strh	r2, [r3, #0]
	ENCODER_ANGLE_1 = (ENCODER_ANGLE_1 - INITIAL_ANGLE_1)&clearbits; //REMOVE INITIAL ANGLE OFFSET
 8000d90:	4b69      	ldr	r3, [pc, #420]	; (8000f38 <ReadEncoder+0x218>)
 8000d92:	881a      	ldrh	r2, [r3, #0]
 8000d94:	4b69      	ldr	r3, [pc, #420]	; (8000f3c <ReadEncoder+0x21c>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	4b65      	ldr	r3, [pc, #404]	; (8000f34 <ReadEncoder+0x214>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4b63      	ldr	r3, [pc, #396]	; (8000f38 <ReadEncoder+0x218>)
 8000dac:	801a      	strh	r2, [r3, #0]

	//RECOMPUTE ANGLE FROM 14-BIT DATA TO -180 TO 180 DEGREE ANGLE FOR ENCODER 1
	ANGLE_DEGREE_1 = ENCODER_ANGLE_1*ConvertToDegree; //CONVERTS 14-bit number to 360 degree
 8000dae:	4b62      	ldr	r3, [pc, #392]	; (8000f38 <ReadEncoder+0x218>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dba:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8000f40 <ReadEncoder+0x220>
 8000dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc2:	4b60      	ldr	r3, [pc, #384]	; (8000f44 <ReadEncoder+0x224>)
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
	if(ANGLE_DEGREE_1 > 180){
 8000dc8:	4b5e      	ldr	r3, [pc, #376]	; (8000f44 <ReadEncoder+0x224>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8000f48 <ReadEncoder+0x228>
 8000dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	dd09      	ble.n	8000df0 <ReadEncoder+0xd0>
			ANGLE_DEGREE_1 = ANGLE_DEGREE_1 - 360;
 8000ddc:	4b59      	ldr	r3, [pc, #356]	; (8000f44 <ReadEncoder+0x224>)
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000f4c <ReadEncoder+0x22c>
 8000de6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dea:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <ReadEncoder+0x224>)
 8000dec:	edc3 7a00 	vstr	s15, [r3]
	}
			//TODO:REMOVE COMMENTS
			ANGLE_ERROR_1 = ANGLE_REF_1 - ANGLE_DEGREE_1; //CALCULATE ANGLE ERROR
 8000df0:	4b57      	ldr	r3, [pc, #348]	; (8000f50 <ReadEncoder+0x230>)
 8000df2:	f993 3000 	ldrsb.w	r3, [r3]
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dfe:	4b51      	ldr	r3, [pc, #324]	; (8000f44 <ReadEncoder+0x224>)
 8000e00:	edd3 7a00 	vldr	s15, [r3]
 8000e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e0c:	ee17 3a90 	vmov	r3, s15
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	4b50      	ldr	r3, [pc, #320]	; (8000f54 <ReadEncoder+0x234>)
 8000e14:	801a      	strh	r2, [r3, #0]
		 	 	   	   /************************
		 	 	   	    * ---- ENCODER 2 ----- *
		 	 	   	    ************************/

	//READ ENCODER 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //PULL CSn LOW
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1c:	484e      	ldr	r0, [pc, #312]	; (8000f58 <ReadEncoder+0x238>)
 8000e1e:	f001 fccb 	bl	80027b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &SPI_tx2[0], 2, 1); //TRANSMIT READ COMMAND(0xFF)
 8000e22:	2301      	movs	r3, #1
 8000e24:	2202      	movs	r2, #2
 8000e26:	494d      	ldr	r1, [pc, #308]	; (8000f5c <ReadEncoder+0x23c>)
 8000e28:	484d      	ldr	r0, [pc, #308]	; (8000f60 <ReadEncoder+0x240>)
 8000e2a:	f002 fa0e 	bl	800324a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); //PULL CSn HIGH
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e34:	4848      	ldr	r0, [pc, #288]	; (8000f58 <ReadEncoder+0x238>)
 8000e36:	f001 fcbf 	bl	80027b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f000 fc82 	bl	8001744 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //PULL CSn LOW
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e46:	4844      	ldr	r0, [pc, #272]	; (8000f58 <ReadEncoder+0x238>)
 8000e48:	f001 fcb6 	bl	80027b8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, &SPI_rx2[0], 2, 1); //RECEIVE ANGLE READING
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	2202      	movs	r2, #2
 8000e50:	4944      	ldr	r1, [pc, #272]	; (8000f64 <ReadEncoder+0x244>)
 8000e52:	4843      	ldr	r0, [pc, #268]	; (8000f60 <ReadEncoder+0x240>)
 8000e54:	f002 fb35 	bl	80034c2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); //PULL CSn HIGH
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5e:	483e      	ldr	r0, [pc, #248]	; (8000f58 <ReadEncoder+0x238>)
 8000e60:	f001 fcaa 	bl	80027b8 <HAL_GPIO_WritePin>

	//CLEAR NON-DATA BITS ENCODER 2
	ENCODER_ANGLE_2 = (SPI_rx2[0] << 8 | SPI_rx2[1])&clearbits; //FILTER OUT BIT 14&15
 8000e64:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <ReadEncoder+0x244>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <ReadEncoder+0x244>)
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <ReadEncoder+0x214>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <ReadEncoder+0x248>)
 8000e84:	801a      	strh	r2, [r3, #0]
	ENCODER_ANGLE_2 = (ENCODER_ANGLE_2 - INITIAL_ANGLE_2)&clearbits; //REMOVE INITIAL ANGLE OFFSET
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <ReadEncoder+0x248>)
 8000e88:	881a      	ldrh	r2, [r3, #0]
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <ReadEncoder+0x24c>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <ReadEncoder+0x214>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <ReadEncoder+0x248>)
 8000ea2:	801a      	strh	r2, [r3, #0]

	//RECOMPUTE ANGLE FROM 14-BIT DATA TO -180 TO 180 DEGREE ANGLE FOR ENCODER 2
	ANGLE_DEGREE_2 = ENCODER_ANGLE_2*ConvertToDegree; //CONVERTS 14-bit number to 360 degree
 8000ea4:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <ReadEncoder+0x248>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	ee07 3a90 	vmov	s15, r3
 8000eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000f40 <ReadEncoder+0x220>
 8000eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <ReadEncoder+0x250>)
 8000eba:	edc3 7a00 	vstr	s15, [r3]
	if(ANGLE_DEGREE_2 > 180){
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <ReadEncoder+0x250>)
 8000ec0:	edd3 7a00 	vldr	s15, [r3]
 8000ec4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000f48 <ReadEncoder+0x228>
 8000ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed0:	dd09      	ble.n	8000ee6 <ReadEncoder+0x1c6>
			ANGLE_DEGREE_2 = ANGLE_DEGREE_2 - 360;
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <ReadEncoder+0x250>)
 8000ed4:	edd3 7a00 	vldr	s15, [r3]
 8000ed8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000f4c <ReadEncoder+0x22c>
 8000edc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <ReadEncoder+0x250>)
 8000ee2:	edc3 7a00 	vstr	s15, [r3]
	}
			//TODO: REMOVE COMMENTS
			ANGLE_ERROR_2 = ANGLE_REF_2 - ANGLE_DEGREE_2; //CALCULATE ANGLE ERROR
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <ReadEncoder+0x254>)
 8000ee8:	f993 3000 	ldrsb.w	r3, [r3]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <ReadEncoder+0x250>)
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f02:	ee17 3a90 	vmov	r3, s15
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <ReadEncoder+0x258>)
 8000f0a:	801a      	strh	r2, [r3, #0]

	thread1++;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <ReadEncoder+0x25c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <ReadEncoder+0x25c>)
 8000f14:	6013      	str	r3, [r2, #0]
    osThreadFlagsWait(0x01,osFlagsWaitAny, osWaitForever); // START ControlStepper thread
 8000f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f004 fbcd 	bl	80056bc <osThreadFlagsWait>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //PULL CSn LOW
 8000f22:	e701      	b.n	8000d28 <ReadEncoder+0x8>
 8000f24:	40020000 	.word	0x40020000
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20004bf0 	.word	0x20004bf0
 8000f30:	20004b0c 	.word	0x20004b0c
 8000f34:	2000000e 	.word	0x2000000e
 8000f38:	200000a6 	.word	0x200000a6
 8000f3c:	200000a4 	.word	0x200000a4
 8000f40:	3cb402d0 	.word	0x3cb402d0
 8000f44:	20004af0 	.word	0x20004af0
 8000f48:	43340000 	.word	0x43340000
 8000f4c:	43b40000 	.word	0x43b40000
 8000f50:	200000a8 	.word	0x200000a8
 8000f54:	200000aa 	.word	0x200000aa
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	20004a94 	.word	0x20004a94
 8000f64:	20004b54 	.word	0x20004b54
 8000f68:	200000ae 	.word	0x200000ae
 8000f6c:	200000ac 	.word	0x200000ac
 8000f70:	20004b04 	.word	0x20004b04
 8000f74:	200000b0 	.word	0x200000b0
 8000f78:	200000b2 	.word	0x200000b2
 8000f7c:	200000b4 	.word	0x200000b4

08000f80 <ControlStepper>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlStepper */
void ControlStepper(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlStepper */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1U);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f004 fc18 	bl	80057be <osDelay>
	  	  	  	  	  /************************
	 	  	  	  	   * ---- STEPPER 1 ----- *
	 	  	  	  	   ************************/

	//CHANGE DIRECTION FOR STEPPER 1 DEPENDING ON ERROR SIGN
	if (ANGLE_ERROR_1 > 0){
 8000f8e:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <ControlStepper+0x124>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dd06      	ble.n	8000fa6 <ControlStepper+0x26>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9e:	4842      	ldr	r0, [pc, #264]	; (80010a8 <ControlStepper+0x128>)
 8000fa0:	f001 fc0a 	bl	80027b8 <HAL_GPIO_WritePin>
 8000fa4:	e005      	b.n	8000fb2 <ControlStepper+0x32>
	}
	else{
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fac:	483e      	ldr	r0, [pc, #248]	; (80010a8 <ControlStepper+0x128>)
 8000fae:	f001 fc03 	bl	80027b8 <HAL_GPIO_WritePin>
	}

	ANGLE_ERROR_1 = abs(ANGLE_ERROR_1);
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	; (80010a4 <ControlStepper+0x124>)
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	bfb8      	it	lt
 8000fbc:	425b      	neglt	r3, r3
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <ControlStepper+0x124>)
 8000fc4:	801a      	strh	r2, [r3, #0]
	//UPDATE CCR REGISTER FOR STEPPER 1
	if(ANGLE_ERROR_1 > 2){
 8000fc6:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <ControlStepper+0x124>)
 8000fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	dd0a      	ble.n	8000fe6 <ControlStepper+0x66>
		TIM1->ARR  = PWM_PERIOD;
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <ControlStepper+0x12c>)
 8000fd2:	881a      	ldrh	r2, [r3, #0]
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <ControlStepper+0x130>)
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM1->CCR3 = PWM_PERIOD/2;
 8000fd8:	4b34      	ldr	r3, [pc, #208]	; (80010ac <ControlStepper+0x12c>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	085b      	lsrs	r3, r3, #1
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <ControlStepper+0x130>)
 8000fe2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fe4:	e007      	b.n	8000ff6 <ControlStepper+0x76>
	}
	else{
		TIM1->ARR = PWM_PERIOD;
 8000fe6:	4b31      	ldr	r3, [pc, #196]	; (80010ac <ControlStepper+0x12c>)
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <ControlStepper+0x130>)
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM1->CCR3 = PWM_PERIOD;
 8000fee:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <ControlStepper+0x12c>)
 8000ff0:	881a      	ldrh	r2, [r3, #0]
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <ControlStepper+0x130>)
 8000ff4:	63da      	str	r2, [r3, #60]	; 0x3c
			  	  	  	   * ---- STEPPER 2 ----- *
			  	  	  	   ************************/

	//CHANGE DIRECTION FOR STEPPER 1 DEPENDING ON ERROR SIGN

	if (ANGLE_ERROR_2 > 0){
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <ControlStepper+0x134>)
 8000ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dd06      	ble.n	800100e <ControlStepper+0x8e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001006:	482c      	ldr	r0, [pc, #176]	; (80010b8 <ControlStepper+0x138>)
 8001008:	f001 fbd6 	bl	80027b8 <HAL_GPIO_WritePin>
 800100c:	e005      	b.n	800101a <ControlStepper+0x9a>
		}
		else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001014:	4828      	ldr	r0, [pc, #160]	; (80010b8 <ControlStepper+0x138>)
 8001016:	f001 fbcf 	bl	80027b8 <HAL_GPIO_WritePin>
		}
	//UPDATE CCR REGISTER FOR STEPPER 1
	ANGLE_ERROR_2 = abs(ANGLE_ERROR_2);
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <ControlStepper+0x134>)
 800101c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001020:	2b00      	cmp	r3, #0
 8001022:	bfb8      	it	lt
 8001024:	425b      	neglt	r3, r3
 8001026:	b29b      	uxth	r3, r3
 8001028:	b21a      	sxth	r2, r3
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <ControlStepper+0x134>)
 800102c:	801a      	strh	r2, [r3, #0]
	if(ANGLE_ERROR_2 > 2){
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <ControlStepper+0x134>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	2b02      	cmp	r3, #2
 8001036:	dd0a      	ble.n	800104e <ControlStepper+0xce>
		TIM1->ARR  = PWM_PERIOD;
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <ControlStepper+0x12c>)
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <ControlStepper+0x130>)
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM1->CCR2 = PWM_PERIOD/2;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <ControlStepper+0x12c>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <ControlStepper+0x130>)
 800104a:	639a      	str	r2, [r3, #56]	; 0x38
 800104c:	e007      	b.n	800105e <ControlStepper+0xde>
		}
		else{
			TIM1->ARR = PWM_PERIOD;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <ControlStepper+0x12c>)
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <ControlStepper+0x130>)
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->CCR2 = PWM_PERIOD;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <ControlStepper+0x12c>)
 8001058:	881a      	ldrh	r2, [r3, #0]
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <ControlStepper+0x130>)
 800105c:	639a      	str	r2, [r3, #56]	; 0x38
		}



	if( (ANGLE_ERROR_1 <= 2) && (ANGLE_ERROR_2 <= 2) ){
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <ControlStepper+0x124>)
 8001060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001064:	2b02      	cmp	r3, #2
 8001066:	dc10      	bgt.n	800108a <ControlStepper+0x10a>
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <ControlStepper+0x134>)
 800106a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106e:	2b02      	cmp	r3, #2
 8001070:	dc0b      	bgt.n	800108a <ControlStepper+0x10a>
		osThreadFlagsSet(startThrustHandle, 0x03); //FLAG THRUST THREAD
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <ControlStepper+0x13c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2103      	movs	r1, #3
 8001078:	4618      	mov	r0, r3
 800107a:	f004 fad1 	bl	8005620 <osThreadFlagsSet>
		osThreadFlagsWait(0x02, osFlagsWaitAny, osWaitForever); //START THRUST THREAD
 800107e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001082:	2100      	movs	r1, #0
 8001084:	2002      	movs	r0, #2
 8001086:	f004 fb19 	bl	80056bc <osThreadFlagsWait>
	}


	//START ENCODER THREAD
	thread2++;
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <ControlStepper+0x140>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <ControlStepper+0x140>)
 8001092:	6013      	str	r3, [r2, #0]
	osThreadFlagsSet(StartEncoderHandle, 0x01);
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <ControlStepper+0x144>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fac0 	bl	8005620 <osThreadFlagsSet>
	osDelay(1U);
 80010a0:	e772      	b.n	8000f88 <ControlStepper+0x8>
 80010a2:	bf00      	nop
 80010a4:	200000aa 	.word	0x200000aa
 80010a8:	40021400 	.word	0x40021400
 80010ac:	20000010 	.word	0x20000010
 80010b0:	40010000 	.word	0x40010000
 80010b4:	200000b2 	.word	0x200000b2
 80010b8:	40021000 	.word	0x40021000
 80010bc:	20004ba0 	.word	0x20004ba0
 80010c0:	200000b8 	.word	0x200000b8
 80010c4:	20004ba8 	.word	0x20004ba8

080010c8 <ControlThrust>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlThrust */
void ControlThrust(void *argument)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	//TIM3 ARR = 65535

	osThreadFlagsWait(0x03,osFlagsWaitAny, osWaitForever); // STOP THREAD
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	2100      	movs	r1, #0
 80010d6:	2003      	movs	r0, #3
 80010d8:	f004 faf0 	bl	80056bc <osThreadFlagsWait>

						   /************************
			  	  	  	    * ---- THRUST 1 ----- *
			  	  	  	    ************************/
	HAL_UART_Transmit(&huart4, THRUST_1, sizeof(THRUST_2), 100);
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	2201      	movs	r2, #1
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <ControlThrust+0x4c>)
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <ControlThrust+0x50>)
 80010e4:	f003 feb3 	bl	8004e4e <HAL_UART_Transmit>

    					   /************************
    			  	  	  	* ---- THRUST 2 ----- *
    			  	  	  	************************/
	HAL_UART_Transmit(&huart5, THRUST_2, sizeof(THRUST_2), 100);
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	2201      	movs	r2, #1
 80010ec:	490b      	ldr	r1, [pc, #44]	; (800111c <ControlThrust+0x54>)
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <ControlThrust+0x58>)
 80010f0:	f003 fead 	bl	8004e4e <HAL_UART_Transmit>

	thread3++;
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <ControlThrust+0x5c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <ControlThrust+0x5c>)
 80010fc:	6013      	str	r3, [r2, #0]
	osDelay(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f004 fb5d 	bl	80057be <osDelay>
	osThreadFlagsSet(StartStepperHandle, 0x02);
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <ControlThrust+0x60>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2102      	movs	r1, #2
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fa88 	bl	8005620 <osThreadFlagsSet>
	osThreadFlagsWait(0x03,osFlagsWaitAny, osWaitForever); // STOP THREAD
 8001110:	e7de      	b.n	80010d0 <ControlThrust+0x8>
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	20004bac 	.word	0x20004bac
 800111c:	2000000c 	.word	0x2000000c
 8001120:	20004b10 	.word	0x20004b10
 8001124:	200000bc 	.word	0x200000bc
 8001128:	20004b08 	.word	0x20004b08

0800112c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800113e:	f000 fae1 	bl	8001704 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40001000 	.word	0x40001000

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_MspInit+0x54>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_MspInit+0x54>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_MspInit+0x54>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_MspInit+0x54>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <HAL_MspInit+0x54>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_MspInit+0x54>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	210f      	movs	r1, #15
 800119e:	f06f 0001 	mvn.w	r0, #1
 80011a2:	f001 f933 	bl	800240c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <HAL_CAN_MspInit+0x94>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d133      	bne.n	800123e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_CAN_MspInit+0x98>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <HAL_CAN_MspInit+0x98>)
 80011e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_CAN_MspInit+0x98>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_CAN_MspInit+0x98>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <HAL_CAN_MspInit+0x98>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_CAN_MspInit+0x98>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800120e:	2303      	movs	r3, #3
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800121e:	2309      	movs	r3, #9
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <HAL_CAN_MspInit+0x9c>)
 800122a:	f001 f919 	bl	8002460 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2105      	movs	r1, #5
 8001232:	2014      	movs	r0, #20
 8001234:	f001 f8ea 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001238:	2014      	movs	r0, #20
 800123a:	f001 f903 	bl	8002444 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40006400 	.word	0x40006400
 800124c:	40023800 	.word	0x40023800
 8001250:	40020c00 	.word	0x40020c00

08001254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a41      	ldr	r2, [pc, #260]	; (8001378 <HAL_SPI_MspInit+0x124>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12c      	bne.n	80012d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	4b40      	ldr	r3, [pc, #256]	; (800137c <HAL_SPI_MspInit+0x128>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a3f      	ldr	r2, [pc, #252]	; (800137c <HAL_SPI_MspInit+0x128>)
 8001280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b3d      	ldr	r3, [pc, #244]	; (800137c <HAL_SPI_MspInit+0x128>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <HAL_SPI_MspInit+0x128>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a38      	ldr	r2, [pc, #224]	; (800137c <HAL_SPI_MspInit+0x128>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <HAL_SPI_MspInit+0x128>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012ae:	2338      	movs	r3, #56	; 0x38
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012be:	2305      	movs	r3, #5
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	482d      	ldr	r0, [pc, #180]	; (8001380 <HAL_SPI_MspInit+0x12c>)
 80012ca:	f001 f8c9 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012ce:	e04f      	b.n	8001370 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a2b      	ldr	r2, [pc, #172]	; (8001384 <HAL_SPI_MspInit+0x130>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d14a      	bne.n	8001370 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_SPI_MspInit+0x128>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a26      	ldr	r2, [pc, #152]	; (800137c <HAL_SPI_MspInit+0x128>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_SPI_MspInit+0x128>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_SPI_MspInit+0x128>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a1f      	ldr	r2, [pc, #124]	; (800137c <HAL_SPI_MspInit+0x128>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_SPI_MspInit+0x128>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_SPI_MspInit+0x128>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_SPI_MspInit+0x128>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_SPI_MspInit+0x128>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800132e:	2304      	movs	r3, #4
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133e:	2305      	movs	r3, #5
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	480f      	ldr	r0, [pc, #60]	; (8001388 <HAL_SPI_MspInit+0x134>)
 800134a:	f001 f889 	bl	8002460 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800134e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001360:	2305      	movs	r3, #5
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_SPI_MspInit+0x12c>)
 800136c:	f001 f878 	bl	8002460 <HAL_GPIO_Init>
}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40013000 	.word	0x40013000
 800137c:	40023800 	.word	0x40023800
 8001380:	40020400 	.word	0x40020400
 8001384:	40003800 	.word	0x40003800
 8001388:	40020800 	.word	0x40020800

0800138c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_TIM_Base_MspInit+0x3c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10d      	bne.n	80013ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_TIM_Base_MspInit+0x40>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_TIM_Base_MspInit+0x40>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_TIM_Base_MspInit+0x40>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <HAL_TIM_MspPostInit+0x68>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d11e      	bne.n	8001430 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_TIM_MspPostInit+0x6c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a10      	ldr	r2, [pc, #64]	; (800143c <HAL_TIM_MspPostInit+0x6c>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_TIM_MspPostInit+0x6c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800140e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001420:	2301      	movs	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <HAL_TIM_MspPostInit+0x70>)
 800142c:	f001 f818 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40010000 	.word	0x40010000
 800143c:	40023800 	.word	0x40023800
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a32      	ldr	r2, [pc, #200]	; (800152c <HAL_UART_MspInit+0xe8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12c      	bne.n	80014c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_UART_MspInit+0xec>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a30      	ldr	r2, [pc, #192]	; (8001530 <HAL_UART_MspInit+0xec>)
 8001470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_UART_MspInit+0xec>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_UART_MspInit+0xec>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a29      	ldr	r2, [pc, #164]	; (8001530 <HAL_UART_MspInit+0xec>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_UART_MspInit+0xec>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800149e:	2301      	movs	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a2:	2312      	movs	r3, #18
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014ae:	2308      	movs	r3, #8
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	481e      	ldr	r0, [pc, #120]	; (8001534 <HAL_UART_MspInit+0xf0>)
 80014ba:	f000 ffd1 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80014be:	e031      	b.n	8001524 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==UART5)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <HAL_UART_MspInit+0xf4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12c      	bne.n	8001524 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_UART5_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a17      	ldr	r2, [pc, #92]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001508:	2312      	movs	r3, #18
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001514:	2308      	movs	r3, #8
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <HAL_UART_MspInit+0xf8>)
 8001520:	f000 ff9e 	bl	8002460 <HAL_GPIO_Init>
}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40004c00 	.word	0x40004c00
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	40005000 	.word	0x40005000
 800153c:	40020800 	.word	0x40020800

08001540 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	; 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	2036      	movs	r0, #54	; 0x36
 8001556:	f000 ff59 	bl	800240c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800155a:	2036      	movs	r0, #54	; 0x36
 800155c:	f000 ff72 	bl	8002444 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <HAL_InitTick+0xa4>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <HAL_InitTick+0xa4>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_InitTick+0xa4>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800157c:	f107 0210 	add.w	r2, r7, #16
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f001 fda4 	bl	80030d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800158c:	f001 fd7a 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8001590:	4603      	mov	r3, r0
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <HAL_InitTick+0xa8>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	0c9b      	lsrs	r3, r3, #18
 80015a0:	3b01      	subs	r3, #1
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_InitTick+0xac>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_InitTick+0xb0>)
 80015a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_InitTick+0xac>)
 80015ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_InitTick+0xac>)
 80015b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_InitTick+0xac>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_InitTick+0xac>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <HAL_InitTick+0xac>)
 80015c6:	f002 fb5f 	bl	8003c88 <HAL_TIM_Base_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d104      	bne.n	80015da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <HAL_InitTick+0xac>)
 80015d2:	f002 fba9 	bl	8003d28 <HAL_TIM_Base_Start_IT>
 80015d6:	4603      	mov	r3, r0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3730      	adds	r7, #48	; 0x30
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	431bde83 	.word	0x431bde83
 80015ec:	20004ca8 	.word	0x20004ca8
 80015f0:	40001000 	.word	0x40001000

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <CAN1_RX0_IRQHandler+0x10>)
 8001626:	f000 fc09 	bl	8001e3c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20004c4c 	.word	0x20004c4c

08001634 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM6_DAC_IRQHandler+0x10>)
 800163a:	f002 fd07 	bl	800404c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20004ca8 	.word	0x20004ca8

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0x12>
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopFillZerobss+0x16>)
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <LoopFillZerobss+0x1a>)
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <LoopFillZerobss+0x1e>)
 8001676:	2300      	movs	r3, #0
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:
 800167a:	58d4      	ldr	r4, [r2, r3]
 800167c:	50c4      	str	r4, [r0, r3]
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:
 8001680:	18c4      	adds	r4, r0, r3
 8001682:	428c      	cmp	r4, r1
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LoopFillZerobss+0x22>)
 8001688:	4c0b      	ldr	r4, [pc, #44]	; (80016b8 <LoopFillZerobss+0x26>)
 800168a:	2300      	movs	r3, #0
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:
 8001692:	42a2      	cmp	r2, r4
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>
 8001696:	f7ff ffd7 	bl	8001648 <SystemInit>
 800169a:	f006 ff2f 	bl	80084fc <__libc_init_array>
 800169e:	f7fe ff23 	bl	80004e8 <main>
 80016a2:	4770      	bx	lr
 80016a4:	20030000 	.word	0x20030000
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000088 	.word	0x20000088
 80016b0:	08008850 	.word	0x08008850
 80016b4:	20000088 	.word	0x20000088
 80016b8:	20004d40 	.word	0x20004d40

080016bc <ADC_IRQHandler>:
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <HAL_Init+0x40>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_Init+0x40>)
 80016d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_Init+0x40>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 fe84 	bl	80023f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f7ff ff26 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fd32 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	2000001c 	.word	0x2000001c
 8001728:	20004cf0 	.word	0x20004cf0

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20004cf0 	.word	0x20004cf0

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_Delay+0x44>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffde 	bl	800172c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000001c 	.word	0x2000001c

0800178c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0ed      	b.n	800197a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fd02 	bl	80011b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c0:	f7ff ffb4 	bl	800172c <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017c6:	e012      	b.n	80017ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017c8:	f7ff ffb0 	bl	800172c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b0a      	cmp	r3, #10
 80017d4:	d90b      	bls.n	80017ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2205      	movs	r2, #5
 80017e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0c5      	b.n	800197a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0e5      	beq.n	80017c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0202 	bic.w	r2, r2, #2
 800180a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800180c:	f7ff ff8e 	bl	800172c <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001812:	e012      	b.n	800183a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001814:	f7ff ff8a 	bl	800172c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b0a      	cmp	r3, #10
 8001820:	d90b      	bls.n	800183a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2205      	movs	r2, #5
 8001832:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e09f      	b.n	800197a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e5      	bne.n	8001814 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7e1b      	ldrb	r3, [r3, #24]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d108      	bne.n	8001862 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e007      	b.n	8001872 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7e5b      	ldrb	r3, [r3, #25]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e007      	b.n	800189c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800189a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7e9b      	ldrb	r3, [r3, #26]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d108      	bne.n	80018b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0220 	orr.w	r2, r2, #32
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0220 	bic.w	r2, r2, #32
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7edb      	ldrb	r3, [r3, #27]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d108      	bne.n	80018e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0210 	bic.w	r2, r2, #16
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e007      	b.n	80018f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0210 	orr.w	r2, r2, #16
 80018ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7f1b      	ldrb	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d108      	bne.n	800190a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0208 	orr.w	r2, r2, #8
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e007      	b.n	800191a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0208 	bic.w	r2, r2, #8
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7f5b      	ldrb	r3, [r3, #29]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d108      	bne.n	8001934 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0204 	orr.w	r2, r2, #4
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e007      	b.n	8001944 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0204 	bic.w	r2, r2, #4
 8001942:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	ea42 0103 	orr.w	r1, r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	1e5a      	subs	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800199c:	7cfb      	ldrb	r3, [r7, #19]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d003      	beq.n	80019aa <HAL_CAN_ConfigFilter+0x26>
 80019a2:	7cfb      	ldrb	r3, [r7, #19]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	f040 80be 	bne.w	8001b26 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019aa:	4b65      	ldr	r3, [pc, #404]	; (8001b40 <HAL_CAN_ConfigFilter+0x1bc>)
 80019ac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	431a      	orrs	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2201      	movs	r2, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	401a      	ands	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d123      	bne.n	8001a54 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3248      	adds	r2, #72	; 0x48
 8001a34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a4a:	6979      	ldr	r1, [r7, #20]
 8001a4c:	3348      	adds	r3, #72	; 0x48
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d122      	bne.n	8001aa2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3248      	adds	r2, #72	; 0x48
 8001a82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a98:	6979      	ldr	r1, [r7, #20]
 8001a9a:	3348      	adds	r3, #72	; 0x48
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001abc:	e007      	b.n	8001ace <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ae8:	e007      	b.n	8001afa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d107      	bne.n	8001b12 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b18:	f023 0201 	bic.w	r2, r3, #1
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e006      	b.n	8001b34 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
  }
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40006400 	.word	0x40006400

08001b44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d12e      	bne.n	8001bb6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b70:	f7ff fddc 	bl	800172c <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b76:	e012      	b.n	8001b9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b78:	f7ff fdd8 	bl	800172c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b0a      	cmp	r3, #10
 8001b84:	d90b      	bls.n	8001b9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2205      	movs	r2, #5
 8001b96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e012      	b.n	8001bc4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e5      	bne.n	8001b78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e006      	b.n	8001bc4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
  }
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d003      	beq.n	8001bf0 <HAL_CAN_GetRxMessage+0x24>
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	f040 80f3 	bne.w	8001dd6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10e      	bne.n	8001c14 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d116      	bne.n	8001c32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0e7      	b.n	8001de4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0d8      	b.n	8001de4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0204 	and.w	r2, r3, #4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10c      	bne.n	8001c6a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	331b      	adds	r3, #27
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0d5b      	lsrs	r3, r3, #21
 8001c60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e00b      	b.n	8001c82 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	331b      	adds	r3, #27
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	331b      	adds	r3, #27
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0202 	and.w	r2, r3, #2
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	331b      	adds	r3, #27
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 020f 	and.w	r2, r3, #15
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	331b      	adds	r3, #27
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	331b      	adds	r3, #27
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0a1a      	lsrs	r2, r3, #8
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0c1a      	lsrs	r2, r3, #16
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	3302      	adds	r3, #2
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0e1a      	lsrs	r2, r3, #24
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	3304      	adds	r3, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0a1a      	lsrs	r2, r3, #8
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	3305      	adds	r3, #5
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	0c1a      	lsrs	r2, r3, #16
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	3306      	adds	r3, #6
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0e1a      	lsrs	r2, r3, #24
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	3307      	adds	r3, #7
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d108      	bne.n	8001dc2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	e007      	b.n	8001dd2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0220 	orr.w	r2, r2, #32
 8001dd0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e006      	b.n	8001de4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
  }
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e00:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d002      	beq.n	8001e0e <HAL_CAN_ActivateNotification+0x1e>
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d109      	bne.n	8001e22 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6959      	ldr	r1, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e006      	b.n	8001e30 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
  }
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d07c      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d023      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f983 	bl	80021aa <HAL_CAN_TxMailbox0CompleteCallback>
 8001ea4:	e016      	b.n	8001ed4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb8:	e00c      	b.n	8001ed4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ecc:	e002      	b.n	8001ed4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f989 	bl	80021e6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d024      	beq.n	8001f28 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f963 	bl	80021be <HAL_CAN_TxMailbox1CompleteCallback>
 8001ef8:	e016      	b.n	8001f28 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d004      	beq.n	8001f0e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0c:	e00c      	b.n	8001f28 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f20:	e002      	b.n	8001f28 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f969 	bl	80021fa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d024      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f943 	bl	80021d2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f4c:	e016      	b.n	8001f7c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d004      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e00c      	b.n	8001f7c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
 8001f74:	e002      	b.n	8001f7c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f949 	bl	800220e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00c      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f930 	bl	8002222 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fe70 	bl	8000cc0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00c      	beq.n	8002004 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2210      	movs	r2, #16
 8002002:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2208      	movs	r2, #8
 800201e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f912 	bl	800224a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b00      	cmp	r3, #0
 800202e:	d009      	beq.n	8002044 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8f9 	bl	8002236 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2210      	movs	r2, #16
 800205e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f8fc 	bl	800225e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00b      	beq.n	8002088 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2208      	movs	r2, #8
 8002080:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f8f5 	bl	8002272 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d07b      	beq.n	800218a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d072      	beq.n	8002182 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d043      	beq.n	8002182 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002100:	2b00      	cmp	r3, #0
 8002102:	d03e      	beq.n	8002182 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800210a:	2b60      	cmp	r3, #96	; 0x60
 800210c:	d02b      	beq.n	8002166 <HAL_CAN_IRQHandler+0x32a>
 800210e:	2b60      	cmp	r3, #96	; 0x60
 8002110:	d82e      	bhi.n	8002170 <HAL_CAN_IRQHandler+0x334>
 8002112:	2b50      	cmp	r3, #80	; 0x50
 8002114:	d022      	beq.n	800215c <HAL_CAN_IRQHandler+0x320>
 8002116:	2b50      	cmp	r3, #80	; 0x50
 8002118:	d82a      	bhi.n	8002170 <HAL_CAN_IRQHandler+0x334>
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d019      	beq.n	8002152 <HAL_CAN_IRQHandler+0x316>
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d826      	bhi.n	8002170 <HAL_CAN_IRQHandler+0x334>
 8002122:	2b30      	cmp	r3, #48	; 0x30
 8002124:	d010      	beq.n	8002148 <HAL_CAN_IRQHandler+0x30c>
 8002126:	2b30      	cmp	r3, #48	; 0x30
 8002128:	d822      	bhi.n	8002170 <HAL_CAN_IRQHandler+0x334>
 800212a:	2b10      	cmp	r3, #16
 800212c:	d002      	beq.n	8002134 <HAL_CAN_IRQHandler+0x2f8>
 800212e:	2b20      	cmp	r3, #32
 8002130:	d005      	beq.n	800213e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002132:	e01d      	b.n	8002170 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800213c:	e019      	b.n	8002172 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	f043 0310 	orr.w	r3, r3, #16
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002146:	e014      	b.n	8002172 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	f043 0320 	orr.w	r3, r3, #32
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002150:	e00f      	b.n	8002172 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800215a:	e00a      	b.n	8002172 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002164:	e005      	b.n	8002172 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800216e:	e000      	b.n	8002172 <HAL_CAN_IRQHandler+0x336>
            break;
 8002170:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002180:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2204      	movs	r2, #4
 8002188:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f872 	bl	8002286 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021a2:	bf00      	nop
 80021a4:	3728      	adds	r7, #40	; 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0b      	blt.n	800232a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4907      	ldr	r1, [pc, #28]	; (8002338 <__NVIC_EnableIRQ+0x38>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100

0800233c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	db0a      	blt.n	8002366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	490c      	ldr	r1, [pc, #48]	; (8002388 <__NVIC_SetPriority+0x4c>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	0112      	lsls	r2, r2, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	440b      	add	r3, r1
 8002360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002364:	e00a      	b.n	800237c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4908      	ldr	r1, [pc, #32]	; (800238c <__NVIC_SetPriority+0x50>)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	3b04      	subs	r3, #4
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	440b      	add	r3, r1
 800237a:	761a      	strb	r2, [r3, #24]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000e100 	.word	0xe000e100
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f1c3 0307 	rsb	r3, r3, #7
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf28      	it	cs
 80023ae:	2304      	movcs	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <NVIC_EncodePriority+0x30>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b03      	subs	r3, #3
 80023be:	e000      	b.n	80023c2 <NVIC_EncodePriority+0x32>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43d9      	mvns	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	4313      	orrs	r3, r2
         );
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ff4c 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800241e:	f7ff ff61 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 8002422:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	6978      	ldr	r0, [r7, #20]
 800242a:	f7ff ffb1 	bl	8002390 <NVIC_EncodePriority>
 800242e:	4602      	mov	r2, r0
 8002430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff80 	bl	800233c <__NVIC_SetPriority>
}
 800243c:	bf00      	nop
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff54 	bl	8002300 <__NVIC_EnableIRQ>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e177      	b.n	800276c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800247c:	2201      	movs	r2, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	429a      	cmp	r2, r3
 8002496:	f040 8166 	bne.w	8002766 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d005      	beq.n	80024b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d130      	bne.n	8002514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0201 	and.w	r2, r3, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b03      	cmp	r3, #3
 800251e:	d017      	beq.n	8002550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d123      	bne.n	80025a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	08da      	lsrs	r2, r3, #3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3208      	adds	r2, #8
 8002564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220f      	movs	r2, #15
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	08da      	lsrs	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3208      	adds	r2, #8
 800259e:	69b9      	ldr	r1, [r7, #24]
 80025a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0203 	and.w	r2, r3, #3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80c0 	beq.w	8002766 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_GPIO_Init+0x324>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a65      	ldr	r2, [pc, #404]	; (8002784 <HAL_GPIO_Init+0x324>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_GPIO_Init+0x324>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002602:	4a61      	ldr	r2, [pc, #388]	; (8002788 <HAL_GPIO_Init+0x328>)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_GPIO_Init+0x32c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d037      	beq.n	800269e <HAL_GPIO_Init+0x23e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a57      	ldr	r2, [pc, #348]	; (8002790 <HAL_GPIO_Init+0x330>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d031      	beq.n	800269a <HAL_GPIO_Init+0x23a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a56      	ldr	r2, [pc, #344]	; (8002794 <HAL_GPIO_Init+0x334>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02b      	beq.n	8002696 <HAL_GPIO_Init+0x236>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a55      	ldr	r2, [pc, #340]	; (8002798 <HAL_GPIO_Init+0x338>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d025      	beq.n	8002692 <HAL_GPIO_Init+0x232>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a54      	ldr	r2, [pc, #336]	; (800279c <HAL_GPIO_Init+0x33c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01f      	beq.n	800268e <HAL_GPIO_Init+0x22e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a53      	ldr	r2, [pc, #332]	; (80027a0 <HAL_GPIO_Init+0x340>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d019      	beq.n	800268a <HAL_GPIO_Init+0x22a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_GPIO_Init+0x344>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_GPIO_Init+0x226>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a51      	ldr	r2, [pc, #324]	; (80027a8 <HAL_GPIO_Init+0x348>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00d      	beq.n	8002682 <HAL_GPIO_Init+0x222>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a50      	ldr	r2, [pc, #320]	; (80027ac <HAL_GPIO_Init+0x34c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <HAL_GPIO_Init+0x21e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4f      	ldr	r2, [pc, #316]	; (80027b0 <HAL_GPIO_Init+0x350>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_GPIO_Init+0x21a>
 8002676:	2309      	movs	r3, #9
 8002678:	e012      	b.n	80026a0 <HAL_GPIO_Init+0x240>
 800267a:	230a      	movs	r3, #10
 800267c:	e010      	b.n	80026a0 <HAL_GPIO_Init+0x240>
 800267e:	2308      	movs	r3, #8
 8002680:	e00e      	b.n	80026a0 <HAL_GPIO_Init+0x240>
 8002682:	2307      	movs	r3, #7
 8002684:	e00c      	b.n	80026a0 <HAL_GPIO_Init+0x240>
 8002686:	2306      	movs	r3, #6
 8002688:	e00a      	b.n	80026a0 <HAL_GPIO_Init+0x240>
 800268a:	2305      	movs	r3, #5
 800268c:	e008      	b.n	80026a0 <HAL_GPIO_Init+0x240>
 800268e:	2304      	movs	r3, #4
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x240>
 8002692:	2303      	movs	r3, #3
 8002694:	e004      	b.n	80026a0 <HAL_GPIO_Init+0x240>
 8002696:	2302      	movs	r3, #2
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_Init+0x240>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x240>
 800269e:	2300      	movs	r3, #0
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f002 0203 	and.w	r2, r2, #3
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4093      	lsls	r3, r2
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b0:	4935      	ldr	r1, [pc, #212]	; (8002788 <HAL_GPIO_Init+0x328>)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_GPIO_Init+0x354>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e2:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_GPIO_Init+0x354>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026e8:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <HAL_GPIO_Init+0x354>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800270c:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <HAL_GPIO_Init+0x354>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <HAL_GPIO_Init+0x354>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002736:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <HAL_GPIO_Init+0x354>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_GPIO_Init+0x354>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_GPIO_Init+0x354>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b0f      	cmp	r3, #15
 8002770:	f67f ae84 	bls.w	800247c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40013800 	.word	0x40013800
 800278c:	40020000 	.word	0x40020000
 8002790:	40020400 	.word	0x40020400
 8002794:	40020800 	.word	0x40020800
 8002798:	40020c00 	.word	0x40020c00
 800279c:	40021000 	.word	0x40021000
 80027a0:	40021400 	.word	0x40021400
 80027a4:	40021800 	.word	0x40021800
 80027a8:	40021c00 	.word	0x40021c00
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40022400 	.word	0x40022400
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
 80027c4:	4613      	mov	r3, r2
 80027c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c8:	787b      	ldrb	r3, [r7, #1]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027d4:	e003      	b.n	80027de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027d6:	887b      	ldrh	r3, [r7, #2]
 80027d8:	041a      	lsls	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	619a      	str	r2, [r3, #24]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e264      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d075      	beq.n	80028f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280a:	4ba3      	ldr	r3, [pc, #652]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d00c      	beq.n	8002830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	4ba0      	ldr	r3, [pc, #640]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281e:	2b08      	cmp	r3, #8
 8002820:	d112      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b9d      	ldr	r3, [pc, #628]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800282e:	d10b      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	4b99      	ldr	r3, [pc, #612]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05b      	beq.n	80028f4 <HAL_RCC_OscConfig+0x108>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d157      	bne.n	80028f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e23f      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x74>
 8002852:	4b91      	ldr	r3, [pc, #580]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a90      	ldr	r2, [pc, #576]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e01d      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x98>
 800286a:	4b8b      	ldr	r3, [pc, #556]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a8a      	ldr	r2, [pc, #552]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a87      	ldr	r2, [pc, #540]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002884:	4b84      	ldr	r3, [pc, #528]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a83      	ldr	r2, [pc, #524]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a80      	ldr	r2, [pc, #512]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe ff42 	bl	800172c <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe ff3e 	bl	800172c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e204      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0xc0>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe ff2e 	bl	800172c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe ff2a 	bl	800172c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1f0      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0xe8>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002902:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290e:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	2b08      	cmp	r3, #8
 8002918:	d11c      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e1c4      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4952      	ldr	r1, [pc, #328]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002952:	e03a      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295c:	4b4f      	ldr	r3, [pc, #316]	; (8002a9c <HAL_RCC_OscConfig+0x2b0>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe fee3 	bl	800172c <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296a:	f7fe fedf 	bl	800172c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1a5      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4940      	ldr	r1, [pc, #256]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <HAL_RCC_OscConfig+0x2b0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7fe fec2 	bl	800172c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ac:	f7fe febe 	bl	800172c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e184      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d030      	beq.n	8002a38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <HAL_RCC_OscConfig+0x2b4>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fea2 	bl	800172c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ec:	f7fe fe9e 	bl	800172c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e164      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x200>
 8002a0a:	e015      	b.n	8002a38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x2b4>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fe8b 	bl	800172c <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1a:	f7fe fe87 	bl	800172c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e14d      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80a0 	beq.w	8002b86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_OscConfig+0x2b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d121      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_RCC_OscConfig+0x2b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <HAL_RCC_OscConfig+0x2b8>)
 8002a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fe4d 	bl	800172c <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	e011      	b.n	8002aba <HAL_RCC_OscConfig+0x2ce>
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	42470000 	.word	0x42470000
 8002aa0:	42470e80 	.word	0x42470e80
 8002aa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa8:	f7fe fe40 	bl	800172c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e106      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aba:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <HAL_RCC_OscConfig+0x4e4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_OscConfig+0x2f0>
 8002ace:	4b81      	ldr	r3, [pc, #516]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a80      	ldr	r2, [pc, #512]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	e01c      	b.n	8002b16 <HAL_RCC_OscConfig+0x32a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d10c      	bne.n	8002afe <HAL_RCC_OscConfig+0x312>
 8002ae4:	4b7b      	ldr	r3, [pc, #492]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a7a      	ldr	r2, [pc, #488]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	4b78      	ldr	r3, [pc, #480]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a77      	ldr	r2, [pc, #476]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	e00b      	b.n	8002b16 <HAL_RCC_OscConfig+0x32a>
 8002afe:	4b75      	ldr	r3, [pc, #468]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a74      	ldr	r2, [pc, #464]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	4b72      	ldr	r3, [pc, #456]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a71      	ldr	r2, [pc, #452]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d015      	beq.n	8002b4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fe05 	bl	800172c <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7fe fe01 	bl	800172c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e0c5      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ee      	beq.n	8002b26 <HAL_RCC_OscConfig+0x33a>
 8002b48:	e014      	b.n	8002b74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fdef 	bl	800172c <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe fdeb 	bl	800172c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0af      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b68:	4b5a      	ldr	r3, [pc, #360]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ee      	bne.n	8002b52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b74:	7dfb      	ldrb	r3, [r7, #23]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d105      	bne.n	8002b86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7a:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a55      	ldr	r2, [pc, #340]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 809b 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d05c      	beq.n	8002c56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d141      	bne.n	8002c28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba4:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <HAL_RCC_OscConfig+0x4ec>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe fdbf 	bl	800172c <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fe fdbb 	bl	800172c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e081      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc4:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	019b      	lsls	r3, r3, #6
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	3b01      	subs	r3, #1
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	061b      	lsls	r3, r3, #24
 8002bf4:	4937      	ldr	r1, [pc, #220]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_RCC_OscConfig+0x4ec>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe fd94 	bl	800172c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fd90 	bl	800172c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e056      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b2e      	ldr	r3, [pc, #184]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x41c>
 8002c26:	e04e      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c28:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCC_OscConfig+0x4ec>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fe fd7d 	bl	800172c <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c36:	f7fe fd79 	bl	800172c <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e03f      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c48:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x44a>
 8002c54:	e037      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e032      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <HAL_RCC_OscConfig+0x4e8>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d028      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d121      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d11a      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c92:	4013      	ands	r3, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d111      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	3b01      	subs	r3, #1
 8002cac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	42470060 	.word	0x42470060

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0cc      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d90c      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b65      	ldr	r3, [pc, #404]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0b8      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d30:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a58      	ldr	r2, [pc, #352]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d48:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	494d      	ldr	r1, [pc, #308]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d044      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e067      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4934      	ldr	r1, [pc, #208]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fcae 	bl	800172c <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fe fcaa 	bl	800172c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e04f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d20c      	bcs.n	8002e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e032      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4916      	ldr	r1, [pc, #88]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	490e      	ldr	r1, [pc, #56]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e62:	f000 f821 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	490a      	ldr	r1, [pc, #40]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	5ccb      	ldrb	r3, [r1, r3]
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fb5c 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	080087c8 	.word	0x080087c8
 8002ea0:	20000014 	.word	0x20000014
 8002ea4:	20000018 	.word	0x20000018

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec0:	4b67      	ldr	r3, [pc, #412]	; (8003060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d00d      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	f200 80bd 	bhi.w	800304c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x34>
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eda:	e0b7      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b61      	ldr	r3, [pc, #388]	; (8003064 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ede:	60bb      	str	r3, [r7, #8]
       break;
 8002ee0:	e0b7      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b61      	ldr	r3, [pc, #388]	; (8003068 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ee4:	60bb      	str	r3, [r7, #8]
      break;
 8002ee6:	e0b4      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4b5d      	ldr	r3, [pc, #372]	; (8003060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d04d      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efe:	4b58      	ldr	r3, [pc, #352]	; (8003060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	099b      	lsrs	r3, r3, #6
 8002f04:	461a      	mov	r2, r3
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	ea02 0800 	and.w	r8, r2, r0
 8002f16:	ea03 0901 	and.w	r9, r3, r1
 8002f1a:	4640      	mov	r0, r8
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	014b      	lsls	r3, r1, #5
 8002f28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f2c:	0142      	lsls	r2, r0, #5
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	ebb0 0008 	subs.w	r0, r0, r8
 8002f36:	eb61 0109 	sbc.w	r1, r1, r9
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	018b      	lsls	r3, r1, #6
 8002f44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f48:	0182      	lsls	r2, r0, #6
 8002f4a:	1a12      	subs	r2, r2, r0
 8002f4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f50:	f04f 0000 	mov.w	r0, #0
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	00d9      	lsls	r1, r3, #3
 8002f5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f5e:	00d0      	lsls	r0, r2, #3
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	eb12 0208 	adds.w	r2, r2, r8
 8002f68:	eb43 0309 	adc.w	r3, r3, r9
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	0259      	lsls	r1, r3, #9
 8002f76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f7a:	0250      	lsls	r0, r2, #9
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	f7fd f930 	bl	80001f0 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4613      	mov	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e04a      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9a:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	ea02 0400 	and.w	r4, r2, r0
 8002fb2:	ea03 0501 	and.w	r5, r3, r1
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	4629      	mov	r1, r5
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	014b      	lsls	r3, r1, #5
 8002fc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fc8:	0142      	lsls	r2, r0, #5
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	1b00      	subs	r0, r0, r4
 8002fd0:	eb61 0105 	sbc.w	r1, r1, r5
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	018b      	lsls	r3, r1, #6
 8002fde:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fe2:	0182      	lsls	r2, r0, #6
 8002fe4:	1a12      	subs	r2, r2, r0
 8002fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fea:	f04f 0000 	mov.w	r0, #0
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	00d9      	lsls	r1, r3, #3
 8002ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ff8:	00d0      	lsls	r0, r2, #3
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	1912      	adds	r2, r2, r4
 8003000:	eb45 0303 	adc.w	r3, r5, r3
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	0299      	lsls	r1, r3, #10
 800300e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003012:	0290      	lsls	r0, r2, #10
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	461a      	mov	r2, r3
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	f7fd f8e4 	bl	80001f0 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	60bb      	str	r3, [r7, #8]
      break;
 800304a:	e002      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800304e:	60bb      	str	r3, [r7, #8]
      break;
 8003050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003052:	68bb      	ldr	r3, [r7, #8]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	00f42400 	.word	0x00f42400
 8003068:	007a1200 	.word	0x007a1200

0800306c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_RCC_GetHCLKFreq+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000014 	.word	0x20000014

08003084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003088:	f7ff fff0 	bl	800306c <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	0a9b      	lsrs	r3, r3, #10
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4903      	ldr	r1, [pc, #12]	; (80030a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	080087d8 	.word	0x080087d8

080030ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030b0:	f7ff ffdc 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0b5b      	lsrs	r3, r3, #13
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4903      	ldr	r1, [pc, #12]	; (80030d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	080087d8 	.word	0x080087d8

080030d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	220f      	movs	r2, #15
 80030e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_RCC_GetClockConfig+0x5c>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0203 	and.w	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_RCC_GetClockConfig+0x5c>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_RCC_GetClockConfig+0x5c>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_RCC_GetClockConfig+0x5c>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <HAL_RCC_GetClockConfig+0x60>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 020f 	and.w	r2, r3, #15
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	601a      	str	r2, [r3, #0]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	40023c00 	.word	0x40023c00

08003138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07b      	b.n	8003242 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2b00      	cmp	r3, #0
 8003150:	d108      	bne.n	8003164 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800315a:	d009      	beq.n	8003170 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	61da      	str	r2, [r3, #28]
 8003162:	e005      	b.n	8003170 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe f862 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	ea42 0103 	orr.w	r1, r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0104 	and.w	r1, r3, #4
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f003 0210 	and.w	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003230:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b088      	sub	sp, #32
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_SPI_Transmit+0x22>
 8003268:	2302      	movs	r3, #2
 800326a:	e126      	b.n	80034ba <HAL_SPI_Transmit+0x270>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003274:	f7fe fa5a 	bl	800172c <HAL_GetTick>
 8003278:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d002      	beq.n	8003290 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800328a:	2302      	movs	r3, #2
 800328c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800328e:	e10b      	b.n	80034a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_SPI_Transmit+0x52>
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032a0:	e102      	b.n	80034a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2203      	movs	r2, #3
 80032a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	88fa      	ldrh	r2, [r7, #6]
 80032ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e8:	d10f      	bne.n	800330a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003308:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d007      	beq.n	8003328 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003326:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003330:	d14b      	bne.n	80033ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_SPI_Transmit+0xf6>
 800333a:	8afb      	ldrh	r3, [r7, #22]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d13e      	bne.n	80033be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	881a      	ldrh	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	1c9a      	adds	r2, r3, #2
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003364:	e02b      	b.n	80033be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d112      	bne.n	800339a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	881a      	ldrh	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	1c9a      	adds	r2, r3, #2
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	86da      	strh	r2, [r3, #54]	; 0x36
 8003398:	e011      	b.n	80033be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800339a:	f7fe f9c7 	bl	800172c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d803      	bhi.n	80033b2 <HAL_SPI_Transmit+0x168>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b0:	d102      	bne.n	80033b8 <HAL_SPI_Transmit+0x16e>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033bc:	e074      	b.n	80034a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ce      	bne.n	8003366 <HAL_SPI_Transmit+0x11c>
 80033c8:	e04c      	b.n	8003464 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_Transmit+0x18e>
 80033d2:	8afb      	ldrh	r3, [r7, #22]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d140      	bne.n	800345a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	7812      	ldrb	r2, [r2, #0]
 80033e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033fe:	e02c      	b.n	800345a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	d113      	bne.n	8003436 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	86da      	strh	r2, [r3, #54]	; 0x36
 8003434:	e011      	b.n	800345a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003436:	f7fe f979 	bl	800172c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d803      	bhi.n	800344e <HAL_SPI_Transmit+0x204>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800344c:	d102      	bne.n	8003454 <HAL_SPI_Transmit+0x20a>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003458:	e026      	b.n	80034a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1cd      	bne.n	8003400 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	6839      	ldr	r1, [r7, #0]
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fbcb 	bl	8003c04 <SPI_EndRxTxTransaction>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e000      	b.n	80034a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b088      	sub	sp, #32
 80034c6:	af02      	add	r7, sp, #8
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034de:	d112      	bne.n	8003506 <HAL_SPI_Receive+0x44>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10e      	bne.n	8003506 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2204      	movs	r2, #4
 80034ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	4613      	mov	r3, r2
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f8f1 	bl	80036e4 <HAL_SPI_TransmitReceive>
 8003502:	4603      	mov	r3, r0
 8003504:	e0ea      	b.n	80036dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_SPI_Receive+0x52>
 8003510:	2302      	movs	r3, #2
 8003512:	e0e3      	b.n	80036dc <HAL_SPI_Receive+0x21a>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800351c:	f7fe f906 	bl	800172c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800352e:	2302      	movs	r3, #2
 8003530:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003532:	e0ca      	b.n	80036ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_SPI_Receive+0x7e>
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003544:	e0c1      	b.n	80036ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2204      	movs	r2, #4
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358c:	d10f      	bne.n	80035ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d007      	beq.n	80035cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d162      	bne.n	800369a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035d4:	e02e      	b.n	8003634 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d115      	bne.n	8003610 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f103 020c 	add.w	r2, r3, #12
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800360e:	e011      	b.n	8003634 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003610:	f7fe f88c 	bl	800172c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d803      	bhi.n	8003628 <HAL_SPI_Receive+0x166>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003626:	d102      	bne.n	800362e <HAL_SPI_Receive+0x16c>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003632:	e04a      	b.n	80036ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1cb      	bne.n	80035d6 <HAL_SPI_Receive+0x114>
 800363e:	e031      	b.n	80036a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d113      	bne.n	8003676 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	b292      	uxth	r2, r2
 800365a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	1c9a      	adds	r2, r3, #2
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003674:	e011      	b.n	800369a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003676:	f7fe f859 	bl	800172c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d803      	bhi.n	800368e <HAL_SPI_Receive+0x1cc>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800368c:	d102      	bne.n	8003694 <HAL_SPI_Receive+0x1d2>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003698:	e017      	b.n	80036ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1cd      	bne.n	8003640 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	6839      	ldr	r1, [r7, #0]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fa45 	bl	8003b38 <SPI_EndRxTransaction>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
 80036c6:	e000      	b.n	80036ca <HAL_SPI_Receive+0x208>
  }

error :
 80036c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036da:	7dfb      	ldrb	r3, [r7, #23]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	; 0x30
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036f2:	2301      	movs	r3, #1
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_SPI_TransmitReceive+0x26>
 8003706:	2302      	movs	r3, #2
 8003708:	e18a      	b.n	8003a20 <HAL_SPI_TransmitReceive+0x33c>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003712:	f7fe f80b 	bl	800172c <HAL_GetTick>
 8003716:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800372c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003730:	2b01      	cmp	r3, #1
 8003732:	d00f      	beq.n	8003754 <HAL_SPI_TransmitReceive+0x70>
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800373a:	d107      	bne.n	800374c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <HAL_SPI_TransmitReceive+0x68>
 8003744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003748:	2b04      	cmp	r3, #4
 800374a:	d003      	beq.n	8003754 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800374c:	2302      	movs	r3, #2
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003752:	e15b      	b.n	8003a0c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_SPI_TransmitReceive+0x82>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_SPI_TransmitReceive+0x82>
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800376c:	e14e      	b.n	8003a0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b04      	cmp	r3, #4
 8003778:	d003      	beq.n	8003782 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2205      	movs	r2, #5
 800377e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	887a      	ldrh	r2, [r7, #2]
 8003792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	887a      	ldrh	r2, [r7, #2]
 8003798:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	887a      	ldrh	r2, [r7, #2]
 80037a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	887a      	ldrh	r2, [r7, #2]
 80037aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b40      	cmp	r3, #64	; 0x40
 80037c4:	d007      	beq.n	80037d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037de:	d178      	bne.n	80038d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_SPI_TransmitReceive+0x10a>
 80037e8:	8b7b      	ldrh	r3, [r7, #26]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d166      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	1c9a      	adds	r2, r3, #2
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003812:	e053      	b.n	80038bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d11b      	bne.n	800385a <HAL_SPI_TransmitReceive+0x176>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d016      	beq.n	800385a <HAL_SPI_TransmitReceive+0x176>
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	2b01      	cmp	r3, #1
 8003830:	d113      	bne.n	800385a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	881a      	ldrh	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	1c9a      	adds	r2, r3, #2
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d119      	bne.n	800389c <HAL_SPI_TransmitReceive+0x1b8>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d014      	beq.n	800389c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	b292      	uxth	r2, r2
 800387e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	1c9a      	adds	r2, r3, #2
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003898:	2301      	movs	r3, #1
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800389c:	f7fd ff46 	bl	800172c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d807      	bhi.n	80038bc <HAL_SPI_TransmitReceive+0x1d8>
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038b2:	d003      	beq.n	80038bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038ba:	e0a7      	b.n	8003a0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1a6      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x130>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1a1      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x130>
 80038d0:	e07c      	b.n	80039cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_SPI_TransmitReceive+0x1fc>
 80038da:	8b7b      	ldrh	r3, [r7, #26]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d16b      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	7812      	ldrb	r2, [r2, #0]
 80038ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003906:	e057      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b02      	cmp	r3, #2
 8003914:	d11c      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x26c>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <HAL_SPI_TransmitReceive+0x26c>
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	2b01      	cmp	r3, #1
 8003924:	d114      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	330c      	adds	r3, #12
 8003930:	7812      	ldrb	r2, [r2, #0]
 8003932:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d119      	bne.n	8003992 <HAL_SPI_TransmitReceive+0x2ae>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d014      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800398e:	2301      	movs	r3, #1
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003992:	f7fd fecb 	bl	800172c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800399e:	429a      	cmp	r2, r3
 80039a0:	d803      	bhi.n	80039aa <HAL_SPI_TransmitReceive+0x2c6>
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039a8:	d102      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x2cc>
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039b6:	e029      	b.n	8003a0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1a2      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x224>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d19d      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f917 	bl	8003c04 <SPI_EndRxTxTransaction>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80039e8:	e010      	b.n	8003a0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	e000      	b.n	8003a0c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3730      	adds	r7, #48	; 0x30
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a38:	f7fd fe78 	bl	800172c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	4413      	add	r3, r2
 8003a46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a48:	f7fd fe70 	bl	800172c <HAL_GetTick>
 8003a4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a4e:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	015b      	lsls	r3, r3, #5
 8003a54:	0d1b      	lsrs	r3, r3, #20
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a5e:	e054      	b.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a66:	d050      	beq.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a68:	f7fd fe60 	bl	800172c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d902      	bls.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d13d      	bne.n	8003afa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a96:	d111      	bne.n	8003abc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa0:	d004      	beq.n	8003aac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d107      	bne.n	8003abc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d10f      	bne.n	8003ae6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e017      	b.n	8003b2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d19b      	bne.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000014 	.word	0x20000014

08003b38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4c:	d111      	bne.n	8003b72 <SPI_EndRxTransaction+0x3a>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b56:	d004      	beq.n	8003b62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b60:	d107      	bne.n	8003b72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b7a:	d12a      	bne.n	8003bd2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b84:	d012      	beq.n	8003bac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff ff49 	bl	8003a28 <SPI_WaitFlagStateUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d02d      	beq.n	8003bf8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e026      	b.n	8003bfa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7ff ff36 	bl	8003a28 <SPI_WaitFlagStateUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01a      	beq.n	8003bf8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e013      	b.n	8003bfa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2101      	movs	r1, #1
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7ff ff23 	bl	8003a28 <SPI_WaitFlagStateUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	f043 0220 	orr.w	r2, r3, #32
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e000      	b.n	8003bfa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <SPI_EndRxTxTransaction+0x7c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <SPI_EndRxTxTransaction+0x80>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0d5b      	lsrs	r3, r3, #21
 8003c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c20:	fb02 f303 	mul.w	r3, r2, r3
 8003c24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c2e:	d112      	bne.n	8003c56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2200      	movs	r2, #0
 8003c38:	2180      	movs	r1, #128	; 0x80
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff fef4 	bl	8003a28 <SPI_WaitFlagStateUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e00f      	b.n	8003c76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6c:	2b80      	cmp	r3, #128	; 0x80
 8003c6e:	d0f2      	beq.n	8003c56 <SPI_EndRxTxTransaction+0x52>
 8003c70:	e000      	b.n	8003c74 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c72:	bf00      	nop
  }

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000014 	.word	0x20000014
 8003c84:	165e9f81 	.word	0x165e9f81

08003c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e041      	b.n	8003d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fd fb6c 	bl	800138c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 fc7a 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d001      	beq.n	8003d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e04e      	b.n	8003dde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <HAL_TIM_Base_Start_IT+0xc4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d022      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x80>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d01d      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x80>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d018      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x80>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d013      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x80>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00e      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x80>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <HAL_TIM_Base_Start_IT+0xd4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d009      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x80>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x80>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <HAL_TIM_Base_Start_IT+0xdc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d111      	bne.n	8003dcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d010      	beq.n	8003ddc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dca:	e007      	b.n	8003ddc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40000c00 	.word	0x40000c00
 8003dfc:	40010400 	.word	0x40010400
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40001800 	.word	0x40001800

08003e08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e041      	b.n	8003e9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f839 	bl	8003ea6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 fbba 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_TIM_PWM_Start+0x24>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	e022      	b.n	8003f26 <HAL_TIM_PWM_Start+0x6a>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d109      	bne.n	8003efa <HAL_TIM_PWM_Start+0x3e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	bf14      	ite	ne
 8003ef2:	2301      	movne	r3, #1
 8003ef4:	2300      	moveq	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	e015      	b.n	8003f26 <HAL_TIM_PWM_Start+0x6a>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d109      	bne.n	8003f14 <HAL_TIM_PWM_Start+0x58>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	bf14      	ite	ne
 8003f0c:	2301      	movne	r3, #1
 8003f0e:	2300      	moveq	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	e008      	b.n	8003f26 <HAL_TIM_PWM_Start+0x6a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07c      	b.n	8004028 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d104      	bne.n	8003f3e <HAL_TIM_PWM_Start+0x82>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	e013      	b.n	8003f66 <HAL_TIM_PWM_Start+0xaa>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d104      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x92>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4c:	e00b      	b.n	8003f66 <HAL_TIM_PWM_Start+0xaa>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d104      	bne.n	8003f5e <HAL_TIM_PWM_Start+0xa2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f5c:	e003      	b.n	8003f66 <HAL_TIM_PWM_Start+0xaa>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fe10 	bl	8004b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <HAL_TIM_PWM_Start+0x174>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_TIM_PWM_Start+0xcc>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2c      	ldr	r2, [pc, #176]	; (8004034 <HAL_TIM_PWM_Start+0x178>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d101      	bne.n	8003f8c <HAL_TIM_PWM_Start+0xd0>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_TIM_PWM_Start+0xd2>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_TIM_PWM_Start+0x174>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d022      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x136>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d01d      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x136>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_TIM_PWM_Start+0x17c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d018      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x136>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1d      	ldr	r2, [pc, #116]	; (800403c <HAL_TIM_PWM_Start+0x180>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x136>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_TIM_PWM_Start+0x184>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x136>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a16      	ldr	r2, [pc, #88]	; (8004034 <HAL_TIM_PWM_Start+0x178>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x136>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a18      	ldr	r2, [pc, #96]	; (8004044 <HAL_TIM_PWM_Start+0x188>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x136>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a16      	ldr	r2, [pc, #88]	; (8004048 <HAL_TIM_PWM_Start+0x18c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d111      	bne.n	8004016 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b06      	cmp	r3, #6
 8004002:	d010      	beq.n	8004026 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004014:	e007      	b.n	8004026 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40010000 	.word	0x40010000
 8004034:	40010400 	.word	0x40010400
 8004038:	40000400 	.word	0x40000400
 800403c:	40000800 	.word	0x40000800
 8004040:	40000c00 	.word	0x40000c00
 8004044:	40014000 	.word	0x40014000
 8004048:	40001800 	.word	0x40001800

0800404c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d122      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b02      	cmp	r3, #2
 800406e:	d11b      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0202 	mvn.w	r2, #2
 8004078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa77 	bl	8004582 <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fa69 	bl	800456e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fa7a 	bl	8004596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d122      	bne.n	80040fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d11b      	bne.n	80040fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0204 	mvn.w	r2, #4
 80040cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fa4d 	bl	8004582 <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fa3f 	bl	800456e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fa50 	bl	8004596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b08      	cmp	r3, #8
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b08      	cmp	r3, #8
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0208 	mvn.w	r2, #8
 8004120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2204      	movs	r2, #4
 8004126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa23 	bl	8004582 <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fa15 	bl	800456e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa26 	bl	8004596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b10      	cmp	r3, #16
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b10      	cmp	r3, #16
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0210 	mvn.w	r2, #16
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2208      	movs	r2, #8
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f9f9 	bl	8004582 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f9eb 	bl	800456e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f9fc 	bl	8004596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d10e      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d107      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0201 	mvn.w	r2, #1
 80041c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fc ffae 	bl	800112c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b80      	cmp	r3, #128	; 0x80
 80041dc:	d10e      	bne.n	80041fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b80      	cmp	r3, #128	; 0x80
 80041ea:	d107      	bne.n	80041fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fdca 	bl	8004d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	d10e      	bne.n	8004228 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	d107      	bne.n	8004228 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9c1 	bl	80045aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b20      	cmp	r3, #32
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b20      	cmp	r3, #32
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0220 	mvn.w	r2, #32
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fd94 	bl	8004d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004276:	2302      	movs	r3, #2
 8004278:	e0ae      	b.n	80043d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b0c      	cmp	r3, #12
 8004286:	f200 809f 	bhi.w	80043c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042c5 	.word	0x080042c5
 8004294:	080043c9 	.word	0x080043c9
 8004298:	080043c9 	.word	0x080043c9
 800429c:	080043c9 	.word	0x080043c9
 80042a0:	08004305 	.word	0x08004305
 80042a4:	080043c9 	.word	0x080043c9
 80042a8:	080043c9 	.word	0x080043c9
 80042ac:	080043c9 	.word	0x080043c9
 80042b0:	08004347 	.word	0x08004347
 80042b4:	080043c9 	.word	0x080043c9
 80042b8:	080043c9 	.word	0x080043c9
 80042bc:	080043c9 	.word	0x080043c9
 80042c0:	08004387 	.word	0x08004387
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fa18 	bl	8004700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0208 	orr.w	r2, r2, #8
 80042de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0204 	bic.w	r2, r2, #4
 80042ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6999      	ldr	r1, [r3, #24]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	619a      	str	r2, [r3, #24]
      break;
 8004302:	e064      	b.n	80043ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fa68 	bl	80047e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6999      	ldr	r1, [r3, #24]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	021a      	lsls	r2, r3, #8
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	619a      	str	r2, [r3, #24]
      break;
 8004344:	e043      	b.n	80043ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fabd 	bl	80048cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0208 	orr.w	r2, r2, #8
 8004360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0204 	bic.w	r2, r2, #4
 8004370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69d9      	ldr	r1, [r3, #28]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	61da      	str	r2, [r3, #28]
      break;
 8004384:	e023      	b.n	80043ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fb11 	bl	80049b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69d9      	ldr	r1, [r3, #28]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	021a      	lsls	r2, r3, #8
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	61da      	str	r2, [r3, #28]
      break;
 80043c6:	e002      	b.n	80043ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
      break;
 80043cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_TIM_ConfigClockSource+0x1c>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e0b4      	b.n	8004566 <HAL_TIM_ConfigClockSource+0x186>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800441a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004434:	d03e      	beq.n	80044b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443a:	f200 8087 	bhi.w	800454c <HAL_TIM_ConfigClockSource+0x16c>
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004442:	f000 8086 	beq.w	8004552 <HAL_TIM_ConfigClockSource+0x172>
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444a:	d87f      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 800444c:	2b70      	cmp	r3, #112	; 0x70
 800444e:	d01a      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0xa6>
 8004450:	2b70      	cmp	r3, #112	; 0x70
 8004452:	d87b      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 8004454:	2b60      	cmp	r3, #96	; 0x60
 8004456:	d050      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x11a>
 8004458:	2b60      	cmp	r3, #96	; 0x60
 800445a:	d877      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b50      	cmp	r3, #80	; 0x50
 800445e:	d03c      	beq.n	80044da <HAL_TIM_ConfigClockSource+0xfa>
 8004460:	2b50      	cmp	r3, #80	; 0x50
 8004462:	d873      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	d058      	beq.n	800451a <HAL_TIM_ConfigClockSource+0x13a>
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d86f      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 800446c:	2b30      	cmp	r3, #48	; 0x30
 800446e:	d064      	beq.n	800453a <HAL_TIM_ConfigClockSource+0x15a>
 8004470:	2b30      	cmp	r3, #48	; 0x30
 8004472:	d86b      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b20      	cmp	r3, #32
 8004476:	d060      	beq.n	800453a <HAL_TIM_ConfigClockSource+0x15a>
 8004478:	2b20      	cmp	r3, #32
 800447a:	d867      	bhi.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d05c      	beq.n	800453a <HAL_TIM_ConfigClockSource+0x15a>
 8004480:	2b10      	cmp	r3, #16
 8004482:	d05a      	beq.n	800453a <HAL_TIM_ConfigClockSource+0x15a>
 8004484:	e062      	b.n	800454c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6899      	ldr	r1, [r3, #8]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f000 fb5d 	bl	8004b54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	609a      	str	r2, [r3, #8]
      break;
 80044b2:	e04f      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6899      	ldr	r1, [r3, #8]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f000 fb46 	bl	8004b54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044d6:	609a      	str	r2, [r3, #8]
      break;
 80044d8:	e03c      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6859      	ldr	r1, [r3, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	461a      	mov	r2, r3
 80044e8:	f000 faba 	bl	8004a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2150      	movs	r1, #80	; 0x50
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fb13 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 80044f8:	e02c      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6859      	ldr	r1, [r3, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	461a      	mov	r2, r3
 8004508:	f000 fad9 	bl	8004abe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2160      	movs	r1, #96	; 0x60
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fb03 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 8004518:	e01c      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6859      	ldr	r1, [r3, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	461a      	mov	r2, r3
 8004528:	f000 fa9a 	bl	8004a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2140      	movs	r1, #64	; 0x40
 8004532:	4618      	mov	r0, r3
 8004534:	f000 faf3 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 8004538:	e00c      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f000 faea 	bl	8004b1e <TIM_ITRx_SetConfig>
      break;
 800454a:	e003      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
      break;
 8004550:	e000      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004552:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004564:	7bfb      	ldrb	r3, [r7, #15]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a40      	ldr	r2, [pc, #256]	; (80046d4 <TIM_Base_SetConfig+0x114>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d013      	beq.n	8004600 <TIM_Base_SetConfig+0x40>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	d00f      	beq.n	8004600 <TIM_Base_SetConfig+0x40>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3d      	ldr	r2, [pc, #244]	; (80046d8 <TIM_Base_SetConfig+0x118>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00b      	beq.n	8004600 <TIM_Base_SetConfig+0x40>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3c      	ldr	r2, [pc, #240]	; (80046dc <TIM_Base_SetConfig+0x11c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d007      	beq.n	8004600 <TIM_Base_SetConfig+0x40>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a3b      	ldr	r2, [pc, #236]	; (80046e0 <TIM_Base_SetConfig+0x120>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_Base_SetConfig+0x40>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a3a      	ldr	r2, [pc, #232]	; (80046e4 <TIM_Base_SetConfig+0x124>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d108      	bne.n	8004612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a2f      	ldr	r2, [pc, #188]	; (80046d4 <TIM_Base_SetConfig+0x114>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d02b      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004620:	d027      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2c      	ldr	r2, [pc, #176]	; (80046d8 <TIM_Base_SetConfig+0x118>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d023      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2b      	ldr	r2, [pc, #172]	; (80046dc <TIM_Base_SetConfig+0x11c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01f      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <TIM_Base_SetConfig+0x120>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01b      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a29      	ldr	r2, [pc, #164]	; (80046e4 <TIM_Base_SetConfig+0x124>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d017      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a28      	ldr	r2, [pc, #160]	; (80046e8 <TIM_Base_SetConfig+0x128>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a27      	ldr	r2, [pc, #156]	; (80046ec <TIM_Base_SetConfig+0x12c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00f      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a26      	ldr	r2, [pc, #152]	; (80046f0 <TIM_Base_SetConfig+0x130>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00b      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a25      	ldr	r2, [pc, #148]	; (80046f4 <TIM_Base_SetConfig+0x134>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d007      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a24      	ldr	r2, [pc, #144]	; (80046f8 <TIM_Base_SetConfig+0x138>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d003      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a23      	ldr	r2, [pc, #140]	; (80046fc <TIM_Base_SetConfig+0x13c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d108      	bne.n	8004684 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <TIM_Base_SetConfig+0x114>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_Base_SetConfig+0xf8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <TIM_Base_SetConfig+0x124>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d103      	bne.n	80046c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	615a      	str	r2, [r3, #20]
}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800
 80046e0:	40000c00 	.word	0x40000c00
 80046e4:	40010400 	.word	0x40010400
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40014400 	.word	0x40014400
 80046f0:	40014800 	.word	0x40014800
 80046f4:	40001800 	.word	0x40001800
 80046f8:	40001c00 	.word	0x40001c00
 80046fc:	40002000 	.word	0x40002000

08004700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0201 	bic.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0303 	bic.w	r3, r3, #3
 8004736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 0302 	bic.w	r3, r3, #2
 8004748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a20      	ldr	r2, [pc, #128]	; (80047d8 <TIM_OC1_SetConfig+0xd8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_OC1_SetConfig+0x64>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <TIM_OC1_SetConfig+0xdc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10c      	bne.n	800477e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f023 0308 	bic.w	r3, r3, #8
 800476a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <TIM_OC1_SetConfig+0xd8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_OC1_SetConfig+0x8e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a14      	ldr	r2, [pc, #80]	; (80047dc <TIM_OC1_SetConfig+0xdc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d111      	bne.n	80047b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800479c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	621a      	str	r2, [r3, #32]
}
 80047cc:	bf00      	nop
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40010400 	.word	0x40010400

080047e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0210 	bic.w	r2, r3, #16
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0320 	bic.w	r3, r3, #32
 800482a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <TIM_OC2_SetConfig+0xe4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_OC2_SetConfig+0x68>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a21      	ldr	r2, [pc, #132]	; (80048c8 <TIM_OC2_SetConfig+0xe8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10d      	bne.n	8004864 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004862:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <TIM_OC2_SetConfig+0xe4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_OC2_SetConfig+0x94>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a16      	ldr	r2, [pc, #88]	; (80048c8 <TIM_OC2_SetConfig+0xe8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d113      	bne.n	800489c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800487a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40010000 	.word	0x40010000
 80048c8:	40010400 	.word	0x40010400

080048cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a21      	ldr	r2, [pc, #132]	; (80049ac <TIM_OC3_SetConfig+0xe0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_OC3_SetConfig+0x66>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a20      	ldr	r2, [pc, #128]	; (80049b0 <TIM_OC3_SetConfig+0xe4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d10d      	bne.n	800494e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800494c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a16      	ldr	r2, [pc, #88]	; (80049ac <TIM_OC3_SetConfig+0xe0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_OC3_SetConfig+0x92>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <TIM_OC3_SetConfig+0xe4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d113      	bne.n	8004986 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800496c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	621a      	str	r2, [r3, #32]
}
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40010400 	.word	0x40010400

080049b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	031b      	lsls	r3, r3, #12
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <TIM_OC4_SetConfig+0xa4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <TIM_OC4_SetConfig+0x68>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <TIM_OC4_SetConfig+0xa8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d109      	bne.n	8004a30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	019b      	lsls	r3, r3, #6
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40010400 	.word	0x40010400

08004a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0201 	bic.w	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f023 030a 	bic.w	r3, r3, #10
 8004a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b087      	sub	sp, #28
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f023 0210 	bic.w	r2, r3, #16
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	031b      	lsls	r3, r3, #12
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004afa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	621a      	str	r2, [r3, #32]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f043 0307 	orr.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	609a      	str	r2, [r3, #8]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	021a      	lsls	r2, r3, #8
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	621a      	str	r2, [r3, #32]
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e05a      	b.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a21      	ldr	r2, [pc, #132]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d01d      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1d      	ldr	r2, [pc, #116]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10c      	bne.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40010400 	.word	0x40010400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40001800 	.word	0x40001800

08004cd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e03d      	b.n	8004d70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e047      	b.n	8004e46 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc fb3a 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2224      	movs	r2, #36	; 0x24
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f931 	bl	8005050 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004e0c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695a      	ldr	r2, [r3, #20]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0208 	orr.w	r2, r2, #8
 8004e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b08a      	sub	sp, #40	; 0x28
 8004e52:	af02      	add	r7, sp, #8
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d17c      	bne.n	8004f68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <HAL_UART_Transmit+0x2c>
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e075      	b.n	8004f6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_UART_Transmit+0x3e>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e06e      	b.n	8004f6a <HAL_UART_Transmit+0x11c>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2221      	movs	r2, #33	; 0x21
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ea2:	f7fc fc43 	bl	800172c <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	88fa      	ldrh	r2, [r7, #6]
 8004eb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebc:	d108      	bne.n	8004ed0 <HAL_UART_Transmit+0x82>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	e003      	b.n	8004ed8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ee0:	e02a      	b.n	8004f38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2180      	movs	r1, #128	; 0x80
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f840 	bl	8004f72 <UART_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e036      	b.n	8004f6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	3302      	adds	r3, #2
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	e007      	b.n	8004f2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	781a      	ldrb	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	3301      	adds	r3, #1
 8004f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1cf      	bne.n	8004ee2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2140      	movs	r1, #64	; 0x40
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f810 	bl	8004f72 <UART_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e006      	b.n	8004f6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e000      	b.n	8004f6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
  }
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b090      	sub	sp, #64	; 0x40
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	603b      	str	r3, [r7, #0]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f82:	e050      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f8a:	d04c      	beq.n	8005026 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d007      	beq.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f92:	f7fc fbcb 	bl	800172c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d241      	bcs.n	8005026 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fc2:	637a      	str	r2, [r7, #52]	; 0x34
 8004fc4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e5      	bne.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3314      	adds	r3, #20
 8004fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f023 0301 	bic.w	r3, r3, #1
 8004fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3314      	adds	r3, #20
 8004ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff6:	623a      	str	r2, [r7, #32]
 8004ff8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	69f9      	ldr	r1, [r7, #28]
 8004ffc:	6a3a      	ldr	r2, [r7, #32]
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	61bb      	str	r3, [r7, #24]
   return(result);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e5      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e00f      	b.n	8005046 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4013      	ands	r3, r2
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	429a      	cmp	r2, r3
 8005034:	bf0c      	ite	eq
 8005036:	2301      	moveq	r3, #1
 8005038:	2300      	movne	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	461a      	mov	r2, r3
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	429a      	cmp	r2, r3
 8005042:	d09f      	beq.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3740      	adds	r7, #64	; 0x40
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	b09f      	sub	sp, #124	; 0x7c
 8005056:	af00      	add	r7, sp, #0
 8005058:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800505a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005066:	68d9      	ldr	r1, [r3, #12]
 8005068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	ea40 0301 	orr.w	r3, r0, r1
 8005070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	431a      	orrs	r2, r3
 800507c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	431a      	orrs	r2, r3
 8005082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800508a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005094:	f021 010c 	bic.w	r1, r1, #12
 8005098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800509e:	430b      	orrs	r3, r1
 80050a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ae:	6999      	ldr	r1, [r3, #24]
 80050b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	ea40 0301 	orr.w	r3, r0, r1
 80050b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4bc5      	ldr	r3, [pc, #788]	; (80053d4 <UART_SetConfig+0x384>)
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d004      	beq.n	80050ce <UART_SetConfig+0x7e>
 80050c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4bc3      	ldr	r3, [pc, #780]	; (80053d8 <UART_SetConfig+0x388>)
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d103      	bne.n	80050d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050ce:	f7fd ffed 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 80050d2:	6778      	str	r0, [r7, #116]	; 0x74
 80050d4:	e002      	b.n	80050dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d6:	f7fd ffd5 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 80050da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e4:	f040 80b6 	bne.w	8005254 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ea:	461c      	mov	r4, r3
 80050ec:	f04f 0500 	mov.w	r5, #0
 80050f0:	4622      	mov	r2, r4
 80050f2:	462b      	mov	r3, r5
 80050f4:	1891      	adds	r1, r2, r2
 80050f6:	6439      	str	r1, [r7, #64]	; 0x40
 80050f8:	415b      	adcs	r3, r3
 80050fa:	647b      	str	r3, [r7, #68]	; 0x44
 80050fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005100:	1912      	adds	r2, r2, r4
 8005102:	eb45 0303 	adc.w	r3, r5, r3
 8005106:	f04f 0000 	mov.w	r0, #0
 800510a:	f04f 0100 	mov.w	r1, #0
 800510e:	00d9      	lsls	r1, r3, #3
 8005110:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005114:	00d0      	lsls	r0, r2, #3
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	1911      	adds	r1, r2, r4
 800511c:	6639      	str	r1, [r7, #96]	; 0x60
 800511e:	416b      	adcs	r3, r5
 8005120:	667b      	str	r3, [r7, #100]	; 0x64
 8005122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	461a      	mov	r2, r3
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	1891      	adds	r1, r2, r2
 800512e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005130:	415b      	adcs	r3, r3
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005138:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800513c:	f7fb f858 	bl	80001f0 <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4ba5      	ldr	r3, [pc, #660]	; (80053dc <UART_SetConfig+0x38c>)
 8005146:	fba3 2302 	umull	r2, r3, r3, r2
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	011e      	lsls	r6, r3, #4
 800514e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005150:	461c      	mov	r4, r3
 8005152:	f04f 0500 	mov.w	r5, #0
 8005156:	4622      	mov	r2, r4
 8005158:	462b      	mov	r3, r5
 800515a:	1891      	adds	r1, r2, r2
 800515c:	6339      	str	r1, [r7, #48]	; 0x30
 800515e:	415b      	adcs	r3, r3
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
 8005162:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005166:	1912      	adds	r2, r2, r4
 8005168:	eb45 0303 	adc.w	r3, r5, r3
 800516c:	f04f 0000 	mov.w	r0, #0
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	00d9      	lsls	r1, r3, #3
 8005176:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800517a:	00d0      	lsls	r0, r2, #3
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	1911      	adds	r1, r2, r4
 8005182:	65b9      	str	r1, [r7, #88]	; 0x58
 8005184:	416b      	adcs	r3, r5
 8005186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	461a      	mov	r2, r3
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	1891      	adds	r1, r2, r2
 8005194:	62b9      	str	r1, [r7, #40]	; 0x28
 8005196:	415b      	adcs	r3, r3
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800519e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051a2:	f7fb f825 	bl	80001f0 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4b8c      	ldr	r3, [pc, #560]	; (80053dc <UART_SetConfig+0x38c>)
 80051ac:	fba3 1302 	umull	r1, r3, r3, r2
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	2164      	movs	r1, #100	; 0x64
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	3332      	adds	r3, #50	; 0x32
 80051be:	4a87      	ldr	r2, [pc, #540]	; (80053dc <UART_SetConfig+0x38c>)
 80051c0:	fba2 2303 	umull	r2, r3, r2, r3
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051cc:	441e      	add	r6, r3
 80051ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d0:	4618      	mov	r0, r3
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	1894      	adds	r4, r2, r2
 80051dc:	623c      	str	r4, [r7, #32]
 80051de:	415b      	adcs	r3, r3
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
 80051e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051e6:	1812      	adds	r2, r2, r0
 80051e8:	eb41 0303 	adc.w	r3, r1, r3
 80051ec:	f04f 0400 	mov.w	r4, #0
 80051f0:	f04f 0500 	mov.w	r5, #0
 80051f4:	00dd      	lsls	r5, r3, #3
 80051f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051fa:	00d4      	lsls	r4, r2, #3
 80051fc:	4622      	mov	r2, r4
 80051fe:	462b      	mov	r3, r5
 8005200:	1814      	adds	r4, r2, r0
 8005202:	653c      	str	r4, [r7, #80]	; 0x50
 8005204:	414b      	adcs	r3, r1
 8005206:	657b      	str	r3, [r7, #84]	; 0x54
 8005208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	461a      	mov	r2, r3
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	1891      	adds	r1, r2, r2
 8005214:	61b9      	str	r1, [r7, #24]
 8005216:	415b      	adcs	r3, r3
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800521e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005222:	f7fa ffe5 	bl	80001f0 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4b6c      	ldr	r3, [pc, #432]	; (80053dc <UART_SetConfig+0x38c>)
 800522c:	fba3 1302 	umull	r1, r3, r3, r2
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	2164      	movs	r1, #100	; 0x64
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	3332      	adds	r3, #50	; 0x32
 800523e:	4a67      	ldr	r2, [pc, #412]	; (80053dc <UART_SetConfig+0x38c>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	f003 0207 	and.w	r2, r3, #7
 800524a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4432      	add	r2, r6
 8005250:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005252:	e0b9      	b.n	80053c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005256:	461c      	mov	r4, r3
 8005258:	f04f 0500 	mov.w	r5, #0
 800525c:	4622      	mov	r2, r4
 800525e:	462b      	mov	r3, r5
 8005260:	1891      	adds	r1, r2, r2
 8005262:	6139      	str	r1, [r7, #16]
 8005264:	415b      	adcs	r3, r3
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800526c:	1912      	adds	r2, r2, r4
 800526e:	eb45 0303 	adc.w	r3, r5, r3
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f04f 0100 	mov.w	r1, #0
 800527a:	00d9      	lsls	r1, r3, #3
 800527c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005280:	00d0      	lsls	r0, r2, #3
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	eb12 0804 	adds.w	r8, r2, r4
 800528a:	eb43 0905 	adc.w	r9, r3, r5
 800528e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4618      	mov	r0, r3
 8005294:	f04f 0100 	mov.w	r1, #0
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	008b      	lsls	r3, r1, #2
 80052a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052a6:	0082      	lsls	r2, r0, #2
 80052a8:	4640      	mov	r0, r8
 80052aa:	4649      	mov	r1, r9
 80052ac:	f7fa ffa0 	bl	80001f0 <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4b49      	ldr	r3, [pc, #292]	; (80053dc <UART_SetConfig+0x38c>)
 80052b6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	011e      	lsls	r6, r3, #4
 80052be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c0:	4618      	mov	r0, r3
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	1894      	adds	r4, r2, r2
 80052cc:	60bc      	str	r4, [r7, #8]
 80052ce:	415b      	adcs	r3, r3
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052d6:	1812      	adds	r2, r2, r0
 80052d8:	eb41 0303 	adc.w	r3, r1, r3
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	f04f 0500 	mov.w	r5, #0
 80052e4:	00dd      	lsls	r5, r3, #3
 80052e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052ea:	00d4      	lsls	r4, r2, #3
 80052ec:	4622      	mov	r2, r4
 80052ee:	462b      	mov	r3, r5
 80052f0:	1814      	adds	r4, r2, r0
 80052f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80052f4:	414b      	adcs	r3, r1
 80052f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f04f 0100 	mov.w	r1, #0
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	008b      	lsls	r3, r1, #2
 800530c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005310:	0082      	lsls	r2, r0, #2
 8005312:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005316:	f7fa ff6b 	bl	80001f0 <__aeabi_uldivmod>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4b2f      	ldr	r3, [pc, #188]	; (80053dc <UART_SetConfig+0x38c>)
 8005320:	fba3 1302 	umull	r1, r3, r3, r2
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	2164      	movs	r1, #100	; 0x64
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	3332      	adds	r3, #50	; 0x32
 8005332:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <UART_SetConfig+0x38c>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800533e:	441e      	add	r6, r3
 8005340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005342:	4618      	mov	r0, r3
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	1894      	adds	r4, r2, r2
 800534e:	603c      	str	r4, [r7, #0]
 8005350:	415b      	adcs	r3, r3
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005358:	1812      	adds	r2, r2, r0
 800535a:	eb41 0303 	adc.w	r3, r1, r3
 800535e:	f04f 0400 	mov.w	r4, #0
 8005362:	f04f 0500 	mov.w	r5, #0
 8005366:	00dd      	lsls	r5, r3, #3
 8005368:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800536c:	00d4      	lsls	r4, r2, #3
 800536e:	4622      	mov	r2, r4
 8005370:	462b      	mov	r3, r5
 8005372:	eb12 0a00 	adds.w	sl, r2, r0
 8005376:	eb43 0b01 	adc.w	fp, r3, r1
 800537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	008b      	lsls	r3, r1, #2
 800538e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005392:	0082      	lsls	r2, r0, #2
 8005394:	4650      	mov	r0, sl
 8005396:	4659      	mov	r1, fp
 8005398:	f7fa ff2a 	bl	80001f0 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <UART_SetConfig+0x38c>)
 80053a2:	fba3 1302 	umull	r1, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	2164      	movs	r1, #100	; 0x64
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	3332      	adds	r3, #50	; 0x32
 80053b4:	4a09      	ldr	r2, [pc, #36]	; (80053dc <UART_SetConfig+0x38c>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	f003 020f 	and.w	r2, r3, #15
 80053c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4432      	add	r2, r6
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	bf00      	nop
 80053ca:	377c      	adds	r7, #124	; 0x7c
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d2:	bf00      	nop
 80053d4:	40011000 	.word	0x40011000
 80053d8:	40011400 	.word	0x40011400
 80053dc:	51eb851f 	.word	0x51eb851f

080053e0 <__NVIC_SetPriority>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	6039      	str	r1, [r7, #0]
 80053ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	db0a      	blt.n	800540a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	490c      	ldr	r1, [pc, #48]	; (800542c <__NVIC_SetPriority+0x4c>)
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	0112      	lsls	r2, r2, #4
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	440b      	add	r3, r1
 8005404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005408:	e00a      	b.n	8005420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	4908      	ldr	r1, [pc, #32]	; (8005430 <__NVIC_SetPriority+0x50>)
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	3b04      	subs	r3, #4
 8005418:	0112      	lsls	r2, r2, #4
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	440b      	add	r3, r1
 800541e:	761a      	strb	r2, [r3, #24]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	e000e100 	.word	0xe000e100
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <SysTick_Handler+0x1c>)
 800543a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800543c:	f001 fdf6 	bl	800702c <xTaskGetSchedulerState>
 8005440:	4603      	mov	r3, r0
 8005442:	2b01      	cmp	r3, #1
 8005444:	d001      	beq.n	800544a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005446:	f002 fddf 	bl	8008008 <xPortSysTickHandler>
  }
}
 800544a:	bf00      	nop
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	e000e010 	.word	0xe000e010

08005454 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005458:	2100      	movs	r1, #0
 800545a:	f06f 0004 	mvn.w	r0, #4
 800545e:	f7ff ffbf 	bl	80053e0 <__NVIC_SetPriority>
#endif
}
 8005462:	bf00      	nop
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800546e:	f3ef 8305 	mrs	r3, IPSR
 8005472:	603b      	str	r3, [r7, #0]
  return(result);
 8005474:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800547a:	f06f 0305 	mvn.w	r3, #5
 800547e:	607b      	str	r3, [r7, #4]
 8005480:	e00c      	b.n	800549c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <osKernelInitialize+0x44>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800548a:	4b08      	ldr	r3, [pc, #32]	; (80054ac <osKernelInitialize+0x44>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005490:	2300      	movs	r3, #0
 8005492:	607b      	str	r3, [r7, #4]
 8005494:	e002      	b.n	800549c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800549a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800549c:	687b      	ldr	r3, [r7, #4]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	200000c0 	.word	0x200000c0

080054b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054b6:	f3ef 8305 	mrs	r3, IPSR
 80054ba:	603b      	str	r3, [r7, #0]
  return(result);
 80054bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80054c2:	f06f 0305 	mvn.w	r3, #5
 80054c6:	607b      	str	r3, [r7, #4]
 80054c8:	e010      	b.n	80054ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054ca:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <osKernelStart+0x48>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d109      	bne.n	80054e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054d2:	f7ff ffbf 	bl	8005454 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054d6:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <osKernelStart+0x48>)
 80054d8:	2202      	movs	r2, #2
 80054da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054dc:	f001 f94a 	bl	8006774 <vTaskStartScheduler>
      stat = osOK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	607b      	str	r3, [r7, #4]
 80054e4:	e002      	b.n	80054ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054ec:	687b      	ldr	r3, [r7, #4]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200000c0 	.word	0x200000c0

080054fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	; 0x38
 8005500:	af04      	add	r7, sp, #16
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800550c:	f3ef 8305 	mrs	r3, IPSR
 8005510:	617b      	str	r3, [r7, #20]
  return(result);
 8005512:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005514:	2b00      	cmp	r3, #0
 8005516:	d17e      	bne.n	8005616 <osThreadNew+0x11a>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d07b      	beq.n	8005616 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800551e:	2380      	movs	r3, #128	; 0x80
 8005520:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005522:	2318      	movs	r3, #24
 8005524:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800552e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d045      	beq.n	80055c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <osThreadNew+0x48>
        name = attr->name;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <osThreadNew+0x6e>
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b38      	cmp	r3, #56	; 0x38
 800555c:	d805      	bhi.n	800556a <osThreadNew+0x6e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <osThreadNew+0x72>
        return (NULL);
 800556a:	2300      	movs	r3, #0
 800556c:	e054      	b.n	8005618 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	089b      	lsrs	r3, r3, #2
 800557c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00e      	beq.n	80055a4 <osThreadNew+0xa8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2bbb      	cmp	r3, #187	; 0xbb
 800558c:	d90a      	bls.n	80055a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005592:	2b00      	cmp	r3, #0
 8005594:	d006      	beq.n	80055a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <osThreadNew+0xa8>
        mem = 1;
 800559e:	2301      	movs	r3, #1
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	e010      	b.n	80055c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10c      	bne.n	80055c6 <osThreadNew+0xca>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d108      	bne.n	80055c6 <osThreadNew+0xca>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <osThreadNew+0xca>
          mem = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e001      	b.n	80055c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d110      	bne.n	80055ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055d4:	9202      	str	r2, [sp, #8]
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6a3a      	ldr	r2, [r7, #32]
 80055e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 feda 	bl	800639c <xTaskCreateStatic>
 80055e8:	4603      	mov	r3, r0
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	e013      	b.n	8005616 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d110      	bne.n	8005616 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	f107 0310 	add.w	r3, r7, #16
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 ff25 	bl	8006456 <xTaskCreate>
 800560c:	4603      	mov	r3, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d001      	beq.n	8005616 <osThreadNew+0x11a>
            hTask = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005616:	693b      	ldr	r3, [r7, #16]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3728      	adds	r7, #40	; 0x28
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af02      	add	r7, sp, #8
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <osThreadFlagsSet+0x1a>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	da03      	bge.n	8005642 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800563a:	f06f 0303 	mvn.w	r3, #3
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e035      	b.n	80056ae <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005646:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005648:	f3ef 8305 	mrs	r3, IPSR
 800564c:	613b      	str	r3, [r7, #16]
  return(result);
 800564e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01f      	beq.n	8005694 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005658:	f107 0308 	add.w	r3, r7, #8
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	2300      	movs	r3, #0
 8005660:	2201      	movs	r2, #1
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6978      	ldr	r0, [r7, #20]
 8005666:	f001 fe8b 	bl	8007380 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800566a:	f107 030c 	add.w	r3, r7, #12
 800566e:	2200      	movs	r2, #0
 8005670:	9200      	str	r2, [sp, #0]
 8005672:	2200      	movs	r2, #0
 8005674:	2100      	movs	r1, #0
 8005676:	6978      	ldr	r0, [r7, #20]
 8005678:	f001 fe82 	bl	8007380 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d015      	beq.n	80056ae <osThreadFlagsSet+0x8e>
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <osThreadFlagsSet+0x98>)
 8005684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	e00c      	b.n	80056ae <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005694:	2300      	movs	r3, #0
 8005696:	2201      	movs	r2, #1
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6978      	ldr	r0, [r7, #20]
 800569c:	f001 fdb2 	bl	8007204 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	2200      	movs	r2, #0
 80056a6:	2100      	movs	r1, #0
 80056a8:	6978      	ldr	r0, [r7, #20]
 80056aa:	f001 fdab 	bl	8007204 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80056ae:	68fb      	ldr	r3, [r7, #12]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08c      	sub	sp, #48	; 0x30
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056c8:	f3ef 8305 	mrs	r3, IPSR
 80056cc:	617b      	str	r3, [r7, #20]
  return(result);
 80056ce:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80056d4:	f06f 0305 	mvn.w	r3, #5
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056da:	e06b      	b.n	80057b4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da03      	bge.n	80056ea <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80056e2:	f06f 0303 	mvn.w	r3, #3
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e8:	e064      	b.n	80057b4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <osThreadFlagsWait+0x3e>
      clear = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f8:	e001      	b.n	80056fe <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8005706:	f001 f951 	bl	80069ac <xTaskGetTickCount>
 800570a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800570c:	f107 0210 	add.w	r2, r7, #16
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005714:	2000      	movs	r0, #0
 8005716:	f001 fd15 	bl	8007144 <xTaskNotifyWait>
 800571a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d137      	bne.n	8005792 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8005722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4013      	ands	r3, r2
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572e:	4313      	orrs	r3, r2
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00c      	beq.n	8005756 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	4013      	ands	r3, r2
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	429a      	cmp	r2, r3
 8005746:	d032      	beq.n	80057ae <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10f      	bne.n	800576e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800574e:	f06f 0302 	mvn.w	r3, #2
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8005754:	e02e      	b.n	80057b4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575a:	4013      	ands	r3, r2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d128      	bne.n	80057b2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d103      	bne.n	800576e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005766:	f06f 0302 	mvn.w	r3, #2
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800576c:	e022      	b.n	80057b4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800576e:	f001 f91d 	bl	80069ac <xTaskGetTickCount>
 8005772:	4602      	mov	r2, r0
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	429a      	cmp	r2, r3
 8005780:	d902      	bls.n	8005788 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
 8005786:	e00e      	b.n	80057a6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8005788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
 8005790:	e009      	b.n	80057a6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8005798:	f06f 0302 	mvn.w	r3, #2
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579e:	e002      	b.n	80057a6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80057a0:	f06f 0301 	mvn.w	r3, #1
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1af      	bne.n	800570c <osThreadFlagsWait+0x50>
 80057ac:	e002      	b.n	80057b4 <osThreadFlagsWait+0xf8>
            break;
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <osThreadFlagsWait+0xf8>
            break;
 80057b2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3730      	adds	r7, #48	; 0x30
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c6:	f3ef 8305 	mrs	r3, IPSR
 80057ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80057cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <osDelay+0x1c>
    stat = osErrorISR;
 80057d2:	f06f 0305 	mvn.w	r3, #5
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e007      	b.n	80057ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <osDelay+0x2c>
      vTaskDelay(ticks);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 ff91 	bl	800670c <vTaskDelay>
    }
  }

  return (stat);
 80057ea:	68fb      	ldr	r3, [r7, #12]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a07      	ldr	r2, [pc, #28]	; (8005820 <vApplicationGetIdleTaskMemory+0x2c>)
 8005804:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4a06      	ldr	r2, [pc, #24]	; (8005824 <vApplicationGetIdleTaskMemory+0x30>)
 800580a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2280      	movs	r2, #128	; 0x80
 8005810:	601a      	str	r2, [r3, #0]
}
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	200000c4 	.word	0x200000c4
 8005824:	20000180 	.word	0x20000180

08005828 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4a07      	ldr	r2, [pc, #28]	; (8005854 <vApplicationGetTimerTaskMemory+0x2c>)
 8005838:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4a06      	ldr	r2, [pc, #24]	; (8005858 <vApplicationGetTimerTaskMemory+0x30>)
 800583e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005846:	601a      	str	r2, [r3, #0]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	20000380 	.word	0x20000380
 8005858:	2000043c 	.word	0x2000043c

0800585c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f103 0208 	add.w	r2, r3, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005874:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f103 0208 	add.w	r2, r3, #8
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f103 0208 	add.w	r2, r3, #8
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
}
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058fe:	b480      	push	{r7}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005914:	d103      	bne.n	800591e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e00c      	b.n	8005938 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3308      	adds	r3, #8
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e002      	b.n	800592c <vListInsert+0x2e>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	429a      	cmp	r2, r3
 8005936:	d2f6      	bcs.n	8005926 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	601a      	str	r2, [r3, #0]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6892      	ldr	r2, [r2, #8]
 8005986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6852      	ldr	r2, [r2, #4]
 8005990:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	d103      	bne.n	80059a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	1e5a      	subs	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059ee:	f002 fa79 	bl	8007ee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059fe:	fb01 f303 	mul.w	r3, r1, r3
 8005a02:	441a      	add	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	68f9      	ldr	r1, [r7, #12]
 8005a22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a24:	fb01 f303 	mul.w	r3, r1, r3
 8005a28:	441a      	add	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	22ff      	movs	r2, #255	; 0xff
 8005a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	22ff      	movs	r2, #255	; 0xff
 8005a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d114      	bne.n	8005a6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01a      	beq.n	8005a82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3310      	adds	r3, #16
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 f929 	bl	8006ca8 <xTaskRemoveFromEventList>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d012      	beq.n	8005a82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <xQueueGenericReset+0xcc>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	e009      	b.n	8005a82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3310      	adds	r3, #16
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff fef2 	bl	800585c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3324      	adds	r3, #36	; 0x24
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff feed 	bl	800585c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a82:	f002 fa5f 	bl	8007f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a86:	2301      	movs	r3, #1
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08e      	sub	sp, #56	; 0x38
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <xQueueGenericCreateStatic+0x52>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <xQueueGenericCreateStatic+0x56>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <xQueueGenericCreateStatic+0x58>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	623b      	str	r3, [r7, #32]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <xQueueGenericCreateStatic+0x7e>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <xQueueGenericCreateStatic+0x82>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <xQueueGenericCreateStatic+0x84>
 8005b16:	2300      	movs	r3, #0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	61fb      	str	r3, [r7, #28]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b32:	2350      	movs	r3, #80	; 0x50
 8005b34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b50      	cmp	r3, #80	; 0x50
 8005b3a:	d00a      	beq.n	8005b52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	61bb      	str	r3, [r7, #24]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f805 	bl	8005b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3730      	adds	r7, #48	; 0x30
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d103      	bne.n	8005ba0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	e002      	b.n	8005ba6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	69b8      	ldr	r0, [r7, #24]
 8005bb6:	f7ff ff05 	bl	80059c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	78fa      	ldrb	r2, [r7, #3]
 8005bbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08e      	sub	sp, #56	; 0x38
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <xQueueGenericSend+0x32>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d103      	bne.n	8005c0c <xQueueGenericSend+0x40>
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <xQueueGenericSend+0x44>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <xQueueGenericSend+0x46>
 8005c10:	2300      	movs	r3, #0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <xQueueGenericSend+0x60>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d103      	bne.n	8005c3a <xQueueGenericSend+0x6e>
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <xQueueGenericSend+0x72>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <xQueueGenericSend+0x74>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <xQueueGenericSend+0x8e>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	623b      	str	r3, [r7, #32]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c5a:	f001 f9e7 	bl	800702c <xTaskGetSchedulerState>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d102      	bne.n	8005c6a <xQueueGenericSend+0x9e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <xQueueGenericSend+0xa2>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <xQueueGenericSend+0xa4>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xQueueGenericSend+0xbe>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	61fb      	str	r3, [r7, #28]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c8a:	f002 f92b 	bl	8007ee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d302      	bcc.n	8005ca0 <xQueueGenericSend+0xd4>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d129      	bne.n	8005cf4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ca6:	f000 fa0b 	bl	80060c0 <prvCopyDataToQueue>
 8005caa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d010      	beq.n	8005cd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	3324      	adds	r3, #36	; 0x24
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fff5 	bl	8006ca8 <xTaskRemoveFromEventList>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005cc4:	4b3f      	ldr	r3, [pc, #252]	; (8005dc4 <xQueueGenericSend+0x1f8>)
 8005cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	e00a      	b.n	8005cec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cdc:	4b39      	ldr	r3, [pc, #228]	; (8005dc4 <xQueueGenericSend+0x1f8>)
 8005cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cec:	f002 f92a 	bl	8007f44 <vPortExitCritical>
				return pdPASS;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e063      	b.n	8005dbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cfa:	f002 f923 	bl	8007f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e05c      	b.n	8005dbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d106      	bne.n	8005d16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d08:	f107 0314 	add.w	r3, r7, #20
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 f82f 	bl	8006d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d12:	2301      	movs	r3, #1
 8005d14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d16:	f002 f915 	bl	8007f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d1a:	f000 fd9b 	bl	8006854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d1e:	f002 f8e1 	bl	8007ee4 <vPortEnterCritical>
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d28:	b25b      	sxtb	r3, r3
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d2e:	d103      	bne.n	8005d38 <xQueueGenericSend+0x16c>
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d3e:	b25b      	sxtb	r3, r3
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d44:	d103      	bne.n	8005d4e <xQueueGenericSend+0x182>
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d4e:	f002 f8f9 	bl	8007f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d52:	1d3a      	adds	r2, r7, #4
 8005d54:	f107 0314 	add.w	r3, r7, #20
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 f81e 	bl	8006d9c <xTaskCheckForTimeOut>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d124      	bne.n	8005db0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d68:	f000 faa2 	bl	80062b0 <prvIsQueueFull>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d018      	beq.n	8005da4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	3310      	adds	r3, #16
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 ff44 	bl	8006c08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d82:	f000 fa2d 	bl	80061e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d86:	f000 fd73 	bl	8006870 <xTaskResumeAll>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f47f af7c 	bne.w	8005c8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d92:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <xQueueGenericSend+0x1f8>)
 8005d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	e772      	b.n	8005c8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005da6:	f000 fa1b 	bl	80061e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005daa:	f000 fd61 	bl	8006870 <xTaskResumeAll>
 8005dae:	e76c      	b.n	8005c8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db2:	f000 fa15 	bl	80061e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005db6:	f000 fd5b 	bl	8006870 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005dba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3738      	adds	r7, #56	; 0x38
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b090      	sub	sp, #64	; 0x40
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d103      	bne.n	8005e04 <xQueueGenericSendFromISR+0x3c>
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <xQueueGenericSendFromISR+0x40>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <xQueueGenericSendFromISR+0x42>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d103      	bne.n	8005e32 <xQueueGenericSendFromISR+0x6a>
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <xQueueGenericSendFromISR+0x6e>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <xQueueGenericSendFromISR+0x70>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	623b      	str	r3, [r7, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e52:	f002 f929 	bl	80080a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e56:	f3ef 8211 	mrs	r2, BASEPRI
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	61fa      	str	r2, [r7, #28]
 8005e6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d302      	bcc.n	8005e84 <xQueueGenericSendFromISR+0xbc>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d12f      	bne.n	8005ee4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e9a:	f000 f911 	bl	80060c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea6:	d112      	bne.n	8005ece <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d016      	beq.n	8005ede <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	3324      	adds	r3, #36	; 0x24
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fef7 	bl	8006ca8 <xTaskRemoveFromEventList>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00e      	beq.n	8005ede <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00b      	beq.n	8005ede <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	e007      	b.n	8005ede <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ece:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	b25a      	sxtb	r2, r3
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005ee2:	e001      	b.n	8005ee8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ef2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3740      	adds	r7, #64	; 0x40
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08c      	sub	sp, #48	; 0x30
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <xQueueReceive+0x30>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	623b      	str	r3, [r7, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d103      	bne.n	8005f3e <xQueueReceive+0x3e>
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <xQueueReceive+0x42>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <xQueueReceive+0x44>
 8005f42:	2300      	movs	r3, #0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <xQueueReceive+0x5e>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	61fb      	str	r3, [r7, #28]
}
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f5e:	f001 f865 	bl	800702c <xTaskGetSchedulerState>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <xQueueReceive+0x6e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <xQueueReceive+0x72>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueReceive+0x74>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <xQueueReceive+0x8e>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	61bb      	str	r3, [r7, #24]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f8e:	f001 ffa9 	bl	8007ee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d01f      	beq.n	8005fde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa2:	f000 f8f7 	bl	8006194 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1e5a      	subs	r2, r3, #1
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00f      	beq.n	8005fd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	3310      	adds	r3, #16
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fe74 	bl	8006ca8 <xTaskRemoveFromEventList>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fc6:	4b3d      	ldr	r3, [pc, #244]	; (80060bc <xQueueReceive+0x1bc>)
 8005fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fd6:	f001 ffb5 	bl	8007f44 <vPortExitCritical>
				return pdPASS;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e069      	b.n	80060b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d103      	bne.n	8005fec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fe4:	f001 ffae 	bl	8007f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e062      	b.n	80060b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ff2:	f107 0310 	add.w	r3, r7, #16
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 feba 	bl	8006d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006000:	f001 ffa0 	bl	8007f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006004:	f000 fc26 	bl	8006854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006008:	f001 ff6c 	bl	8007ee4 <vPortEnterCritical>
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006012:	b25b      	sxtb	r3, r3
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006018:	d103      	bne.n	8006022 <xQueueReceive+0x122>
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006028:	b25b      	sxtb	r3, r3
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800602e:	d103      	bne.n	8006038 <xQueueReceive+0x138>
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006038:	f001 ff84 	bl	8007f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800603c:	1d3a      	adds	r2, r7, #4
 800603e:	f107 0310 	add.w	r3, r7, #16
 8006042:	4611      	mov	r1, r2
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fea9 	bl	8006d9c <xTaskCheckForTimeOut>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d123      	bne.n	8006098 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006052:	f000 f917 	bl	8006284 <prvIsQueueEmpty>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d017      	beq.n	800608c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	3324      	adds	r3, #36	; 0x24
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	4611      	mov	r1, r2
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fdcf 	bl	8006c08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800606a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800606c:	f000 f8b8 	bl	80061e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006070:	f000 fbfe 	bl	8006870 <xTaskResumeAll>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d189      	bne.n	8005f8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <xQueueReceive+0x1bc>)
 800607c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	e780      	b.n	8005f8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800608c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800608e:	f000 f8a7 	bl	80061e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006092:	f000 fbed 	bl	8006870 <xTaskResumeAll>
 8006096:	e77a      	b.n	8005f8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800609a:	f000 f8a1 	bl	80061e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800609e:	f000 fbe7 	bl	8006870 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060a4:	f000 f8ee 	bl	8006284 <prvIsQueueEmpty>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f43f af6f 	beq.w	8005f8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3730      	adds	r7, #48	; 0x30
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10d      	bne.n	80060fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d14d      	bne.n	8006182 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 ffbc 	bl	8007068 <xTaskPriorityDisinherit>
 80060f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	609a      	str	r2, [r3, #8]
 80060f8:	e043      	b.n	8006182 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d119      	bne.n	8006134 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6858      	ldr	r0, [r3, #4]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	461a      	mov	r2, r3
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	f002 fa1c 	bl	8008548 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	441a      	add	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	d32b      	bcc.n	8006182 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	e026      	b.n	8006182 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	68d8      	ldr	r0, [r3, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	461a      	mov	r2, r3
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	f002 fa02 	bl	8008548 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	425b      	negs	r3, r3
 800614e:	441a      	add	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d207      	bcs.n	8006170 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	425b      	negs	r3, r3
 800616a:	441a      	add	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d105      	bne.n	8006182 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	3b01      	subs	r3, #1
 8006180:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800618a:	697b      	ldr	r3, [r7, #20]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d018      	beq.n	80061d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	441a      	add	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d303      	bcc.n	80061c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68d9      	ldr	r1, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	461a      	mov	r2, r3
 80061d2:	6838      	ldr	r0, [r7, #0]
 80061d4:	f002 f9b8 	bl	8008548 <memcpy>
	}
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061e8:	f001 fe7c 	bl	8007ee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061f4:	e011      	b.n	800621a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d012      	beq.n	8006224 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3324      	adds	r3, #36	; 0x24
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fd50 	bl	8006ca8 <xTaskRemoveFromEventList>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800620e:	f000 fe27 	bl	8006e60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	3b01      	subs	r3, #1
 8006216:	b2db      	uxtb	r3, r3
 8006218:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800621a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800621e:	2b00      	cmp	r3, #0
 8006220:	dce9      	bgt.n	80061f6 <prvUnlockQueue+0x16>
 8006222:	e000      	b.n	8006226 <prvUnlockQueue+0x46>
					break;
 8006224:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	22ff      	movs	r2, #255	; 0xff
 800622a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800622e:	f001 fe89 	bl	8007f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006232:	f001 fe57 	bl	8007ee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800623c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800623e:	e011      	b.n	8006264 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d012      	beq.n	800626e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3310      	adds	r3, #16
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fd2b 	bl	8006ca8 <xTaskRemoveFromEventList>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006258:	f000 fe02 	bl	8006e60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	3b01      	subs	r3, #1
 8006260:	b2db      	uxtb	r3, r3
 8006262:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006268:	2b00      	cmp	r3, #0
 800626a:	dce9      	bgt.n	8006240 <prvUnlockQueue+0x60>
 800626c:	e000      	b.n	8006270 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800626e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	22ff      	movs	r2, #255	; 0xff
 8006274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006278:	f001 fe64 	bl	8007f44 <vPortExitCritical>
}
 800627c:	bf00      	nop
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800628c:	f001 fe2a 	bl	8007ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006298:	2301      	movs	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e001      	b.n	80062a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062a2:	f001 fe4f 	bl	8007f44 <vPortExitCritical>

	return xReturn;
 80062a6:	68fb      	ldr	r3, [r7, #12]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062b8:	f001 fe14 	bl	8007ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d102      	bne.n	80062ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062c8:	2301      	movs	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	e001      	b.n	80062d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062d2:	f001 fe37 	bl	8007f44 <vPortExitCritical>

	return xReturn;
 80062d6:	68fb      	ldr	r3, [r7, #12]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	e014      	b.n	800631a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062f0:	4a0f      	ldr	r2, [pc, #60]	; (8006330 <vQueueAddToRegistry+0x50>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10b      	bne.n	8006314 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062fc:	490c      	ldr	r1, [pc, #48]	; (8006330 <vQueueAddToRegistry+0x50>)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006306:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <vQueueAddToRegistry+0x50>)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	4413      	add	r3, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006312:	e006      	b.n	8006322 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3301      	adds	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b07      	cmp	r3, #7
 800631e:	d9e7      	bls.n	80062f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20004cf4 	.word	0x20004cf4

08006334 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006344:	f001 fdce 	bl	8007ee4 <vPortEnterCritical>
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800634e:	b25b      	sxtb	r3, r3
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006354:	d103      	bne.n	800635e <vQueueWaitForMessageRestricted+0x2a>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006364:	b25b      	sxtb	r3, r3
 8006366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800636a:	d103      	bne.n	8006374 <vQueueWaitForMessageRestricted+0x40>
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006374:	f001 fde6 	bl	8007f44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	2b00      	cmp	r3, #0
 800637e:	d106      	bne.n	800638e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	3324      	adds	r3, #36	; 0x24
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fc61 	bl	8006c50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800638e:	6978      	ldr	r0, [r7, #20]
 8006390:	f7ff ff26 	bl	80061e0 <prvUnlockQueue>
	}
 8006394:	bf00      	nop
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08e      	sub	sp, #56	; 0x38
 80063a0:	af04      	add	r7, sp, #16
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	623b      	str	r3, [r7, #32]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	61fb      	str	r3, [r7, #28]
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063e2:	23bc      	movs	r3, #188	; 0xbc
 80063e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2bbc      	cmp	r3, #188	; 0xbc
 80063ea:	d00a      	beq.n	8006402 <xTaskCreateStatic+0x66>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	61bb      	str	r3, [r7, #24]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006402:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01e      	beq.n	8006448 <xTaskCreateStatic+0xac>
 800640a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01b      	beq.n	8006448 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006418:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	2202      	movs	r2, #2
 800641e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006422:	2300      	movs	r3, #0
 8006424:	9303      	str	r3, [sp, #12]
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	9302      	str	r3, [sp, #8]
 800642a:	f107 0314 	add.w	r3, r7, #20
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f850 	bl	80064e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006442:	f000 f8f3 	bl	800662c <prvAddNewTaskToReadyList>
 8006446:	e001      	b.n	800644c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800644c:	697b      	ldr	r3, [r7, #20]
	}
 800644e:	4618      	mov	r0, r3
 8006450:	3728      	adds	r7, #40	; 0x28
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006456:	b580      	push	{r7, lr}
 8006458:	b08c      	sub	sp, #48	; 0x30
 800645a:	af04      	add	r7, sp, #16
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	603b      	str	r3, [r7, #0]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4618      	mov	r0, r3
 800646c:	f001 fe5c 	bl	8008128 <pvPortMalloc>
 8006470:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00e      	beq.n	8006496 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006478:	20bc      	movs	r0, #188	; 0xbc
 800647a:	f001 fe55 	bl	8008128 <pvPortMalloc>
 800647e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
 800648c:	e005      	b.n	800649a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800648e:	6978      	ldr	r0, [r7, #20]
 8006490:	f001 ff16 	bl	80082c0 <vPortFree>
 8006494:	e001      	b.n	800649a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d017      	beq.n	80064d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	2300      	movs	r3, #0
 80064ac:	9303      	str	r3, [sp, #12]
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	9302      	str	r3, [sp, #8]
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f80e 	bl	80064e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064c4:	69f8      	ldr	r0, [r7, #28]
 80064c6:	f000 f8b1 	bl	800662c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064ca:	2301      	movs	r3, #1
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	e002      	b.n	80064d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064d6:	69bb      	ldr	r3, [r7, #24]
	}
 80064d8:	4618      	mov	r0, r3
 80064da:	3720      	adds	r7, #32
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	461a      	mov	r2, r3
 80064f8:	21a5      	movs	r1, #165	; 0xa5
 80064fa:	f002 f833 	bl	8008564 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006508:	3b01      	subs	r3, #1
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f023 0307 	bic.w	r3, r3, #7
 8006516:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	617b      	str	r3, [r7, #20]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d01f      	beq.n	800657e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
 8006542:	e012      	b.n	800656a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4413      	add	r3, r2
 800654a:	7819      	ldrb	r1, [r3, #0]
 800654c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	3334      	adds	r3, #52	; 0x34
 8006554:	460a      	mov	r2, r1
 8006556:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	4413      	add	r3, r2
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d006      	beq.n	8006572 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	3301      	adds	r3, #1
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	2b0f      	cmp	r3, #15
 800656e:	d9e9      	bls.n	8006544 <prvInitialiseNewTask+0x64>
 8006570:	e000      	b.n	8006574 <prvInitialiseNewTask+0x94>
			{
				break;
 8006572:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800657c:	e003      	b.n	8006586 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	2b37      	cmp	r3, #55	; 0x37
 800658a:	d901      	bls.n	8006590 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800658c:	2337      	movs	r3, #55	; 0x37
 800658e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006594:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800659a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	2200      	movs	r2, #0
 80065a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	3304      	adds	r3, #4
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff f978 	bl	800589c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	3318      	adds	r3, #24
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff f973 	bl	800589c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	3354      	adds	r3, #84	; 0x54
 80065e0:	2260      	movs	r2, #96	; 0x60
 80065e2:	2100      	movs	r1, #0
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 ffbd 	bl	8008564 <memset>
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	4a0c      	ldr	r2, [pc, #48]	; (8006620 <prvInitialiseNewTask+0x140>)
 80065ee:	659a      	str	r2, [r3, #88]	; 0x58
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	4a0c      	ldr	r2, [pc, #48]	; (8006624 <prvInitialiseNewTask+0x144>)
 80065f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <prvInitialiseNewTask+0x148>)
 80065fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	69b8      	ldr	r0, [r7, #24]
 8006602:	f001 fb43 	bl	8007c8c <pxPortInitialiseStack>
 8006606:	4602      	mov	r2, r0
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006618:	bf00      	nop
 800661a:	3720      	adds	r7, #32
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	08008800 	.word	0x08008800
 8006624:	08008820 	.word	0x08008820
 8006628:	080087e0 	.word	0x080087e0

0800662c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006634:	f001 fc56 	bl	8007ee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006638:	4b2d      	ldr	r3, [pc, #180]	; (80066f0 <prvAddNewTaskToReadyList+0xc4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3301      	adds	r3, #1
 800663e:	4a2c      	ldr	r2, [pc, #176]	; (80066f0 <prvAddNewTaskToReadyList+0xc4>)
 8006640:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006642:	4b2c      	ldr	r3, [pc, #176]	; (80066f4 <prvAddNewTaskToReadyList+0xc8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800664a:	4a2a      	ldr	r2, [pc, #168]	; (80066f4 <prvAddNewTaskToReadyList+0xc8>)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006650:	4b27      	ldr	r3, [pc, #156]	; (80066f0 <prvAddNewTaskToReadyList+0xc4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d110      	bne.n	800667a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006658:	f000 fc26 	bl	8006ea8 <prvInitialiseTaskLists>
 800665c:	e00d      	b.n	800667a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800665e:	4b26      	ldr	r3, [pc, #152]	; (80066f8 <prvAddNewTaskToReadyList+0xcc>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006666:	4b23      	ldr	r3, [pc, #140]	; (80066f4 <prvAddNewTaskToReadyList+0xc8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	429a      	cmp	r2, r3
 8006672:	d802      	bhi.n	800667a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006674:	4a1f      	ldr	r2, [pc, #124]	; (80066f4 <prvAddNewTaskToReadyList+0xc8>)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800667a:	4b20      	ldr	r3, [pc, #128]	; (80066fc <prvAddNewTaskToReadyList+0xd0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3301      	adds	r3, #1
 8006680:	4a1e      	ldr	r2, [pc, #120]	; (80066fc <prvAddNewTaskToReadyList+0xd0>)
 8006682:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006684:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <prvAddNewTaskToReadyList+0xd0>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006690:	4b1b      	ldr	r3, [pc, #108]	; (8006700 <prvAddNewTaskToReadyList+0xd4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d903      	bls.n	80066a0 <prvAddNewTaskToReadyList+0x74>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	4a18      	ldr	r2, [pc, #96]	; (8006700 <prvAddNewTaskToReadyList+0xd4>)
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4a15      	ldr	r2, [pc, #84]	; (8006704 <prvAddNewTaskToReadyList+0xd8>)
 80066ae:	441a      	add	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f7ff f8fd 	bl	80058b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066bc:	f001 fc42 	bl	8007f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066c0:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <prvAddNewTaskToReadyList+0xcc>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00e      	beq.n	80066e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066c8:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <prvAddNewTaskToReadyList+0xc8>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d207      	bcs.n	80066e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066d6:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <prvAddNewTaskToReadyList+0xdc>)
 80066d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000d10 	.word	0x20000d10
 80066f4:	2000083c 	.word	0x2000083c
 80066f8:	20000d1c 	.word	0x20000d1c
 80066fc:	20000d2c 	.word	0x20000d2c
 8006700:	20000d18 	.word	0x20000d18
 8006704:	20000840 	.word	0x20000840
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d017      	beq.n	800674e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <vTaskDelay+0x60>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <vTaskDelay+0x30>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60bb      	str	r3, [r7, #8]
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800673c:	f000 f88a 	bl	8006854 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006740:	2100      	movs	r1, #0
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 ff00 	bl	8007548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006748:	f000 f892 	bl	8006870 <xTaskResumeAll>
 800674c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d107      	bne.n	8006764 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006754:	4b06      	ldr	r3, [pc, #24]	; (8006770 <vTaskDelay+0x64>)
 8006756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006764:	bf00      	nop
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000d38 	.word	0x20000d38
 8006770:	e000ed04 	.word	0xe000ed04

08006774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	; 0x28
 8006778:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006782:	463a      	mov	r2, r7
 8006784:	1d39      	adds	r1, r7, #4
 8006786:	f107 0308 	add.w	r3, r7, #8
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff f832 	bl	80057f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	9202      	str	r2, [sp, #8]
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	2300      	movs	r3, #0
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	2300      	movs	r3, #0
 80067a0:	460a      	mov	r2, r1
 80067a2:	4924      	ldr	r1, [pc, #144]	; (8006834 <vTaskStartScheduler+0xc0>)
 80067a4:	4824      	ldr	r0, [pc, #144]	; (8006838 <vTaskStartScheduler+0xc4>)
 80067a6:	f7ff fdf9 	bl	800639c <xTaskCreateStatic>
 80067aa:	4603      	mov	r3, r0
 80067ac:	4a23      	ldr	r2, [pc, #140]	; (800683c <vTaskStartScheduler+0xc8>)
 80067ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067b0:	4b22      	ldr	r3, [pc, #136]	; (800683c <vTaskStartScheduler+0xc8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067b8:	2301      	movs	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e001      	b.n	80067c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d102      	bne.n	80067ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067c8:	f000 ff12 	bl	80075f0 <xTimerCreateTimerTask>
 80067cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d11b      	bne.n	800680c <vTaskStartScheduler+0x98>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	613b      	str	r3, [r7, #16]
}
 80067e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067e8:	4b15      	ldr	r3, [pc, #84]	; (8006840 <vTaskStartScheduler+0xcc>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3354      	adds	r3, #84	; 0x54
 80067ee:	4a15      	ldr	r2, [pc, #84]	; (8006844 <vTaskStartScheduler+0xd0>)
 80067f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067f2:	4b15      	ldr	r3, [pc, #84]	; (8006848 <vTaskStartScheduler+0xd4>)
 80067f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067fa:	4b14      	ldr	r3, [pc, #80]	; (800684c <vTaskStartScheduler+0xd8>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006800:	4b13      	ldr	r3, [pc, #76]	; (8006850 <vTaskStartScheduler+0xdc>)
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006806:	f001 facb 	bl	8007da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800680a:	e00e      	b.n	800682a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006812:	d10a      	bne.n	800682a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	60fb      	str	r3, [r7, #12]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <vTaskStartScheduler+0xb4>
}
 800682a:	bf00      	nop
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	08008744 	.word	0x08008744
 8006838:	08006e79 	.word	0x08006e79
 800683c:	20000d34 	.word	0x20000d34
 8006840:	2000083c 	.word	0x2000083c
 8006844:	20000024 	.word	0x20000024
 8006848:	20000d30 	.word	0x20000d30
 800684c:	20000d1c 	.word	0x20000d1c
 8006850:	20000d14 	.word	0x20000d14

08006854 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006858:	4b04      	ldr	r3, [pc, #16]	; (800686c <vTaskSuspendAll+0x18>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3301      	adds	r3, #1
 800685e:	4a03      	ldr	r2, [pc, #12]	; (800686c <vTaskSuspendAll+0x18>)
 8006860:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006862:	bf00      	nop
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	20000d38 	.word	0x20000d38

08006870 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800687a:	2300      	movs	r3, #0
 800687c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800687e:	4b42      	ldr	r3, [pc, #264]	; (8006988 <xTaskResumeAll+0x118>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10a      	bne.n	800689c <xTaskResumeAll+0x2c>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	603b      	str	r3, [r7, #0]
}
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800689c:	f001 fb22 	bl	8007ee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068a0:	4b39      	ldr	r3, [pc, #228]	; (8006988 <xTaskResumeAll+0x118>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	4a38      	ldr	r2, [pc, #224]	; (8006988 <xTaskResumeAll+0x118>)
 80068a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068aa:	4b37      	ldr	r3, [pc, #220]	; (8006988 <xTaskResumeAll+0x118>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d162      	bne.n	8006978 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068b2:	4b36      	ldr	r3, [pc, #216]	; (800698c <xTaskResumeAll+0x11c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d05e      	beq.n	8006978 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068ba:	e02f      	b.n	800691c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068bc:	4b34      	ldr	r3, [pc, #208]	; (8006990 <xTaskResumeAll+0x120>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3318      	adds	r3, #24
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff f851 	bl	8005970 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff f84c 	bl	8005970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068dc:	4b2d      	ldr	r3, [pc, #180]	; (8006994 <xTaskResumeAll+0x124>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d903      	bls.n	80068ec <xTaskResumeAll+0x7c>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	4a2a      	ldr	r2, [pc, #168]	; (8006994 <xTaskResumeAll+0x124>)
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4a27      	ldr	r2, [pc, #156]	; (8006998 <xTaskResumeAll+0x128>)
 80068fa:	441a      	add	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f7fe ffd7 	bl	80058b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	4b23      	ldr	r3, [pc, #140]	; (800699c <xTaskResumeAll+0x12c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	429a      	cmp	r2, r3
 8006914:	d302      	bcc.n	800691c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006916:	4b22      	ldr	r3, [pc, #136]	; (80069a0 <xTaskResumeAll+0x130>)
 8006918:	2201      	movs	r2, #1
 800691a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800691c:	4b1c      	ldr	r3, [pc, #112]	; (8006990 <xTaskResumeAll+0x120>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1cb      	bne.n	80068bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800692a:	f000 fb5f 	bl	8006fec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800692e:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <xTaskResumeAll+0x134>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d010      	beq.n	800695c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800693a:	f000 f847 	bl	80069cc <xTaskIncrementTick>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006944:	4b16      	ldr	r3, [pc, #88]	; (80069a0 <xTaskResumeAll+0x130>)
 8006946:	2201      	movs	r2, #1
 8006948:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3b01      	subs	r3, #1
 800694e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f1      	bne.n	800693a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006956:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <xTaskResumeAll+0x134>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800695c:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <xTaskResumeAll+0x130>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <xTaskResumeAll+0x138>)
 800696a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006978:	f001 fae4 	bl	8007f44 <vPortExitCritical>

	return xAlreadyYielded;
 800697c:	68bb      	ldr	r3, [r7, #8]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000d38 	.word	0x20000d38
 800698c:	20000d10 	.word	0x20000d10
 8006990:	20000cd0 	.word	0x20000cd0
 8006994:	20000d18 	.word	0x20000d18
 8006998:	20000840 	.word	0x20000840
 800699c:	2000083c 	.word	0x2000083c
 80069a0:	20000d24 	.word	0x20000d24
 80069a4:	20000d20 	.word	0x20000d20
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069b2:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <xTaskGetTickCount+0x1c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069b8:	687b      	ldr	r3, [r7, #4]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000d14 	.word	0x20000d14

080069cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d6:	4b4f      	ldr	r3, [pc, #316]	; (8006b14 <xTaskIncrementTick+0x148>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 808f 	bne.w	8006afe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069e0:	4b4d      	ldr	r3, [pc, #308]	; (8006b18 <xTaskIncrementTick+0x14c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3301      	adds	r3, #1
 80069e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069e8:	4a4b      	ldr	r2, [pc, #300]	; (8006b18 <xTaskIncrementTick+0x14c>)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d120      	bne.n	8006a36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80069f4:	4b49      	ldr	r3, [pc, #292]	; (8006b1c <xTaskIncrementTick+0x150>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <xTaskIncrementTick+0x48>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	603b      	str	r3, [r7, #0]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <xTaskIncrementTick+0x46>
 8006a14:	4b41      	ldr	r3, [pc, #260]	; (8006b1c <xTaskIncrementTick+0x150>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	4b41      	ldr	r3, [pc, #260]	; (8006b20 <xTaskIncrementTick+0x154>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a3f      	ldr	r2, [pc, #252]	; (8006b1c <xTaskIncrementTick+0x150>)
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	4a3f      	ldr	r2, [pc, #252]	; (8006b20 <xTaskIncrementTick+0x154>)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	4b3e      	ldr	r3, [pc, #248]	; (8006b24 <xTaskIncrementTick+0x158>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	4a3d      	ldr	r2, [pc, #244]	; (8006b24 <xTaskIncrementTick+0x158>)
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	f000 fadb 	bl	8006fec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a36:	4b3c      	ldr	r3, [pc, #240]	; (8006b28 <xTaskIncrementTick+0x15c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d349      	bcc.n	8006ad4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a40:	4b36      	ldr	r3, [pc, #216]	; (8006b1c <xTaskIncrementTick+0x150>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4a:	4b37      	ldr	r3, [pc, #220]	; (8006b28 <xTaskIncrementTick+0x15c>)
 8006a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a50:	601a      	str	r2, [r3, #0]
					break;
 8006a52:	e03f      	b.n	8006ad4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a54:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <xTaskIncrementTick+0x150>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d203      	bcs.n	8006a74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a6c:	4a2e      	ldr	r2, [pc, #184]	; (8006b28 <xTaskIncrementTick+0x15c>)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a72:	e02f      	b.n	8006ad4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe ff79 	bl	8005970 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d004      	beq.n	8006a90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	3318      	adds	r3, #24
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe ff70 	bl	8005970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a94:	4b25      	ldr	r3, [pc, #148]	; (8006b2c <xTaskIncrementTick+0x160>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d903      	bls.n	8006aa4 <xTaskIncrementTick+0xd8>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	4a22      	ldr	r2, [pc, #136]	; (8006b2c <xTaskIncrementTick+0x160>)
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <xTaskIncrementTick+0x164>)
 8006ab2:	441a      	add	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fe fefb 	bl	80058b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <xTaskIncrementTick+0x168>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d3b8      	bcc.n	8006a40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ad2:	e7b5      	b.n	8006a40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ad4:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <xTaskIncrementTick+0x168>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ada:	4915      	ldr	r1, [pc, #84]	; (8006b30 <xTaskIncrementTick+0x164>)
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d901      	bls.n	8006af0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006aec:	2301      	movs	r3, #1
 8006aee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006af0:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <xTaskIncrementTick+0x16c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d007      	beq.n	8006b08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006af8:	2301      	movs	r3, #1
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	e004      	b.n	8006b08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006afe:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <xTaskIncrementTick+0x170>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	4a0d      	ldr	r2, [pc, #52]	; (8006b3c <xTaskIncrementTick+0x170>)
 8006b06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b08:	697b      	ldr	r3, [r7, #20]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000d38 	.word	0x20000d38
 8006b18:	20000d14 	.word	0x20000d14
 8006b1c:	20000cc8 	.word	0x20000cc8
 8006b20:	20000ccc 	.word	0x20000ccc
 8006b24:	20000d28 	.word	0x20000d28
 8006b28:	20000d30 	.word	0x20000d30
 8006b2c:	20000d18 	.word	0x20000d18
 8006b30:	20000840 	.word	0x20000840
 8006b34:	2000083c 	.word	0x2000083c
 8006b38:	20000d24 	.word	0x20000d24
 8006b3c:	20000d20 	.word	0x20000d20

08006b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b46:	4b2a      	ldr	r3, [pc, #168]	; (8006bf0 <vTaskSwitchContext+0xb0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b4e:	4b29      	ldr	r3, [pc, #164]	; (8006bf4 <vTaskSwitchContext+0xb4>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b54:	e046      	b.n	8006be4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006b56:	4b27      	ldr	r3, [pc, #156]	; (8006bf4 <vTaskSwitchContext+0xb4>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b5c:	4b26      	ldr	r3, [pc, #152]	; (8006bf8 <vTaskSwitchContext+0xb8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	e010      	b.n	8006b86 <vTaskSwitchContext+0x46>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <vTaskSwitchContext+0x40>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	607b      	str	r3, [r7, #4]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <vTaskSwitchContext+0x3e>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	491d      	ldr	r1, [pc, #116]	; (8006bfc <vTaskSwitchContext+0xbc>)
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0e4      	beq.n	8006b64 <vTaskSwitchContext+0x24>
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4a15      	ldr	r2, [pc, #84]	; (8006bfc <vTaskSwitchContext+0xbc>)
 8006ba6:	4413      	add	r3, r2
 8006ba8:	60bb      	str	r3, [r7, #8]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	605a      	str	r2, [r3, #4]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d104      	bne.n	8006bca <vTaskSwitchContext+0x8a>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	4a0b      	ldr	r2, [pc, #44]	; (8006c00 <vTaskSwitchContext+0xc0>)
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <vTaskSwitchContext+0xb8>)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <vTaskSwitchContext+0xc0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3354      	adds	r3, #84	; 0x54
 8006be0:	4a08      	ldr	r2, [pc, #32]	; (8006c04 <vTaskSwitchContext+0xc4>)
 8006be2:	6013      	str	r3, [r2, #0]
}
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	20000d38 	.word	0x20000d38
 8006bf4:	20000d24 	.word	0x20000d24
 8006bf8:	20000d18 	.word	0x20000d18
 8006bfc:	20000840 	.word	0x20000840
 8006c00:	2000083c 	.word	0x2000083c
 8006c04:	20000024 	.word	0x20000024

08006c08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	60fb      	str	r3, [r7, #12]
}
 8006c2a:	bf00      	nop
 8006c2c:	e7fe      	b.n	8006c2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c2e:	4b07      	ldr	r3, [pc, #28]	; (8006c4c <vTaskPlaceOnEventList+0x44>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3318      	adds	r3, #24
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fe fe61 	bl	80058fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	6838      	ldr	r0, [r7, #0]
 8006c40:	f000 fc82 	bl	8007548 <prvAddCurrentTaskToDelayedList>
}
 8006c44:	bf00      	nop
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	2000083c 	.word	0x2000083c

08006c50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10a      	bne.n	8006c78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	617b      	str	r3, [r7, #20]
}
 8006c74:	bf00      	nop
 8006c76:	e7fe      	b.n	8006c76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3318      	adds	r3, #24
 8006c7e:	4619      	mov	r1, r3
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7fe fe18 	bl	80058b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	68b8      	ldr	r0, [r7, #8]
 8006c96:	f000 fc57 	bl	8007548 <prvAddCurrentTaskToDelayedList>
	}
 8006c9a:	bf00      	nop
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	2000083c 	.word	0x2000083c

08006ca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60fb      	str	r3, [r7, #12]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	3318      	adds	r3, #24
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe fe49 	bl	8005970 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cde:	4b1e      	ldr	r3, [pc, #120]	; (8006d58 <xTaskRemoveFromEventList+0xb0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d11d      	bne.n	8006d22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe fe40 	bl	8005970 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf4:	4b19      	ldr	r3, [pc, #100]	; (8006d5c <xTaskRemoveFromEventList+0xb4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d903      	bls.n	8006d04 <xTaskRemoveFromEventList+0x5c>
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	4a16      	ldr	r2, [pc, #88]	; (8006d5c <xTaskRemoveFromEventList+0xb4>)
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4a13      	ldr	r2, [pc, #76]	; (8006d60 <xTaskRemoveFromEventList+0xb8>)
 8006d12:	441a      	add	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f7fe fdcb 	bl	80058b6 <vListInsertEnd>
 8006d20:	e005      	b.n	8006d2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	3318      	adds	r3, #24
 8006d26:	4619      	mov	r1, r3
 8006d28:	480e      	ldr	r0, [pc, #56]	; (8006d64 <xTaskRemoveFromEventList+0xbc>)
 8006d2a:	f7fe fdc4 	bl	80058b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d32:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <xTaskRemoveFromEventList+0xc0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d905      	bls.n	8006d48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <xTaskRemoveFromEventList+0xc4>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e001      	b.n	8006d4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d4c:	697b      	ldr	r3, [r7, #20]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000d38 	.word	0x20000d38
 8006d5c:	20000d18 	.word	0x20000d18
 8006d60:	20000840 	.word	0x20000840
 8006d64:	20000cd0 	.word	0x20000cd0
 8006d68:	2000083c 	.word	0x2000083c
 8006d6c:	20000d24 	.word	0x20000d24

08006d70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <vTaskInternalSetTimeOutState+0x24>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <vTaskInternalSetTimeOutState+0x28>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	605a      	str	r2, [r3, #4]
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	20000d28 	.word	0x20000d28
 8006d98:	20000d14 	.word	0x20000d14

08006d9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	613b      	str	r3, [r7, #16]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	60fb      	str	r3, [r7, #12]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006dde:	f001 f881 	bl	8007ee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006de2:	4b1d      	ldr	r3, [pc, #116]	; (8006e58 <xTaskCheckForTimeOut+0xbc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dfa:	d102      	bne.n	8006e02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61fb      	str	r3, [r7, #28]
 8006e00:	e023      	b.n	8006e4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b15      	ldr	r3, [pc, #84]	; (8006e5c <xTaskCheckForTimeOut+0xc0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d007      	beq.n	8006e1e <xTaskCheckForTimeOut+0x82>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d302      	bcc.n	8006e1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	61fb      	str	r3, [r7, #28]
 8006e1c:	e015      	b.n	8006e4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d20b      	bcs.n	8006e40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	1ad2      	subs	r2, r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff ff9b 	bl	8006d70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	e004      	b.n	8006e4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e46:	2301      	movs	r3, #1
 8006e48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e4a:	f001 f87b 	bl	8007f44 <vPortExitCritical>

	return xReturn;
 8006e4e:	69fb      	ldr	r3, [r7, #28]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3720      	adds	r7, #32
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000d14 	.word	0x20000d14
 8006e5c:	20000d28 	.word	0x20000d28

08006e60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e64:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <vTaskMissedYield+0x14>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	601a      	str	r2, [r3, #0]
}
 8006e6a:	bf00      	nop
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	20000d24 	.word	0x20000d24

08006e78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e80:	f000 f852 	bl	8006f28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e84:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <prvIdleTask+0x28>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d9f9      	bls.n	8006e80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <prvIdleTask+0x2c>)
 8006e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e9c:	e7f0      	b.n	8006e80 <prvIdleTask+0x8>
 8006e9e:	bf00      	nop
 8006ea0:	20000840 	.word	0x20000840
 8006ea4:	e000ed04 	.word	0xe000ed04

08006ea8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006eae:	2300      	movs	r3, #0
 8006eb0:	607b      	str	r3, [r7, #4]
 8006eb2:	e00c      	b.n	8006ece <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4a12      	ldr	r2, [pc, #72]	; (8006f08 <prvInitialiseTaskLists+0x60>)
 8006ec0:	4413      	add	r3, r2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fcca 	bl	800585c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	607b      	str	r3, [r7, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b37      	cmp	r3, #55	; 0x37
 8006ed2:	d9ef      	bls.n	8006eb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ed4:	480d      	ldr	r0, [pc, #52]	; (8006f0c <prvInitialiseTaskLists+0x64>)
 8006ed6:	f7fe fcc1 	bl	800585c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006eda:	480d      	ldr	r0, [pc, #52]	; (8006f10 <prvInitialiseTaskLists+0x68>)
 8006edc:	f7fe fcbe 	bl	800585c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ee0:	480c      	ldr	r0, [pc, #48]	; (8006f14 <prvInitialiseTaskLists+0x6c>)
 8006ee2:	f7fe fcbb 	bl	800585c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ee6:	480c      	ldr	r0, [pc, #48]	; (8006f18 <prvInitialiseTaskLists+0x70>)
 8006ee8:	f7fe fcb8 	bl	800585c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006eec:	480b      	ldr	r0, [pc, #44]	; (8006f1c <prvInitialiseTaskLists+0x74>)
 8006eee:	f7fe fcb5 	bl	800585c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <prvInitialiseTaskLists+0x78>)
 8006ef4:	4a05      	ldr	r2, [pc, #20]	; (8006f0c <prvInitialiseTaskLists+0x64>)
 8006ef6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <prvInitialiseTaskLists+0x7c>)
 8006efa:	4a05      	ldr	r2, [pc, #20]	; (8006f10 <prvInitialiseTaskLists+0x68>)
 8006efc:	601a      	str	r2, [r3, #0]
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20000840 	.word	0x20000840
 8006f0c:	20000ca0 	.word	0x20000ca0
 8006f10:	20000cb4 	.word	0x20000cb4
 8006f14:	20000cd0 	.word	0x20000cd0
 8006f18:	20000ce4 	.word	0x20000ce4
 8006f1c:	20000cfc 	.word	0x20000cfc
 8006f20:	20000cc8 	.word	0x20000cc8
 8006f24:	20000ccc 	.word	0x20000ccc

08006f28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f2e:	e019      	b.n	8006f64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f30:	f000 ffd8 	bl	8007ee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f34:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <prvCheckTasksWaitingTermination+0x50>)
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3304      	adds	r3, #4
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fd15 	bl	8005970 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f46:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <prvCheckTasksWaitingTermination+0x54>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	4a0b      	ldr	r2, [pc, #44]	; (8006f7c <prvCheckTasksWaitingTermination+0x54>)
 8006f4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f50:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <prvCheckTasksWaitingTermination+0x58>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <prvCheckTasksWaitingTermination+0x58>)
 8006f58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f5a:	f000 fff3 	bl	8007f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f810 	bl	8006f84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <prvCheckTasksWaitingTermination+0x58>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e1      	bne.n	8006f30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000ce4 	.word	0x20000ce4
 8006f7c:	20000d10 	.word	0x20000d10
 8006f80:	20000cf8 	.word	0x20000cf8

08006f84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3354      	adds	r3, #84	; 0x54
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 fafd 	bl	8008590 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d108      	bne.n	8006fb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 f98b 	bl	80082c0 <vPortFree>
				vPortFree( pxTCB );
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 f988 	bl	80082c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fb0:	e018      	b.n	8006fe4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d103      	bne.n	8006fc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 f97f 	bl	80082c0 <vPortFree>
	}
 8006fc2:	e00f      	b.n	8006fe4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d00a      	beq.n	8006fe4 <prvDeleteTCB+0x60>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	60fb      	str	r3, [r7, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <prvDeleteTCB+0x5e>
	}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <prvResetNextTaskUnblockTime+0x38>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d104      	bne.n	8007006 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <prvResetNextTaskUnblockTime+0x3c>)
 8006ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007002:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007004:	e008      	b.n	8007018 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007006:	4b07      	ldr	r3, [pc, #28]	; (8007024 <prvResetNextTaskUnblockTime+0x38>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4a04      	ldr	r2, [pc, #16]	; (8007028 <prvResetNextTaskUnblockTime+0x3c>)
 8007016:	6013      	str	r3, [r2, #0]
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	20000cc8 	.word	0x20000cc8
 8007028:	20000d30 	.word	0x20000d30

0800702c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007032:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <xTaskGetSchedulerState+0x34>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800703a:	2301      	movs	r3, #1
 800703c:	607b      	str	r3, [r7, #4]
 800703e:	e008      	b.n	8007052 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007040:	4b08      	ldr	r3, [pc, #32]	; (8007064 <xTaskGetSchedulerState+0x38>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007048:	2302      	movs	r3, #2
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	e001      	b.n	8007052 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800704e:	2300      	movs	r3, #0
 8007050:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007052:	687b      	ldr	r3, [r7, #4]
	}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	20000d1c 	.word	0x20000d1c
 8007064:	20000d38 	.word	0x20000d38

08007068 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d056      	beq.n	800712c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800707e:	4b2e      	ldr	r3, [pc, #184]	; (8007138 <xTaskPriorityDisinherit+0xd0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	429a      	cmp	r2, r3
 8007086:	d00a      	beq.n	800709e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	60fb      	str	r3, [r7, #12]
}
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	60bb      	str	r3, [r7, #8]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c0:	1e5a      	subs	r2, r3, #1
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d02c      	beq.n	800712c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d128      	bne.n	800712c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3304      	adds	r3, #4
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fc46 	bl	8005970 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	4b0f      	ldr	r3, [pc, #60]	; (800713c <xTaskPriorityDisinherit+0xd4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d903      	bls.n	800710c <xTaskPriorityDisinherit+0xa4>
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	4a0c      	ldr	r2, [pc, #48]	; (800713c <xTaskPriorityDisinherit+0xd4>)
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4a09      	ldr	r2, [pc, #36]	; (8007140 <xTaskPriorityDisinherit+0xd8>)
 800711a:	441a      	add	r2, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	3304      	adds	r3, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f7fe fbc7 	bl	80058b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007128:	2301      	movs	r3, #1
 800712a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800712c:	697b      	ldr	r3, [r7, #20]
	}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	2000083c 	.word	0x2000083c
 800713c:	20000d18 	.word	0x20000d18
 8007140:	20000840 	.word	0x20000840

08007144 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007152:	f000 fec7 	bl	8007ee4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007156:	4b29      	ldr	r3, [pc, #164]	; (80071fc <xTaskNotifyWait+0xb8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b02      	cmp	r3, #2
 8007162:	d01c      	beq.n	800719e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007164:	4b25      	ldr	r3, [pc, #148]	; (80071fc <xTaskNotifyWait+0xb8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	43d2      	mvns	r2, r2
 8007170:	400a      	ands	r2, r1
 8007172:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007176:	4b21      	ldr	r3, [pc, #132]	; (80071fc <xTaskNotifyWait+0xb8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007186:	2101      	movs	r1, #1
 8007188:	6838      	ldr	r0, [r7, #0]
 800718a:	f000 f9dd 	bl	8007548 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800718e:	4b1c      	ldr	r3, [pc, #112]	; (8007200 <xTaskNotifyWait+0xbc>)
 8007190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800719e:	f000 fed1 	bl	8007f44 <vPortExitCritical>

		taskENTER_CRITICAL();
 80071a2:	f000 fe9f 	bl	8007ee4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80071ac:	4b13      	ldr	r3, [pc, #76]	; (80071fc <xTaskNotifyWait+0xb8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80071b8:	4b10      	ldr	r3, [pc, #64]	; (80071fc <xTaskNotifyWait+0xb8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d002      	beq.n	80071cc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	e00a      	b.n	80071e2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <xTaskNotifyWait+0xb8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	43d2      	mvns	r2, r2
 80071d8:	400a      	ands	r2, r1
 80071da:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80071de:	2301      	movs	r3, #1
 80071e0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <xTaskNotifyWait+0xb8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80071ec:	f000 feaa 	bl	8007f44 <vPortExitCritical>

		return xReturn;
 80071f0:	697b      	ldr	r3, [r7, #20]
	}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	2000083c 	.word	0x2000083c
 8007200:	e000ed04 	.word	0xe000ed04

08007204 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	; 0x28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	4613      	mov	r3, r2
 8007212:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007214:	2301      	movs	r3, #1
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <xTaskGenericNotify+0x30>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	61bb      	str	r3, [r7, #24]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007238:	f000 fe54 	bl	8007ee4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007252:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	2b04      	cmp	r3, #4
 8007260:	d82d      	bhi.n	80072be <xTaskGenericNotify+0xba>
 8007262:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <xTaskGenericNotify+0x64>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	080072e1 	.word	0x080072e1
 800726c:	0800727d 	.word	0x0800727d
 8007270:	0800728f 	.word	0x0800728f
 8007274:	0800729f 	.word	0x0800729f
 8007278:	080072a9 	.word	0x080072a9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	431a      	orrs	r2, r3
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800728c:	e02b      	b.n	80072e6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800729c:	e023      	b.n	80072e6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80072a6:	e01e      	b.n	80072e6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80072a8:	7ffb      	ldrb	r3, [r7, #31]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d004      	beq.n	80072b8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80072b6:	e016      	b.n	80072e6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80072bc:	e013      	b.n	80072e6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c8:	d00c      	beq.n	80072e4 <xTaskGenericNotify+0xe0>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	617b      	str	r3, [r7, #20]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <xTaskGenericNotify+0xda>
					break;
 80072e0:	bf00      	nop
 80072e2:	e000      	b.n	80072e6 <xTaskGenericNotify+0xe2>

					break;
 80072e4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80072e6:	7ffb      	ldrb	r3, [r7, #31]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d13a      	bne.n	8007362 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe fb3d 	bl	8005970 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fa:	4b1d      	ldr	r3, [pc, #116]	; (8007370 <xTaskGenericNotify+0x16c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d903      	bls.n	800730a <xTaskGenericNotify+0x106>
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	4a1a      	ldr	r2, [pc, #104]	; (8007370 <xTaskGenericNotify+0x16c>)
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4a17      	ldr	r2, [pc, #92]	; (8007374 <xTaskGenericNotify+0x170>)
 8007318:	441a      	add	r2, r3
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	3304      	adds	r3, #4
 800731e:	4619      	mov	r1, r3
 8007320:	4610      	mov	r0, r2
 8007322:	f7fe fac8 	bl	80058b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <xTaskGenericNotify+0x140>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	613b      	str	r3, [r7, #16]
}
 8007340:	bf00      	nop
 8007342:	e7fe      	b.n	8007342 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007348:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <xTaskGenericNotify+0x174>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	429a      	cmp	r2, r3
 8007350:	d907      	bls.n	8007362 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <xTaskGenericNotify+0x178>)
 8007354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007362:	f000 fdef 	bl	8007f44 <vPortExitCritical>

		return xReturn;
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007368:	4618      	mov	r0, r3
 800736a:	3728      	adds	r7, #40	; 0x28
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000d18 	.word	0x20000d18
 8007374:	20000840 	.word	0x20000840
 8007378:	2000083c 	.word	0x2000083c
 800737c:	e000ed04 	.word	0xe000ed04

08007380 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08e      	sub	sp, #56	; 0x38
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	4613      	mov	r3, r2
 800738e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007390:	2301      	movs	r3, #1
 8007392:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10a      	bne.n	80073b0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073ac:	bf00      	nop
 80073ae:	e7fe      	b.n	80073ae <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073b0:	f000 fe7a 	bl	80080a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80073b8:	f3ef 8211 	mrs	r2, BASEPRI
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	623a      	str	r2, [r7, #32]
 80073ce:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80073d0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	2202      	movs	r2, #2
 80073f2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d82f      	bhi.n	800745c <xTaskGenericNotifyFromISR+0xdc>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <xTaskGenericNotifyFromISR+0x84>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	0800747f 	.word	0x0800747f
 8007408:	08007419 	.word	0x08007419
 800740c:	0800742b 	.word	0x0800742b
 8007410:	0800743b 	.word	0x0800743b
 8007414:	08007445 	.word	0x08007445
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	431a      	orrs	r2, r3
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007428:	e02c      	b.n	8007484 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007438:	e024      	b.n	8007484 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007442:	e01f      	b.n	8007484 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007444:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007448:	2b02      	cmp	r3, #2
 800744a:	d004      	beq.n	8007456 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007454:	e016      	b.n	8007484 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8007456:	2300      	movs	r3, #0
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800745a:	e013      	b.n	8007484 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007466:	d00c      	beq.n	8007482 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	61bb      	str	r3, [r7, #24]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800747e:	bf00      	nop
 8007480:	e000      	b.n	8007484 <xTaskGenericNotifyFromISR+0x104>
					break;
 8007482:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007484:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007488:	2b01      	cmp	r3, #1
 800748a:	d146      	bne.n	800751a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	617b      	str	r3, [r7, #20]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074aa:	4b21      	ldr	r3, [pc, #132]	; (8007530 <xTaskGenericNotifyFromISR+0x1b0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d11d      	bne.n	80074ee <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	3304      	adds	r3, #4
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fa5a 	bl	8005970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c0:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <xTaskGenericNotifyFromISR+0x1b4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d903      	bls.n	80074d0 <xTaskGenericNotifyFromISR+0x150>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a19      	ldr	r2, [pc, #100]	; (8007534 <xTaskGenericNotifyFromISR+0x1b4>)
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4a16      	ldr	r2, [pc, #88]	; (8007538 <xTaskGenericNotifyFromISR+0x1b8>)
 80074de:	441a      	add	r2, r3
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	3304      	adds	r3, #4
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f7fe f9e5 	bl	80058b6 <vListInsertEnd>
 80074ec:	e005      	b.n	80074fa <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	3318      	adds	r3, #24
 80074f2:	4619      	mov	r1, r3
 80074f4:	4811      	ldr	r0, [pc, #68]	; (800753c <xTaskGenericNotifyFromISR+0x1bc>)
 80074f6:	f7fe f9de 	bl	80058b6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fe:	4b10      	ldr	r3, [pc, #64]	; (8007540 <xTaskGenericNotifyFromISR+0x1c0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	429a      	cmp	r2, r3
 8007506:	d908      	bls.n	800751a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800750e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007510:	2201      	movs	r2, #1
 8007512:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007514:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <xTaskGenericNotifyFromISR+0x1c4>)
 8007516:	2201      	movs	r2, #1
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f383 8811 	msr	BASEPRI, r3
}
 8007524:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007528:	4618      	mov	r0, r3
 800752a:	3738      	adds	r7, #56	; 0x38
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000d38 	.word	0x20000d38
 8007534:	20000d18 	.word	0x20000d18
 8007538:	20000840 	.word	0x20000840
 800753c:	20000cd0 	.word	0x20000cd0
 8007540:	2000083c 	.word	0x2000083c
 8007544:	20000d24 	.word	0x20000d24

08007548 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007552:	4b21      	ldr	r3, [pc, #132]	; (80075d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007558:	4b20      	ldr	r3, [pc, #128]	; (80075dc <prvAddCurrentTaskToDelayedList+0x94>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3304      	adds	r3, #4
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fa06 	bl	8005970 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800756a:	d10a      	bne.n	8007582 <prvAddCurrentTaskToDelayedList+0x3a>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d007      	beq.n	8007582 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007572:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <prvAddCurrentTaskToDelayedList+0x94>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4819      	ldr	r0, [pc, #100]	; (80075e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800757c:	f7fe f99b 	bl	80058b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007580:	e026      	b.n	80075d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4413      	add	r3, r2
 8007588:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800758a:	4b14      	ldr	r3, [pc, #80]	; (80075dc <prvAddCurrentTaskToDelayedList+0x94>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	429a      	cmp	r2, r3
 8007598:	d209      	bcs.n	80075ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <prvAddCurrentTaskToDelayedList+0x94>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3304      	adds	r3, #4
 80075a4:	4619      	mov	r1, r3
 80075a6:	4610      	mov	r0, r2
 80075a8:	f7fe f9a9 	bl	80058fe <vListInsert>
}
 80075ac:	e010      	b.n	80075d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ae:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <prvAddCurrentTaskToDelayedList+0x94>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fe f99f 	bl	80058fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d202      	bcs.n	80075d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80075ca:	4a08      	ldr	r2, [pc, #32]	; (80075ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6013      	str	r3, [r2, #0]
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000d14 	.word	0x20000d14
 80075dc:	2000083c 	.word	0x2000083c
 80075e0:	20000cfc 	.word	0x20000cfc
 80075e4:	20000ccc 	.word	0x20000ccc
 80075e8:	20000cc8 	.word	0x20000cc8
 80075ec:	20000d30 	.word	0x20000d30

080075f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075fa:	f000 fb07 	bl	8007c0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075fe:	4b1c      	ldr	r3, [pc, #112]	; (8007670 <xTimerCreateTimerTask+0x80>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d021      	beq.n	800764a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800760e:	1d3a      	adds	r2, r7, #4
 8007610:	f107 0108 	add.w	r1, r7, #8
 8007614:	f107 030c 	add.w	r3, r7, #12
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe f905 	bl	8005828 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	9202      	str	r2, [sp, #8]
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	2302      	movs	r3, #2
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	460a      	mov	r2, r1
 8007630:	4910      	ldr	r1, [pc, #64]	; (8007674 <xTimerCreateTimerTask+0x84>)
 8007632:	4811      	ldr	r0, [pc, #68]	; (8007678 <xTimerCreateTimerTask+0x88>)
 8007634:	f7fe feb2 	bl	800639c <xTaskCreateStatic>
 8007638:	4603      	mov	r3, r0
 800763a:	4a10      	ldr	r2, [pc, #64]	; (800767c <xTimerCreateTimerTask+0x8c>)
 800763c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800763e:	4b0f      	ldr	r3, [pc, #60]	; (800767c <xTimerCreateTimerTask+0x8c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007646:	2301      	movs	r3, #1
 8007648:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	613b      	str	r3, [r7, #16]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007666:	697b      	ldr	r3, [r7, #20]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000d6c 	.word	0x20000d6c
 8007674:	0800874c 	.word	0x0800874c
 8007678:	080077b5 	.word	0x080077b5
 800767c:	20000d70 	.word	0x20000d70

08007680 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08a      	sub	sp, #40	; 0x28
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800768e:	2300      	movs	r3, #0
 8007690:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	623b      	str	r3, [r7, #32]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80076ae:	4b1a      	ldr	r3, [pc, #104]	; (8007718 <xTimerGenericCommand+0x98>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d02a      	beq.n	800770c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b05      	cmp	r3, #5
 80076c6:	dc18      	bgt.n	80076fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076c8:	f7ff fcb0 	bl	800702c <xTaskGetSchedulerState>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d109      	bne.n	80076e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <xTimerGenericCommand+0x98>)
 80076d4:	6818      	ldr	r0, [r3, #0]
 80076d6:	f107 0110 	add.w	r1, r7, #16
 80076da:	2300      	movs	r3, #0
 80076dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076de:	f7fe fa75 	bl	8005bcc <xQueueGenericSend>
 80076e2:	6278      	str	r0, [r7, #36]	; 0x24
 80076e4:	e012      	b.n	800770c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076e6:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <xTimerGenericCommand+0x98>)
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f107 0110 	add.w	r1, r7, #16
 80076ee:	2300      	movs	r3, #0
 80076f0:	2200      	movs	r2, #0
 80076f2:	f7fe fa6b 	bl	8005bcc <xQueueGenericSend>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24
 80076f8:	e008      	b.n	800770c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076fa:	4b07      	ldr	r3, [pc, #28]	; (8007718 <xTimerGenericCommand+0x98>)
 80076fc:	6818      	ldr	r0, [r3, #0]
 80076fe:	f107 0110 	add.w	r1, r7, #16
 8007702:	2300      	movs	r3, #0
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	f7fe fb5f 	bl	8005dc8 <xQueueGenericSendFromISR>
 800770a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800770e:	4618      	mov	r0, r3
 8007710:	3728      	adds	r7, #40	; 0x28
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000d6c 	.word	0x20000d6c

0800771c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af02      	add	r7, sp, #8
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007726:	4b22      	ldr	r3, [pc, #136]	; (80077b0 <prvProcessExpiredTimer+0x94>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	3304      	adds	r3, #4
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe f91b 	bl	8005970 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	d022      	beq.n	800778e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	699a      	ldr	r2, [r3, #24]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	18d1      	adds	r1, r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	6978      	ldr	r0, [r7, #20]
 8007756:	f000 f8d1 	bl	80078fc <prvInsertTimerInActiveList>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01f      	beq.n	80077a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007760:	2300      	movs	r3, #0
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	2300      	movs	r3, #0
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	2100      	movs	r1, #0
 800776a:	6978      	ldr	r0, [r7, #20]
 800776c:	f7ff ff88 	bl	8007680 <xTimerGenericCommand>
 8007770:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d113      	bne.n	80077a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	60fb      	str	r3, [r7, #12]
}
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	b2da      	uxtb	r2, r3
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	6978      	ldr	r0, [r7, #20]
 80077a6:	4798      	blx	r3
}
 80077a8:	bf00      	nop
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000d64 	.word	0x20000d64

080077b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077bc:	f107 0308 	add.w	r3, r7, #8
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 f857 	bl	8007874 <prvGetNextExpireTime>
 80077c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4619      	mov	r1, r3
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f803 	bl	80077d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077d2:	f000 f8d5 	bl	8007980 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077d6:	e7f1      	b.n	80077bc <prvTimerTask+0x8>

080077d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80077e2:	f7ff f837 	bl	8006854 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077e6:	f107 0308 	add.w	r3, r7, #8
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 f866 	bl	80078bc <prvSampleTimeNow>
 80077f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d130      	bne.n	800785a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <prvProcessTimerOrBlockTask+0x3c>
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	429a      	cmp	r2, r3
 8007804:	d806      	bhi.n	8007814 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007806:	f7ff f833 	bl	8006870 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff ff85 	bl	800771c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007812:	e024      	b.n	800785e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <prvProcessTimerOrBlockTask+0x90>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <prvProcessTimerOrBlockTask+0x50>
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <prvProcessTimerOrBlockTask+0x52>
 8007828:	2300      	movs	r3, #0
 800782a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800782c:	4b0f      	ldr	r3, [pc, #60]	; (800786c <prvProcessTimerOrBlockTask+0x94>)
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	4619      	mov	r1, r3
 800783a:	f7fe fd7b 	bl	8006334 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800783e:	f7ff f817 	bl	8006870 <xTaskResumeAll>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007848:	4b09      	ldr	r3, [pc, #36]	; (8007870 <prvProcessTimerOrBlockTask+0x98>)
 800784a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	f3bf 8f6f 	isb	sy
}
 8007858:	e001      	b.n	800785e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800785a:	f7ff f809 	bl	8006870 <xTaskResumeAll>
}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000d68 	.word	0x20000d68
 800786c:	20000d6c 	.word	0x20000d6c
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800787c:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <prvGetNextExpireTime+0x44>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <prvGetNextExpireTime+0x16>
 8007886:	2201      	movs	r2, #1
 8007888:	e000      	b.n	800788c <prvGetNextExpireTime+0x18>
 800788a:	2200      	movs	r2, #0
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d105      	bne.n	80078a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007898:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <prvGetNextExpireTime+0x44>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e001      	b.n	80078a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078a8:	68fb      	ldr	r3, [r7, #12]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20000d64 	.word	0x20000d64

080078bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80078c4:	f7ff f872 	bl	80069ac <xTaskGetTickCount>
 80078c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80078ca:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <prvSampleTimeNow+0x3c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d205      	bcs.n	80078e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80078d4:	f000 f936 	bl	8007b44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e002      	b.n	80078e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078e6:	4a04      	ldr	r2, [pc, #16]	; (80078f8 <prvSampleTimeNow+0x3c>)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80078ec:	68fb      	ldr	r3, [r7, #12]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000d74 	.word	0x20000d74

080078fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800790a:	2300      	movs	r3, #0
 800790c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	429a      	cmp	r2, r3
 8007920:	d812      	bhi.n	8007948 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	429a      	cmp	r2, r3
 800792e:	d302      	bcc.n	8007936 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e01b      	b.n	800796e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007936:	4b10      	ldr	r3, [pc, #64]	; (8007978 <prvInsertTimerInActiveList+0x7c>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7fd ffdc 	bl	80058fe <vListInsert>
 8007946:	e012      	b.n	800796e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d206      	bcs.n	800795e <prvInsertTimerInActiveList+0x62>
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d302      	bcc.n	800795e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007958:	2301      	movs	r3, #1
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	e007      	b.n	800796e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800795e:	4b07      	ldr	r3, [pc, #28]	; (800797c <prvInsertTimerInActiveList+0x80>)
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3304      	adds	r3, #4
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f7fd ffc8 	bl	80058fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800796e:	697b      	ldr	r3, [r7, #20]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000d68 	.word	0x20000d68
 800797c:	20000d64 	.word	0x20000d64

08007980 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08e      	sub	sp, #56	; 0x38
 8007984:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007986:	e0ca      	b.n	8007b1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	da18      	bge.n	80079c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800798e:	1d3b      	adds	r3, r7, #4
 8007990:	3304      	adds	r3, #4
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	61fb      	str	r3, [r7, #28]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b6:	6850      	ldr	r0, [r2, #4]
 80079b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ba:	6892      	ldr	r2, [r2, #8]
 80079bc:	4611      	mov	r1, r2
 80079be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f2c0 80aa 	blt.w	8007b1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d004      	beq.n	80079de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	3304      	adds	r3, #4
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fd ffc9 	bl	8005970 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079de:	463b      	mov	r3, r7
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff ff6b 	bl	80078bc <prvSampleTimeNow>
 80079e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b09      	cmp	r3, #9
 80079ec:	f200 8097 	bhi.w	8007b1e <prvProcessReceivedCommands+0x19e>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <prvProcessReceivedCommands+0x78>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a21 	.word	0x08007a21
 80079fc:	08007a21 	.word	0x08007a21
 8007a00:	08007a21 	.word	0x08007a21
 8007a04:	08007a95 	.word	0x08007a95
 8007a08:	08007aa9 	.word	0x08007aa9
 8007a0c:	08007af3 	.word	0x08007af3
 8007a10:	08007a21 	.word	0x08007a21
 8007a14:	08007a21 	.word	0x08007a21
 8007a18:	08007a95 	.word	0x08007a95
 8007a1c:	08007aa9 	.word	0x08007aa9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	18d1      	adds	r1, r2, r3
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a40:	f7ff ff5c 	bl	80078fc <prvInsertTimerInActiveList>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d069      	beq.n	8007b1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d05e      	beq.n	8007b1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	441a      	add	r2, r3
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2100      	movs	r1, #0
 8007a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a72:	f7ff fe05 	bl	8007680 <xTimerGenericCommand>
 8007a76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d14f      	bne.n	8007b1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	61bb      	str	r3, [r7, #24]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007aa6:	e03a      	b.n	8007b1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	617b      	str	r3, [r7, #20]
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	699a      	ldr	r2, [r3, #24]
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	18d1      	adds	r1, r2, r3
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aec:	f7ff ff06 	bl	80078fc <prvInsertTimerInActiveList>
					break;
 8007af0:	e015      	b.n	8007b1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d103      	bne.n	8007b08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b02:	f000 fbdd 	bl	80082c0 <vPortFree>
 8007b06:	e00a      	b.n	8007b1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b0e:	f023 0301 	bic.w	r3, r3, #1
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b1a:	e000      	b.n	8007b1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b1e:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <prvProcessReceivedCommands+0x1c0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	1d39      	adds	r1, r7, #4
 8007b24:	2200      	movs	r2, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe f9ea 	bl	8005f00 <xQueueReceive>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f47f af2a 	bne.w	8007988 <prvProcessReceivedCommands+0x8>
	}
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	3730      	adds	r7, #48	; 0x30
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000d6c 	.word	0x20000d6c

08007b44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b4a:	e048      	b.n	8007bde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b4c:	4b2d      	ldr	r3, [pc, #180]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b56:	4b2b      	ldr	r3, [pc, #172]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fd ff03 	bl	8005970 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d02e      	beq.n	8007bde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4413      	add	r3, r2
 8007b88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d90e      	bls.n	8007bb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b9e:	4b19      	ldr	r3, [pc, #100]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f7fd fea8 	bl	80058fe <vListInsert>
 8007bae:	e016      	b.n	8007bde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	2100      	movs	r1, #0
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff fd60 	bl	8007680 <xTimerGenericCommand>
 8007bc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	603b      	str	r3, [r7, #0]
}
 8007bda:	bf00      	nop
 8007bdc:	e7fe      	b.n	8007bdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1b1      	bne.n	8007b4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <prvSwitchTimerLists+0xc4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a04      	ldr	r2, [pc, #16]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007bf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bf6:	4a04      	ldr	r2, [pc, #16]	; (8007c08 <prvSwitchTimerLists+0xc4>)
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	6013      	str	r3, [r2, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	20000d64 	.word	0x20000d64
 8007c08:	20000d68 	.word	0x20000d68

08007c0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c12:	f000 f967 	bl	8007ee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c16:	4b15      	ldr	r3, [pc, #84]	; (8007c6c <prvCheckForValidListAndQueue+0x60>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d120      	bne.n	8007c60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c1e:	4814      	ldr	r0, [pc, #80]	; (8007c70 <prvCheckForValidListAndQueue+0x64>)
 8007c20:	f7fd fe1c 	bl	800585c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c24:	4813      	ldr	r0, [pc, #76]	; (8007c74 <prvCheckForValidListAndQueue+0x68>)
 8007c26:	f7fd fe19 	bl	800585c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c2a:	4b13      	ldr	r3, [pc, #76]	; (8007c78 <prvCheckForValidListAndQueue+0x6c>)
 8007c2c:	4a10      	ldr	r2, [pc, #64]	; (8007c70 <prvCheckForValidListAndQueue+0x64>)
 8007c2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c30:	4b12      	ldr	r3, [pc, #72]	; (8007c7c <prvCheckForValidListAndQueue+0x70>)
 8007c32:	4a10      	ldr	r2, [pc, #64]	; (8007c74 <prvCheckForValidListAndQueue+0x68>)
 8007c34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c36:	2300      	movs	r3, #0
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <prvCheckForValidListAndQueue+0x74>)
 8007c3c:	4a11      	ldr	r2, [pc, #68]	; (8007c84 <prvCheckForValidListAndQueue+0x78>)
 8007c3e:	2110      	movs	r1, #16
 8007c40:	200a      	movs	r0, #10
 8007c42:	f7fd ff27 	bl	8005a94 <xQueueGenericCreateStatic>
 8007c46:	4603      	mov	r3, r0
 8007c48:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <prvCheckForValidListAndQueue+0x60>)
 8007c4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c4c:	4b07      	ldr	r3, [pc, #28]	; (8007c6c <prvCheckForValidListAndQueue+0x60>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c54:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <prvCheckForValidListAndQueue+0x60>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	490b      	ldr	r1, [pc, #44]	; (8007c88 <prvCheckForValidListAndQueue+0x7c>)
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fb40 	bl	80062e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c60:	f000 f970 	bl	8007f44 <vPortExitCritical>
}
 8007c64:	bf00      	nop
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20000d6c 	.word	0x20000d6c
 8007c70:	20000d3c 	.word	0x20000d3c
 8007c74:	20000d50 	.word	0x20000d50
 8007c78:	20000d64 	.word	0x20000d64
 8007c7c:	20000d68 	.word	0x20000d68
 8007c80:	20000e18 	.word	0x20000e18
 8007c84:	20000d78 	.word	0x20000d78
 8007c88:	08008754 	.word	0x08008754

08007c8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3b04      	subs	r3, #4
 8007c9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3b04      	subs	r3, #4
 8007caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f023 0201 	bic.w	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3b04      	subs	r3, #4
 8007cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cbc:	4a0c      	ldr	r2, [pc, #48]	; (8007cf0 <pxPortInitialiseStack+0x64>)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3b14      	subs	r3, #20
 8007cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3b04      	subs	r3, #4
 8007cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f06f 0202 	mvn.w	r2, #2
 8007cda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3b20      	subs	r3, #32
 8007ce0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	08007cf5 	.word	0x08007cf5

08007cf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <prvTaskExitError+0x54>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d06:	d00a      	beq.n	8007d1e <prvTaskExitError+0x2a>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	60fb      	str	r3, [r7, #12]
}
 8007d1a:	bf00      	nop
 8007d1c:	e7fe      	b.n	8007d1c <prvTaskExitError+0x28>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	60bb      	str	r3, [r7, #8]
}
 8007d30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d32:	bf00      	nop
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0fc      	beq.n	8007d34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	20000020 	.word	0x20000020
 8007d4c:	00000000 	.word	0x00000000

08007d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <pxCurrentTCBConst2>)
 8007d52:	6819      	ldr	r1, [r3, #0]
 8007d54:	6808      	ldr	r0, [r1, #0]
 8007d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5a:	f380 8809 	msr	PSP, r0
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f04f 0000 	mov.w	r0, #0
 8007d66:	f380 8811 	msr	BASEPRI, r0
 8007d6a:	4770      	bx	lr
 8007d6c:	f3af 8000 	nop.w

08007d70 <pxCurrentTCBConst2>:
 8007d70:	2000083c 	.word	0x2000083c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop

08007d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d78:	4808      	ldr	r0, [pc, #32]	; (8007d9c <prvPortStartFirstTask+0x24>)
 8007d7a:	6800      	ldr	r0, [r0, #0]
 8007d7c:	6800      	ldr	r0, [r0, #0]
 8007d7e:	f380 8808 	msr	MSP, r0
 8007d82:	f04f 0000 	mov.w	r0, #0
 8007d86:	f380 8814 	msr	CONTROL, r0
 8007d8a:	b662      	cpsie	i
 8007d8c:	b661      	cpsie	f
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	df00      	svc	0
 8007d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d9a:	bf00      	nop
 8007d9c:	e000ed08 	.word	0xe000ed08

08007da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007da6:	4b46      	ldr	r3, [pc, #280]	; (8007ec0 <xPortStartScheduler+0x120>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a46      	ldr	r2, [pc, #280]	; (8007ec4 <xPortStartScheduler+0x124>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d10a      	bne.n	8007dc6 <xPortStartScheduler+0x26>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	613b      	str	r3, [r7, #16]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007dc6:	4b3e      	ldr	r3, [pc, #248]	; (8007ec0 <xPortStartScheduler+0x120>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a3f      	ldr	r2, [pc, #252]	; (8007ec8 <xPortStartScheduler+0x128>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d10a      	bne.n	8007de6 <xPortStartScheduler+0x46>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	60fb      	str	r3, [r7, #12]
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007de6:	4b39      	ldr	r3, [pc, #228]	; (8007ecc <xPortStartScheduler+0x12c>)
 8007de8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	22ff      	movs	r2, #255	; 0xff
 8007df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	4b31      	ldr	r3, [pc, #196]	; (8007ed0 <xPortStartScheduler+0x130>)
 8007e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e0e:	4b31      	ldr	r3, [pc, #196]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e10:	2207      	movs	r2, #7
 8007e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e14:	e009      	b.n	8007e2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e16:	4b2f      	ldr	r3, [pc, #188]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	4a2d      	ldr	r2, [pc, #180]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e32:	2b80      	cmp	r3, #128	; 0x80
 8007e34:	d0ef      	beq.n	8007e16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e36:	4b27      	ldr	r3, [pc, #156]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f1c3 0307 	rsb	r3, r3, #7
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d00a      	beq.n	8007e58 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60bb      	str	r3, [r7, #8]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e58:	4b1e      	ldr	r3, [pc, #120]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	4a1d      	ldr	r2, [pc, #116]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e62:	4b1c      	ldr	r3, [pc, #112]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e6a:	4a1a      	ldr	r2, [pc, #104]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e76:	4b18      	ldr	r3, [pc, #96]	; (8007ed8 <xPortStartScheduler+0x138>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a17      	ldr	r2, [pc, #92]	; (8007ed8 <xPortStartScheduler+0x138>)
 8007e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e82:	4b15      	ldr	r3, [pc, #84]	; (8007ed8 <xPortStartScheduler+0x138>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a14      	ldr	r2, [pc, #80]	; (8007ed8 <xPortStartScheduler+0x138>)
 8007e88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e8e:	f000 f8dd 	bl	800804c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e92:	4b12      	ldr	r3, [pc, #72]	; (8007edc <xPortStartScheduler+0x13c>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e98:	f000 f8fc 	bl	8008094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e9c:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <xPortStartScheduler+0x140>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a0f      	ldr	r2, [pc, #60]	; (8007ee0 <xPortStartScheduler+0x140>)
 8007ea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ea8:	f7ff ff66 	bl	8007d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007eac:	f7fe fe48 	bl	8006b40 <vTaskSwitchContext>
	prvTaskExitError();
 8007eb0:	f7ff ff20 	bl	8007cf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	e000ed00 	.word	0xe000ed00
 8007ec4:	410fc271 	.word	0x410fc271
 8007ec8:	410fc270 	.word	0x410fc270
 8007ecc:	e000e400 	.word	0xe000e400
 8007ed0:	20000e68 	.word	0x20000e68
 8007ed4:	20000e6c 	.word	0x20000e6c
 8007ed8:	e000ed20 	.word	0xe000ed20
 8007edc:	20000020 	.word	0x20000020
 8007ee0:	e000ef34 	.word	0xe000ef34

08007ee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	607b      	str	r3, [r7, #4]
}
 8007efc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007efe:	4b0f      	ldr	r3, [pc, #60]	; (8007f3c <vPortEnterCritical+0x58>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3301      	adds	r3, #1
 8007f04:	4a0d      	ldr	r2, [pc, #52]	; (8007f3c <vPortEnterCritical+0x58>)
 8007f06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f08:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <vPortEnterCritical+0x58>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d10f      	bne.n	8007f30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <vPortEnterCritical+0x5c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	603b      	str	r3, [r7, #0]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <vPortEnterCritical+0x4a>
	}
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	20000020 	.word	0x20000020
 8007f40:	e000ed04 	.word	0xe000ed04

08007f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <vPortExitCritical+0x50>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10a      	bne.n	8007f68 <vPortExitCritical+0x24>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	607b      	str	r3, [r7, #4]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f68:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <vPortExitCritical+0x50>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	4a09      	ldr	r2, [pc, #36]	; (8007f94 <vPortExitCritical+0x50>)
 8007f70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f72:	4b08      	ldr	r3, [pc, #32]	; (8007f94 <vPortExitCritical+0x50>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <vPortExitCritical+0x42>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	f383 8811 	msr	BASEPRI, r3
}
 8007f84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20000020 	.word	0x20000020
	...

08007fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fa0:	f3ef 8009 	mrs	r0, PSP
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	4b15      	ldr	r3, [pc, #84]	; (8008000 <pxCurrentTCBConst>)
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	f01e 0f10 	tst.w	lr, #16
 8007fb0:	bf08      	it	eq
 8007fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fba:	6010      	str	r0, [r2, #0]
 8007fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fc4:	f380 8811 	msr	BASEPRI, r0
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f7fe fdb6 	bl	8006b40 <vTaskSwitchContext>
 8007fd4:	f04f 0000 	mov.w	r0, #0
 8007fd8:	f380 8811 	msr	BASEPRI, r0
 8007fdc:	bc09      	pop	{r0, r3}
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	6808      	ldr	r0, [r1, #0]
 8007fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe6:	f01e 0f10 	tst.w	lr, #16
 8007fea:	bf08      	it	eq
 8007fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ff0:	f380 8809 	msr	PSP, r0
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	f3af 8000 	nop.w

08008000 <pxCurrentTCBConst>:
 8008000:	2000083c 	.word	0x2000083c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop

08008008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	607b      	str	r3, [r7, #4]
}
 8008020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008022:	f7fe fcd3 	bl	80069cc <xTaskIncrementTick>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800802c:	4b06      	ldr	r3, [pc, #24]	; (8008048 <xPortSysTickHandler+0x40>)
 800802e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	2300      	movs	r3, #0
 8008036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f383 8811 	msr	BASEPRI, r3
}
 800803e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <vPortSetupTimerInterrupt+0x34>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008056:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <vPortSetupTimerInterrupt+0x38>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <vPortSetupTimerInterrupt+0x3c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a0a      	ldr	r2, [pc, #40]	; (800808c <vPortSetupTimerInterrupt+0x40>)
 8008062:	fba2 2303 	umull	r2, r3, r2, r3
 8008066:	099b      	lsrs	r3, r3, #6
 8008068:	4a09      	ldr	r2, [pc, #36]	; (8008090 <vPortSetupTimerInterrupt+0x44>)
 800806a:	3b01      	subs	r3, #1
 800806c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800806e:	4b04      	ldr	r3, [pc, #16]	; (8008080 <vPortSetupTimerInterrupt+0x34>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
}
 8008074:	bf00      	nop
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	e000e010 	.word	0xe000e010
 8008084:	e000e018 	.word	0xe000e018
 8008088:	20000014 	.word	0x20000014
 800808c:	10624dd3 	.word	0x10624dd3
 8008090:	e000e014 	.word	0xe000e014

08008094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080a4 <vPortEnableVFP+0x10>
 8008098:	6801      	ldr	r1, [r0, #0]
 800809a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800809e:	6001      	str	r1, [r0, #0]
 80080a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080a2:	bf00      	nop
 80080a4:	e000ed88 	.word	0xe000ed88

080080a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ae:	f3ef 8305 	mrs	r3, IPSR
 80080b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b0f      	cmp	r3, #15
 80080b8:	d914      	bls.n	80080e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080ba:	4a17      	ldr	r2, [pc, #92]	; (8008118 <vPortValidateInterruptPriority+0x70>)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080c4:	4b15      	ldr	r3, [pc, #84]	; (800811c <vPortValidateInterruptPriority+0x74>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	7afa      	ldrb	r2, [r7, #11]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d20a      	bcs.n	80080e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	607b      	str	r3, [r7, #4]
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080e4:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <vPortValidateInterruptPriority+0x78>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <vPortValidateInterruptPriority+0x7c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d90a      	bls.n	800810a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	603b      	str	r3, [r7, #0]
}
 8008106:	bf00      	nop
 8008108:	e7fe      	b.n	8008108 <vPortValidateInterruptPriority+0x60>
	}
 800810a:	bf00      	nop
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	e000e3f0 	.word	0xe000e3f0
 800811c:	20000e68 	.word	0x20000e68
 8008120:	e000ed0c 	.word	0xe000ed0c
 8008124:	20000e6c 	.word	0x20000e6c

08008128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08a      	sub	sp, #40	; 0x28
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008130:	2300      	movs	r3, #0
 8008132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008134:	f7fe fb8e 	bl	8006854 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008138:	4b5b      	ldr	r3, [pc, #364]	; (80082a8 <pvPortMalloc+0x180>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008140:	f000 f920 	bl	8008384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008144:	4b59      	ldr	r3, [pc, #356]	; (80082ac <pvPortMalloc+0x184>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4013      	ands	r3, r2
 800814c:	2b00      	cmp	r3, #0
 800814e:	f040 8093 	bne.w	8008278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d01d      	beq.n	8008194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008158:	2208      	movs	r2, #8
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4413      	add	r3, r2
 800815e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	2b00      	cmp	r3, #0
 8008168:	d014      	beq.n	8008194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f023 0307 	bic.w	r3, r3, #7
 8008170:	3308      	adds	r3, #8
 8008172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <pvPortMalloc+0x6c>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	617b      	str	r3, [r7, #20]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d06e      	beq.n	8008278 <pvPortMalloc+0x150>
 800819a:	4b45      	ldr	r3, [pc, #276]	; (80082b0 <pvPortMalloc+0x188>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d869      	bhi.n	8008278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081a4:	4b43      	ldr	r3, [pc, #268]	; (80082b4 <pvPortMalloc+0x18c>)
 80081a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081a8:	4b42      	ldr	r3, [pc, #264]	; (80082b4 <pvPortMalloc+0x18c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ae:	e004      	b.n	80081ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d903      	bls.n	80081cc <pvPortMalloc+0xa4>
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1f1      	bne.n	80081b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081cc:	4b36      	ldr	r3, [pc, #216]	; (80082a8 <pvPortMalloc+0x180>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d050      	beq.n	8008278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2208      	movs	r2, #8
 80081dc:	4413      	add	r3, r2
 80081de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	1ad2      	subs	r2, r2, r3
 80081f0:	2308      	movs	r3, #8
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d91f      	bls.n	8008238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4413      	add	r3, r2
 80081fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <pvPortMalloc+0xf8>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	613b      	str	r3, [r7, #16]
}
 800821c:	bf00      	nop
 800821e:	e7fe      	b.n	800821e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	1ad2      	subs	r2, r2, r3
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008232:	69b8      	ldr	r0, [r7, #24]
 8008234:	f000 f908 	bl	8008448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008238:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <pvPortMalloc+0x188>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	4a1b      	ldr	r2, [pc, #108]	; (80082b0 <pvPortMalloc+0x188>)
 8008244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008246:	4b1a      	ldr	r3, [pc, #104]	; (80082b0 <pvPortMalloc+0x188>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <pvPortMalloc+0x190>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d203      	bcs.n	800825a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008252:	4b17      	ldr	r3, [pc, #92]	; (80082b0 <pvPortMalloc+0x188>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a18      	ldr	r2, [pc, #96]	; (80082b8 <pvPortMalloc+0x190>)
 8008258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	4b13      	ldr	r3, [pc, #76]	; (80082ac <pvPortMalloc+0x184>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	431a      	orrs	r2, r3
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800826e:	4b13      	ldr	r3, [pc, #76]	; (80082bc <pvPortMalloc+0x194>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3301      	adds	r3, #1
 8008274:	4a11      	ldr	r2, [pc, #68]	; (80082bc <pvPortMalloc+0x194>)
 8008276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008278:	f7fe fafa 	bl	8006870 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <pvPortMalloc+0x174>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	60fb      	str	r3, [r7, #12]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <pvPortMalloc+0x172>
	return pvReturn;
 800829c:	69fb      	ldr	r3, [r7, #28]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3728      	adds	r7, #40	; 0x28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20004a78 	.word	0x20004a78
 80082ac:	20004a8c 	.word	0x20004a8c
 80082b0:	20004a7c 	.word	0x20004a7c
 80082b4:	20004a70 	.word	0x20004a70
 80082b8:	20004a80 	.word	0x20004a80
 80082bc:	20004a84 	.word	0x20004a84

080082c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d04d      	beq.n	800836e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082d2:	2308      	movs	r3, #8
 80082d4:	425b      	negs	r3, r3
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	4413      	add	r3, r2
 80082da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	4b24      	ldr	r3, [pc, #144]	; (8008378 <vPortFree+0xb8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4013      	ands	r3, r2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <vPortFree+0x44>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	60fb      	str	r3, [r7, #12]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <vPortFree+0x62>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	60bb      	str	r3, [r7, #8]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	4b14      	ldr	r3, [pc, #80]	; (8008378 <vPortFree+0xb8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4013      	ands	r3, r2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01e      	beq.n	800836e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d11a      	bne.n	800836e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <vPortFree+0xb8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	43db      	mvns	r3, r3
 8008342:	401a      	ands	r2, r3
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008348:	f7fe fa84 	bl	8006854 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	4b0a      	ldr	r3, [pc, #40]	; (800837c <vPortFree+0xbc>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4413      	add	r3, r2
 8008356:	4a09      	ldr	r2, [pc, #36]	; (800837c <vPortFree+0xbc>)
 8008358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800835a:	6938      	ldr	r0, [r7, #16]
 800835c:	f000 f874 	bl	8008448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008360:	4b07      	ldr	r3, [pc, #28]	; (8008380 <vPortFree+0xc0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3301      	adds	r3, #1
 8008366:	4a06      	ldr	r2, [pc, #24]	; (8008380 <vPortFree+0xc0>)
 8008368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800836a:	f7fe fa81 	bl	8006870 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800836e:	bf00      	nop
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20004a8c 	.word	0x20004a8c
 800837c:	20004a7c 	.word	0x20004a7c
 8008380:	20004a88 	.word	0x20004a88

08008384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800838a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800838e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008390:	4b27      	ldr	r3, [pc, #156]	; (8008430 <prvHeapInit+0xac>)
 8008392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00c      	beq.n	80083b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3307      	adds	r3, #7
 80083a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 0307 	bic.w	r3, r3, #7
 80083aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	4a1f      	ldr	r2, [pc, #124]	; (8008430 <prvHeapInit+0xac>)
 80083b4:	4413      	add	r3, r2
 80083b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083bc:	4a1d      	ldr	r2, [pc, #116]	; (8008434 <prvHeapInit+0xb0>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083c2:	4b1c      	ldr	r3, [pc, #112]	; (8008434 <prvHeapInit+0xb0>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4413      	add	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083d0:	2208      	movs	r2, #8
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0307 	bic.w	r3, r3, #7
 80083de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4a15      	ldr	r2, [pc, #84]	; (8008438 <prvHeapInit+0xb4>)
 80083e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083e6:	4b14      	ldr	r3, [pc, #80]	; (8008438 <prvHeapInit+0xb4>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2200      	movs	r2, #0
 80083ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083ee:	4b12      	ldr	r3, [pc, #72]	; (8008438 <prvHeapInit+0xb4>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	1ad2      	subs	r2, r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <prvHeapInit+0xb4>)
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4a0a      	ldr	r2, [pc, #40]	; (800843c <prvHeapInit+0xb8>)
 8008412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	4a09      	ldr	r2, [pc, #36]	; (8008440 <prvHeapInit+0xbc>)
 800841a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800841c:	4b09      	ldr	r3, [pc, #36]	; (8008444 <prvHeapInit+0xc0>)
 800841e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008422:	601a      	str	r2, [r3, #0]
}
 8008424:	bf00      	nop
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	20000e70 	.word	0x20000e70
 8008434:	20004a70 	.word	0x20004a70
 8008438:	20004a78 	.word	0x20004a78
 800843c:	20004a80 	.word	0x20004a80
 8008440:	20004a7c 	.word	0x20004a7c
 8008444:	20004a8c 	.word	0x20004a8c

08008448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008450:	4b28      	ldr	r3, [pc, #160]	; (80084f4 <prvInsertBlockIntoFreeList+0xac>)
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e002      	b.n	800845c <prvInsertBlockIntoFreeList+0x14>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d8f7      	bhi.n	8008456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	4413      	add	r3, r2
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	429a      	cmp	r2, r3
 8008476:	d108      	bne.n	800848a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	441a      	add	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	441a      	add	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d118      	bne.n	80084d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	4b15      	ldr	r3, [pc, #84]	; (80084f8 <prvInsertBlockIntoFreeList+0xb0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d00d      	beq.n	80084c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	441a      	add	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e008      	b.n	80084d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084c6:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <prvInsertBlockIntoFreeList+0xb0>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	e003      	b.n	80084d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d002      	beq.n	80084e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084e6:	bf00      	nop
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20004a70 	.word	0x20004a70
 80084f8:	20004a78 	.word	0x20004a78

080084fc <__libc_init_array>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	4d0d      	ldr	r5, [pc, #52]	; (8008534 <__libc_init_array+0x38>)
 8008500:	4c0d      	ldr	r4, [pc, #52]	; (8008538 <__libc_init_array+0x3c>)
 8008502:	1b64      	subs	r4, r4, r5
 8008504:	10a4      	asrs	r4, r4, #2
 8008506:	2600      	movs	r6, #0
 8008508:	42a6      	cmp	r6, r4
 800850a:	d109      	bne.n	8008520 <__libc_init_array+0x24>
 800850c:	4d0b      	ldr	r5, [pc, #44]	; (800853c <__libc_init_array+0x40>)
 800850e:	4c0c      	ldr	r4, [pc, #48]	; (8008540 <__libc_init_array+0x44>)
 8008510:	f000 f8f6 	bl	8008700 <_init>
 8008514:	1b64      	subs	r4, r4, r5
 8008516:	10a4      	asrs	r4, r4, #2
 8008518:	2600      	movs	r6, #0
 800851a:	42a6      	cmp	r6, r4
 800851c:	d105      	bne.n	800852a <__libc_init_array+0x2e>
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	f855 3b04 	ldr.w	r3, [r5], #4
 8008524:	4798      	blx	r3
 8008526:	3601      	adds	r6, #1
 8008528:	e7ee      	b.n	8008508 <__libc_init_array+0xc>
 800852a:	f855 3b04 	ldr.w	r3, [r5], #4
 800852e:	4798      	blx	r3
 8008530:	3601      	adds	r6, #1
 8008532:	e7f2      	b.n	800851a <__libc_init_array+0x1e>
 8008534:	08008848 	.word	0x08008848
 8008538:	08008848 	.word	0x08008848
 800853c:	08008848 	.word	0x08008848
 8008540:	0800884c 	.word	0x0800884c

08008544 <__retarget_lock_acquire_recursive>:
 8008544:	4770      	bx	lr

08008546 <__retarget_lock_release_recursive>:
 8008546:	4770      	bx	lr

08008548 <memcpy>:
 8008548:	440a      	add	r2, r1
 800854a:	4291      	cmp	r1, r2
 800854c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008550:	d100      	bne.n	8008554 <memcpy+0xc>
 8008552:	4770      	bx	lr
 8008554:	b510      	push	{r4, lr}
 8008556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800855a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800855e:	4291      	cmp	r1, r2
 8008560:	d1f9      	bne.n	8008556 <memcpy+0xe>
 8008562:	bd10      	pop	{r4, pc}

08008564 <memset>:
 8008564:	4402      	add	r2, r0
 8008566:	4603      	mov	r3, r0
 8008568:	4293      	cmp	r3, r2
 800856a:	d100      	bne.n	800856e <memset+0xa>
 800856c:	4770      	bx	lr
 800856e:	f803 1b01 	strb.w	r1, [r3], #1
 8008572:	e7f9      	b.n	8008568 <memset+0x4>

08008574 <cleanup_glue>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	460c      	mov	r4, r1
 8008578:	6809      	ldr	r1, [r1, #0]
 800857a:	4605      	mov	r5, r0
 800857c:	b109      	cbz	r1, 8008582 <cleanup_glue+0xe>
 800857e:	f7ff fff9 	bl	8008574 <cleanup_glue>
 8008582:	4621      	mov	r1, r4
 8008584:	4628      	mov	r0, r5
 8008586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800858a:	f000 b869 	b.w	8008660 <_free_r>
	...

08008590 <_reclaim_reent>:
 8008590:	4b2c      	ldr	r3, [pc, #176]	; (8008644 <_reclaim_reent+0xb4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4283      	cmp	r3, r0
 8008596:	b570      	push	{r4, r5, r6, lr}
 8008598:	4604      	mov	r4, r0
 800859a:	d051      	beq.n	8008640 <_reclaim_reent+0xb0>
 800859c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800859e:	b143      	cbz	r3, 80085b2 <_reclaim_reent+0x22>
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d14a      	bne.n	800863c <_reclaim_reent+0xac>
 80085a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085a8:	6819      	ldr	r1, [r3, #0]
 80085aa:	b111      	cbz	r1, 80085b2 <_reclaim_reent+0x22>
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 f857 	bl	8008660 <_free_r>
 80085b2:	6961      	ldr	r1, [r4, #20]
 80085b4:	b111      	cbz	r1, 80085bc <_reclaim_reent+0x2c>
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 f852 	bl	8008660 <_free_r>
 80085bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085be:	b111      	cbz	r1, 80085c6 <_reclaim_reent+0x36>
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 f84d 	bl	8008660 <_free_r>
 80085c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80085c8:	b111      	cbz	r1, 80085d0 <_reclaim_reent+0x40>
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 f848 	bl	8008660 <_free_r>
 80085d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80085d2:	b111      	cbz	r1, 80085da <_reclaim_reent+0x4a>
 80085d4:	4620      	mov	r0, r4
 80085d6:	f000 f843 	bl	8008660 <_free_r>
 80085da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80085dc:	b111      	cbz	r1, 80085e4 <_reclaim_reent+0x54>
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 f83e 	bl	8008660 <_free_r>
 80085e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80085e6:	b111      	cbz	r1, 80085ee <_reclaim_reent+0x5e>
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 f839 	bl	8008660 <_free_r>
 80085ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80085f0:	b111      	cbz	r1, 80085f8 <_reclaim_reent+0x68>
 80085f2:	4620      	mov	r0, r4
 80085f4:	f000 f834 	bl	8008660 <_free_r>
 80085f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085fa:	b111      	cbz	r1, 8008602 <_reclaim_reent+0x72>
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 f82f 	bl	8008660 <_free_r>
 8008602:	69a3      	ldr	r3, [r4, #24]
 8008604:	b1e3      	cbz	r3, 8008640 <_reclaim_reent+0xb0>
 8008606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008608:	4620      	mov	r0, r4
 800860a:	4798      	blx	r3
 800860c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800860e:	b1b9      	cbz	r1, 8008640 <_reclaim_reent+0xb0>
 8008610:	4620      	mov	r0, r4
 8008612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008616:	f7ff bfad 	b.w	8008574 <cleanup_glue>
 800861a:	5949      	ldr	r1, [r1, r5]
 800861c:	b941      	cbnz	r1, 8008630 <_reclaim_reent+0xa0>
 800861e:	3504      	adds	r5, #4
 8008620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008622:	2d80      	cmp	r5, #128	; 0x80
 8008624:	68d9      	ldr	r1, [r3, #12]
 8008626:	d1f8      	bne.n	800861a <_reclaim_reent+0x8a>
 8008628:	4620      	mov	r0, r4
 800862a:	f000 f819 	bl	8008660 <_free_r>
 800862e:	e7ba      	b.n	80085a6 <_reclaim_reent+0x16>
 8008630:	680e      	ldr	r6, [r1, #0]
 8008632:	4620      	mov	r0, r4
 8008634:	f000 f814 	bl	8008660 <_free_r>
 8008638:	4631      	mov	r1, r6
 800863a:	e7ef      	b.n	800861c <_reclaim_reent+0x8c>
 800863c:	2500      	movs	r5, #0
 800863e:	e7ef      	b.n	8008620 <_reclaim_reent+0x90>
 8008640:	bd70      	pop	{r4, r5, r6, pc}
 8008642:	bf00      	nop
 8008644:	20000024 	.word	0x20000024

08008648 <__malloc_lock>:
 8008648:	4801      	ldr	r0, [pc, #4]	; (8008650 <__malloc_lock+0x8>)
 800864a:	f7ff bf7b 	b.w	8008544 <__retarget_lock_acquire_recursive>
 800864e:	bf00      	nop
 8008650:	20004d38 	.word	0x20004d38

08008654 <__malloc_unlock>:
 8008654:	4801      	ldr	r0, [pc, #4]	; (800865c <__malloc_unlock+0x8>)
 8008656:	f7ff bf76 	b.w	8008546 <__retarget_lock_release_recursive>
 800865a:	bf00      	nop
 800865c:	20004d38 	.word	0x20004d38

08008660 <_free_r>:
 8008660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008662:	2900      	cmp	r1, #0
 8008664:	d048      	beq.n	80086f8 <_free_r+0x98>
 8008666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800866a:	9001      	str	r0, [sp, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	f1a1 0404 	sub.w	r4, r1, #4
 8008672:	bfb8      	it	lt
 8008674:	18e4      	addlt	r4, r4, r3
 8008676:	f7ff ffe7 	bl	8008648 <__malloc_lock>
 800867a:	4a20      	ldr	r2, [pc, #128]	; (80086fc <_free_r+0x9c>)
 800867c:	9801      	ldr	r0, [sp, #4]
 800867e:	6813      	ldr	r3, [r2, #0]
 8008680:	4615      	mov	r5, r2
 8008682:	b933      	cbnz	r3, 8008692 <_free_r+0x32>
 8008684:	6063      	str	r3, [r4, #4]
 8008686:	6014      	str	r4, [r2, #0]
 8008688:	b003      	add	sp, #12
 800868a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800868e:	f7ff bfe1 	b.w	8008654 <__malloc_unlock>
 8008692:	42a3      	cmp	r3, r4
 8008694:	d90b      	bls.n	80086ae <_free_r+0x4e>
 8008696:	6821      	ldr	r1, [r4, #0]
 8008698:	1862      	adds	r2, r4, r1
 800869a:	4293      	cmp	r3, r2
 800869c:	bf04      	itt	eq
 800869e:	681a      	ldreq	r2, [r3, #0]
 80086a0:	685b      	ldreq	r3, [r3, #4]
 80086a2:	6063      	str	r3, [r4, #4]
 80086a4:	bf04      	itt	eq
 80086a6:	1852      	addeq	r2, r2, r1
 80086a8:	6022      	streq	r2, [r4, #0]
 80086aa:	602c      	str	r4, [r5, #0]
 80086ac:	e7ec      	b.n	8008688 <_free_r+0x28>
 80086ae:	461a      	mov	r2, r3
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	b10b      	cbz	r3, 80086b8 <_free_r+0x58>
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	d9fa      	bls.n	80086ae <_free_r+0x4e>
 80086b8:	6811      	ldr	r1, [r2, #0]
 80086ba:	1855      	adds	r5, r2, r1
 80086bc:	42a5      	cmp	r5, r4
 80086be:	d10b      	bne.n	80086d8 <_free_r+0x78>
 80086c0:	6824      	ldr	r4, [r4, #0]
 80086c2:	4421      	add	r1, r4
 80086c4:	1854      	adds	r4, r2, r1
 80086c6:	42a3      	cmp	r3, r4
 80086c8:	6011      	str	r1, [r2, #0]
 80086ca:	d1dd      	bne.n	8008688 <_free_r+0x28>
 80086cc:	681c      	ldr	r4, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	6053      	str	r3, [r2, #4]
 80086d2:	4421      	add	r1, r4
 80086d4:	6011      	str	r1, [r2, #0]
 80086d6:	e7d7      	b.n	8008688 <_free_r+0x28>
 80086d8:	d902      	bls.n	80086e0 <_free_r+0x80>
 80086da:	230c      	movs	r3, #12
 80086dc:	6003      	str	r3, [r0, #0]
 80086de:	e7d3      	b.n	8008688 <_free_r+0x28>
 80086e0:	6825      	ldr	r5, [r4, #0]
 80086e2:	1961      	adds	r1, r4, r5
 80086e4:	428b      	cmp	r3, r1
 80086e6:	bf04      	itt	eq
 80086e8:	6819      	ldreq	r1, [r3, #0]
 80086ea:	685b      	ldreq	r3, [r3, #4]
 80086ec:	6063      	str	r3, [r4, #4]
 80086ee:	bf04      	itt	eq
 80086f0:	1949      	addeq	r1, r1, r5
 80086f2:	6021      	streq	r1, [r4, #0]
 80086f4:	6054      	str	r4, [r2, #4]
 80086f6:	e7c7      	b.n	8008688 <_free_r+0x28>
 80086f8:	b003      	add	sp, #12
 80086fa:	bd30      	pop	{r4, r5, pc}
 80086fc:	20004a90 	.word	0x20004a90

08008700 <_init>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	bf00      	nop
 8008704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008706:	bc08      	pop	{r3}
 8008708:	469e      	mov	lr, r3
 800870a:	4770      	bx	lr

0800870c <_fini>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	bf00      	nop
 8008710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008712:	bc08      	pop	{r3}
 8008714:	469e      	mov	lr, r3
 8008716:	4770      	bx	lr
