
Drivetrain_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e80  08006e80  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006e80  08006e80  00016e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e88  08006e88  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004b54  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004bcc  20004bcc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019dbd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003122  00000000  00000000  00039e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  0003cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001258  00000000  00000000  0003e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003955  00000000  00000000  0003f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148db  00000000  00000000  00042ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e43fa  00000000  00000000  000577a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013bb9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005588  00000000  00000000  0013bbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006d70 	.word	0x08006d70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006d70 	.word	0x08006d70

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fcdc 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f878 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f9b8 	bl	8000868 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004f8:	f000 f8e0 	bl	80006bc <MX_SPI1_Init>
  MX_TIM1_Init();
 80004fc:	f000 f914 	bl	8000728 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000500:	2108      	movs	r1, #8
 8000502:	482b      	ldr	r0, [pc, #172]	; (80005b0 <main+0xc8>)
 8000504:	f002 fb32 	bl	8002b6c <HAL_TIM_PWM_Start>
  HAL_Delay(10);
 8000508:	200a      	movs	r0, #10
 800050a:	f000 fd0f 	bl	8000f2c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2110      	movs	r1, #16
 8000512:	4828      	ldr	r0, [pc, #160]	; (80005b4 <main+0xcc>)
 8000514:	f000 ffbc 	bl	8001490 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000518:	200a      	movs	r0, #10
 800051a:	f000 fd07 	bl	8000f2c <HAL_Delay>
  // READ INITIAL ANGLE
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2110      	movs	r1, #16
 8000522:	4824      	ldr	r0, [pc, #144]	; (80005b4 <main+0xcc>)
 8000524:	f000 ffb4 	bl	8001490 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SPI_tx[0], 2, 1);
 8000528:	2301      	movs	r3, #1
 800052a:	2202      	movs	r2, #2
 800052c:	4922      	ldr	r1, [pc, #136]	; (80005b8 <main+0xd0>)
 800052e:	4823      	ldr	r0, [pc, #140]	; (80005bc <main+0xd4>)
 8000530:	f001 fce3 	bl	8001efa <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2110      	movs	r1, #16
 8000538:	481e      	ldr	r0, [pc, #120]	; (80005b4 <main+0xcc>)
 800053a:	f000 ffa9 	bl	8001490 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800053e:	200a      	movs	r0, #10
 8000540:	f000 fcf4 	bl	8000f2c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2110      	movs	r1, #16
 8000548:	481a      	ldr	r0, [pc, #104]	; (80005b4 <main+0xcc>)
 800054a:	f000 ffa1 	bl	8001490 <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&hspi1, &SPI_rx[0], 2, 1);
 800054e:	2301      	movs	r3, #1
 8000550:	2202      	movs	r2, #2
 8000552:	491b      	ldr	r1, [pc, #108]	; (80005c0 <main+0xd8>)
 8000554:	4819      	ldr	r0, [pc, #100]	; (80005bc <main+0xd4>)
 8000556:	f001 fe0c 	bl	8002172 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2110      	movs	r1, #16
 800055e:	4815      	ldr	r0, [pc, #84]	; (80005b4 <main+0xcc>)
 8000560:	f000 ff96 	bl	8001490 <HAL_GPIO_WritePin>
  INITIAL_ANGLE = (SPI_rx[0] << 8 | SPI_rx[1])&clearbits;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <main+0xd8>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	021b      	lsls	r3, r3, #8
 800056a:	b21a      	sxth	r2, r3
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <main+0xd8>)
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	b21b      	sxth	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b21a      	sxth	r2, r3
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <main+0xdc>)
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	b21b      	sxth	r3, r3
 800057c:	4013      	ands	r3, r2
 800057e:	b21b      	sxth	r3, r3
 8000580:	b29a      	uxth	r2, r3
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <main+0xe0>)
 8000584:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000586:	f003 faa9 	bl	8003adc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartEncoder */
  StartEncoderHandle = osThreadNew(ReadEncoder, NULL, &StartEncoder_attributes);
 800058a:	4a10      	ldr	r2, [pc, #64]	; (80005cc <main+0xe4>)
 800058c:	2100      	movs	r1, #0
 800058e:	4810      	ldr	r0, [pc, #64]	; (80005d0 <main+0xe8>)
 8000590:	f003 faee 	bl	8003b70 <osThreadNew>
 8000594:	4603      	mov	r3, r0
 8000596:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <main+0xec>)
 8000598:	6013      	str	r3, [r2, #0]

  /* creation of StartStepper */
  StartStepperHandle = osThreadNew(ControlStepper, NULL, &StartStepper_attributes);
 800059a:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <main+0xf0>)
 800059c:	2100      	movs	r1, #0
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <main+0xf4>)
 80005a0:	f003 fae6 	bl	8003b70 <osThreadNew>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <main+0xf8>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005aa:	f003 fabb 	bl	8003b24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <main+0xc6>
 80005b0:	20004a8c 	.word	0x20004a8c
 80005b4:	40020000 	.word	0x40020000
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20004ad8 	.word	0x20004ad8
 80005c0:	20004a80 	.word	0x20004a80
 80005c4:	20000002 	.word	0x20000002
 80005c8:	20000094 	.word	0x20000094
 80005cc:	08006dc0 	.word	0x08006dc0
 80005d0:	08000955 	.word	0x08000955
 80005d4:	20004ad4 	.word	0x20004ad4
 80005d8:	08006de4 	.word	0x08006de4
 80005dc:	08000a9d 	.word	0x08000a9d
 80005e0:	20004a88 	.word	0x20004a88

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f006 faee 	bl	8006bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <SystemClock_Config+0xd0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd4>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800065c:	2350      	movs	r3, #80	; 0x50
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ff29 	bl	80014c4 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000678:	f000 fa8a 	bl	8000b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f98a 	bl	80019b4 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a6:	f000 fa73 	bl	8000b90 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2218      	movs	r2, #24
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f001 fb6b 	bl	8001de8 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 fa3a 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20004ad8 	.word	0x20004ad8
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b096      	sub	sp, #88	; 0x58
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2220      	movs	r2, #32
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fa37 	bl	8006bd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000766:	4b3e      	ldr	r3, [pc, #248]	; (8000860 <MX_TIM1_Init+0x138>)
 8000768:	4a3e      	ldr	r2, [pc, #248]	; (8000864 <MX_TIM1_Init+0x13c>)
 800076a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800076c:	4b3c      	ldr	r3, [pc, #240]	; (8000860 <MX_TIM1_Init+0x138>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b3b      	ldr	r3, [pc, #236]	; (8000860 <MX_TIM1_Init+0x138>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000778:	4b39      	ldr	r3, [pc, #228]	; (8000860 <MX_TIM1_Init+0x138>)
 800077a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800077e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b37      	ldr	r3, [pc, #220]	; (8000860 <MX_TIM1_Init+0x138>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000786:	4b36      	ldr	r3, [pc, #216]	; (8000860 <MX_TIM1_Init+0x138>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b34      	ldr	r3, [pc, #208]	; (8000860 <MX_TIM1_Init+0x138>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000792:	4833      	ldr	r0, [pc, #204]	; (8000860 <MX_TIM1_Init+0x138>)
 8000794:	f002 f8d0 	bl	8002938 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800079e:	f000 f9f7 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ac:	4619      	mov	r1, r3
 80007ae:	482c      	ldr	r0, [pc, #176]	; (8000860 <MX_TIM1_Init+0x138>)
 80007b0:	f002 fc6e 	bl	8003090 <HAL_TIM_ConfigClockSource>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007ba:	f000 f9e9 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007be:	4828      	ldr	r0, [pc, #160]	; (8000860 <MX_TIM1_Init+0x138>)
 80007c0:	f002 f97a 	bl	8002ab8 <HAL_TIM_PWM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007ca:	f000 f9e1 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007da:	4619      	mov	r1, r3
 80007dc:	4820      	ldr	r0, [pc, #128]	; (8000860 <MX_TIM1_Init+0x138>)
 80007de:	f003 f857 	bl	8003890 <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007e8:	f000 f9d2 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f8:	2300      	movs	r3, #0
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080c:	2208      	movs	r2, #8
 800080e:	4619      	mov	r1, r3
 8000810:	4813      	ldr	r0, [pc, #76]	; (8000860 <MX_TIM1_Init+0x138>)
 8000812:	f002 fb7b 	bl	8002f0c <HAL_TIM_PWM_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800081c:	f000 f9b8 	bl	8000b90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <MX_TIM1_Init+0x138>)
 8000844:	f003 f8a0 	bl	8003988 <HAL_TIMEx_ConfigBreakDeadTime>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800084e:	f000 f99f 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <MX_TIM1_Init+0x138>)
 8000854:	f000 fa38 	bl	8000cc8 <HAL_TIM_MspPostInit>

}
 8000858:	bf00      	nop
 800085a:	3758      	adds	r7, #88	; 0x58
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20004a8c 	.word	0x20004a8c
 8000864:	40010000 	.word	0x40010000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b31      	ldr	r3, [pc, #196]	; (8000948 <MX_GPIO_Init+0xe0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a30      	ldr	r2, [pc, #192]	; (8000948 <MX_GPIO_Init+0xe0>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <MX_GPIO_Init+0xe0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a29      	ldr	r2, [pc, #164]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b27      	ldr	r3, [pc, #156]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a22      	ldr	r2, [pc, #136]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2110      	movs	r1, #16
 80008f2:	4816      	ldr	r0, [pc, #88]	; (800094c <MX_GPIO_Init+0xe4>)
 80008f4:	f000 fdcc 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fe:	4814      	ldr	r0, [pc, #80]	; (8000950 <MX_GPIO_Init+0xe8>)
 8000900:	f000 fdc6 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000904:	2310      	movs	r3, #16
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_GPIO_Init+0xe4>)
 800091c:	f000 fc0c 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_GPIO_Init+0xe8>)
 800093a:	f000 fbfd 	bl	8001138 <HAL_GPIO_Init>

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000
 8000950:	40021400 	.word	0x40021400

08000954 <ReadEncoder>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadEncoder */
void ReadEncoder(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2110      	movs	r1, #16
 8000960:	4840      	ldr	r0, [pc, #256]	; (8000a64 <ReadEncoder+0x110>)
 8000962:	f000 fd95 	bl	8001490 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPI_tx[0], 2, 1);
 8000966:	2301      	movs	r3, #1
 8000968:	2202      	movs	r2, #2
 800096a:	493f      	ldr	r1, [pc, #252]	; (8000a68 <ReadEncoder+0x114>)
 800096c:	483f      	ldr	r0, [pc, #252]	; (8000a6c <ReadEncoder+0x118>)
 800096e:	f001 fac4 	bl	8001efa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2110      	movs	r1, #16
 8000976:	483b      	ldr	r0, [pc, #236]	; (8000a64 <ReadEncoder+0x110>)
 8000978:	f000 fd8a 	bl	8001490 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800097c:	200a      	movs	r0, #10
 800097e:	f000 fad5 	bl	8000f2c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2110      	movs	r1, #16
 8000986:	4837      	ldr	r0, [pc, #220]	; (8000a64 <ReadEncoder+0x110>)
 8000988:	f000 fd82 	bl	8001490 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, &SPI_rx[0], 2, 1);
 800098c:	2301      	movs	r3, #1
 800098e:	2202      	movs	r2, #2
 8000990:	4937      	ldr	r1, [pc, #220]	; (8000a70 <ReadEncoder+0x11c>)
 8000992:	4836      	ldr	r0, [pc, #216]	; (8000a6c <ReadEncoder+0x118>)
 8000994:	f001 fbed 	bl	8002172 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	4831      	ldr	r0, [pc, #196]	; (8000a64 <ReadEncoder+0x110>)
 800099e:	f000 fd77 	bl	8001490 <HAL_GPIO_WritePin>

	ENCODER_ANGLE = (SPI_rx[0] << 8 | SPI_rx[1])&clearbits;
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <ReadEncoder+0x11c>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <ReadEncoder+0x11c>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <ReadEncoder+0x120>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4013      	ands	r3, r2
 80009bc:	b21b      	sxth	r3, r3
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <ReadEncoder+0x124>)
 80009c2:	801a      	strh	r2, [r3, #0]
	ENCODER_ANGLE = (ENCODER_ANGLE - INITIAL_ANGLE)&clearbits;
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <ReadEncoder+0x124>)
 80009c6:	881a      	ldrh	r2, [r3, #0]
 80009c8:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <ReadEncoder+0x128>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	b21a      	sxth	r2, r3
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <ReadEncoder+0x120>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4013      	ands	r3, r2
 80009da:	b21b      	sxth	r3, r3
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <ReadEncoder+0x124>)
 80009e0:	801a      	strh	r2, [r3, #0]
	ANGLE_DEGREE = ENCODER_ANGLE*ConvertToDegree;
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <ReadEncoder+0x124>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	ee07 3a90 	vmov	s15, r3
 80009ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ee:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000a80 <ReadEncoder+0x12c>
 80009f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <ReadEncoder+0x130>)
 80009f8:	edc3 7a00 	vstr	s15, [r3]

	if(ANGLE_DEGREE > 180){
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <ReadEncoder+0x130>)
 80009fe:	edd3 7a00 	vldr	s15, [r3]
 8000a02:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000a88 <ReadEncoder+0x134>
 8000a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0e:	dd09      	ble.n	8000a24 <ReadEncoder+0xd0>
		ANGLE_DEGREE = ANGLE_DEGREE - 360;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <ReadEncoder+0x130>)
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000a8c <ReadEncoder+0x138>
 8000a1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <ReadEncoder+0x130>)
 8000a20:	edc3 7a00 	vstr	s15, [r3]
	}
	ANGLE_ERROR = ANGLE_REF - ANGLE_DEGREE;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <ReadEncoder+0x13c>)
 8000a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a2a:	ee07 3a90 	vmov	s15, r3
 8000a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <ReadEncoder+0x130>)
 8000a34:	edd3 7a00 	vldr	s15, [r3]
 8000a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a40:	ee17 3a90 	vmov	r3, s15
 8000a44:	b21a      	sxth	r2, r3
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <ReadEncoder+0x140>)
 8000a48:	801a      	strh	r2, [r3, #0]
	thread1++;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <ReadEncoder+0x144>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <ReadEncoder+0x144>)
 8000a52:	6013      	str	r3, [r2, #0]
    osThreadFlagsWait(1U,osFlagsWaitAny, osWaitForever);
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f003 f968 	bl	8003d30 <osThreadFlagsWait>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a60:	e77c      	b.n	800095c <ReadEncoder+0x8>
 8000a62:	bf00      	nop
 8000a64:	40020000 	.word	0x40020000
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20004ad8 	.word	0x20004ad8
 8000a70:	20004a80 	.word	0x20004a80
 8000a74:	20000002 	.word	0x20000002
 8000a78:	20000096 	.word	0x20000096
 8000a7c:	20000094 	.word	0x20000094
 8000a80:	3cb402d0 	.word	0x3cb402d0
 8000a84:	20004a7c 	.word	0x20004a7c
 8000a88:	43340000 	.word	0x43340000
 8000a8c:	43b40000 	.word	0x43b40000
 8000a90:	20000098 	.word	0x20000098
 8000a94:	2000009a 	.word	0x2000009a
 8000a98:	2000009c 	.word	0x2000009c

08000a9c <ControlStepper>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlStepper */
void ControlStepper(void *argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlStepper */
  /* Infinite loop */
  for(;;)
  {
	//TODO: Change direction depending on Error sign
	if (ANGLE_ERROR < 0){
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <ControlStepper+0xac>)
 8000aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da09      	bge.n	8000ac2 <ControlStepper+0x26>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab4:	4825      	ldr	r0, [pc, #148]	; (8000b4c <ControlStepper+0xb0>)
 8000ab6:	f000 fceb 	bl	8001490 <HAL_GPIO_WritePin>
		status = 100;
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <ControlStepper+0xb4>)
 8000abc:	2264      	movs	r2, #100	; 0x64
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e008      	b.n	8000ad4 <ControlStepper+0x38>
	}
	else{
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac8:	4820      	ldr	r0, [pc, #128]	; (8000b4c <ControlStepper+0xb0>)
 8000aca:	f000 fce1 	bl	8001490 <HAL_GPIO_WritePin>
		status = 200;
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <ControlStepper+0xb4>)
 8000ad0:	22c8      	movs	r2, #200	; 0xc8
 8000ad2:	601a      	str	r2, [r3, #0]
	}
	ANGLE_ERROR = abs(ANGLE_ERROR);
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <ControlStepper+0xac>)
 8000ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <ControlStepper+0xac>)
 8000ae6:	801a      	strh	r2, [r3, #0]
	//ARR inversely proportional to error
	PWM_PERIOD = 20*65535/(ANGLE_ERROR+1);
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <ControlStepper+0xac>)
 8000aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <ControlStepper+0xb8>)
 8000af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <ControlStepper+0xbc>)
 8000afa:	801a      	strh	r2, [r3, #0]
	PWM_DUTY_CYCLE = PWM_PERIOD/2;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <ControlStepper+0xbc>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <ControlStepper+0xc0>)
 8000b06:	801a      	strh	r2, [r3, #0]
	if(ANGLE_ERROR < 2){
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <ControlStepper+0xac>)
 8000b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	dc02      	bgt.n	8000b18 <ControlStepper+0x7c>
		PWM_DUTY_CYCLE = 0;
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <ControlStepper+0xc0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	801a      	strh	r2, [r3, #0]
		//TODO: CALL THRUST THREAD
	}
	TIM1->ARR  = PWM_PERIOD;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <ControlStepper+0xbc>)
 8000b1a:	881a      	ldrh	r2, [r3, #0]
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <ControlStepper+0xc4>)
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR3 = PWM_DUTY_CYCLE;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <ControlStepper+0xc0>)
 8000b22:	881a      	ldrh	r2, [r3, #0]
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <ControlStepper+0xc4>)
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
//		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
//		HAL_Delay(1);
//	}


	osDelay(500U);
 8000b28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2c:	f003 f981 	bl	8003e32 <osDelay>
	thread2++;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <ControlStepper+0xc8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <ControlStepper+0xc8>)
 8000b38:	6013      	str	r3, [r2, #0]
	osThreadFlagsSet(StartEncoderHandle, 1U);
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <ControlStepper+0xcc>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 f8a7 	bl	8003c94 <osThreadFlagsSet>
	if (ANGLE_ERROR < 0){
 8000b46:	e7ad      	b.n	8000aa4 <ControlStepper+0x8>
 8000b48:	2000009a 	.word	0x2000009a
 8000b4c:	40021400 	.word	0x40021400
 8000b50:	200000a4 	.word	0x200000a4
 8000b54:	0013ffec 	.word	0x0013ffec
 8000b58:	20004a84 	.word	0x20004a84
 8000b5c:	20004a82 	.word	0x20004a82
 8000b60:	40010000 	.word	0x40010000
 8000b64:	200000a0 	.word	0x200000a0
 8000b68:	20004ad4 	.word	0x20004ad4

08000b6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b7e:	f000 f9b5 	bl	8000eec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40001000 	.word	0x40001000

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_MspInit+0x54>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	f06f 0001 	mvn.w	r0, #1
 8000be2:	f000 fa7f 	bl	80010e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_SPI_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12b      	bne.n	8000c6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c4e:	23e0      	movs	r3, #224	; 0xe0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_SPI_MspInit+0x8c>)
 8000c6a:	f000 fa65 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	; 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40013000 	.word	0x40013000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10d      	bne.n	8000cb2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_TIM_Base_MspInit+0x40>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <HAL_TIM_Base_MspInit+0x40>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <HAL_TIM_Base_MspInit+0x40>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <HAL_TIM_MspPostInit+0x68>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d11e      	bne.n	8000d28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_TIM_MspPostInit+0x6c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_TIM_MspPostInit+0x6c>)
 8000cf4:	f043 0310 	orr.w	r3, r3, #16
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_TIM_MspPostInit+0x6c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_TIM_MspPostInit+0x70>)
 8000d24:	f000 fa08 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010000 	.word	0x40010000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	2036      	movs	r0, #54	; 0x36
 8000d52:	f000 f9c7 	bl	80010e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d56:	2036      	movs	r0, #54	; 0x36
 8000d58:	f000 f9e0 	bl	800111c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d78:	f107 0210 	add.w	r2, r7, #16
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fffe 	bl	8001d84 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d88:	f000 ffe8 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_InitTick+0xa8>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	0c9b      	lsrs	r3, r3, #18
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_InitTick+0xac>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <HAL_InitTick+0xb0>)
 8000da4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_InitTick+0xac>)
 8000da8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_InitTick+0xac>)
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_InitTick+0xac>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_InitTick+0xac>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <HAL_InitTick+0xac>)
 8000dc2:	f001 fdb9 	bl	8002938 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d104      	bne.n	8000dd6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <HAL_InitTick+0xac>)
 8000dce:	f001 fe03 	bl	80029d8 <HAL_TIM_Base_Start_IT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3730      	adds	r7, #48	; 0x30
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	431bde83 	.word	0x431bde83
 8000de8:	20004b34 	.word	0x20004b34
 8000dec:	40001000 	.word	0x40001000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM6_DAC_IRQHandler+0x10>)
 8000e22:	f001 ff6b 	bl	8002cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20004b34 	.word	0x20004b34

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0x12>
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopFillZerobss+0x16>)
 8000e5a:	490e      	ldr	r1, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1a>)
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1e>)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:
 8000e62:	58d4      	ldr	r4, [r2, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:
 8000e68:	18c4      	adds	r4, r0, r3
 8000e6a:	428c      	cmp	r4, r1
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopFillZerobss+0x22>)
 8000e70:	4c0b      	ldr	r4, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x26>)
 8000e72:	2300      	movs	r3, #0
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:
 8000e7a:	42a2      	cmp	r2, r4
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>
 8000e7e:	f7ff ffd7 	bl	8000e30 <SystemInit>
 8000e82:	f005 fe73 	bl	8006b6c <__libc_init_array>
 8000e86:	f7ff fb2f 	bl	80004e8 <main>
 8000e8a:	4770      	bx	lr
 8000e8c:	20030000 	.word	0x20030000
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000078 	.word	0x20000078
 8000e98:	08006e90 	.word	0x08006e90
 8000e9c:	20000078 	.word	0x20000078
 8000ea0:	20004bcc 	.word	0x20004bcc

08000ea4 <ADC_IRQHandler>:
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f8fc 	bl	80010ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f7ff ff30 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fe5e 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000000c 	.word	0x2000000c
 8000f10:	20004b7c 	.word	0x20004b7c

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20004b7c 	.word	0x20004b7c

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000000c 	.word	0x2000000c

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff4c 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f6:	f7ff ff61 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 80010fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	68b9      	ldr	r1, [r7, #8]
 8001100:	6978      	ldr	r0, [r7, #20]
 8001102:	f7ff ffb1 	bl	8001068 <NVIC_EncodePriority>
 8001106:	4602      	mov	r2, r0
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff80 	bl	8001014 <__NVIC_SetPriority>
}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff54 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e177      	b.n	8001444 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 8166 	bne.w	800143e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d005      	beq.n	800118a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	2b02      	cmp	r3, #2
 8001188:	d130      	bne.n	80011ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80c0 	beq.w	800143e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <HAL_GPIO_Init+0x324>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a65      	ldr	r2, [pc, #404]	; (800145c <HAL_GPIO_Init+0x324>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b63      	ldr	r3, [pc, #396]	; (800145c <HAL_GPIO_Init+0x324>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012da:	4a61      	ldr	r2, [pc, #388]	; (8001460 <HAL_GPIO_Init+0x328>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a58      	ldr	r2, [pc, #352]	; (8001464 <HAL_GPIO_Init+0x32c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d037      	beq.n	8001376 <HAL_GPIO_Init+0x23e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a57      	ldr	r2, [pc, #348]	; (8001468 <HAL_GPIO_Init+0x330>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d031      	beq.n	8001372 <HAL_GPIO_Init+0x23a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a56      	ldr	r2, [pc, #344]	; (800146c <HAL_GPIO_Init+0x334>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d02b      	beq.n	800136e <HAL_GPIO_Init+0x236>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a55      	ldr	r2, [pc, #340]	; (8001470 <HAL_GPIO_Init+0x338>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d025      	beq.n	800136a <HAL_GPIO_Init+0x232>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a54      	ldr	r2, [pc, #336]	; (8001474 <HAL_GPIO_Init+0x33c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d01f      	beq.n	8001366 <HAL_GPIO_Init+0x22e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a53      	ldr	r2, [pc, #332]	; (8001478 <HAL_GPIO_Init+0x340>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d019      	beq.n	8001362 <HAL_GPIO_Init+0x22a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a52      	ldr	r2, [pc, #328]	; (800147c <HAL_GPIO_Init+0x344>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x226>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a51      	ldr	r2, [pc, #324]	; (8001480 <HAL_GPIO_Init+0x348>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x222>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a50      	ldr	r2, [pc, #320]	; (8001484 <HAL_GPIO_Init+0x34c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x21e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4f      	ldr	r2, [pc, #316]	; (8001488 <HAL_GPIO_Init+0x350>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x21a>
 800134e:	2309      	movs	r3, #9
 8001350:	e012      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001352:	230a      	movs	r3, #10
 8001354:	e010      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001356:	2308      	movs	r3, #8
 8001358:	e00e      	b.n	8001378 <HAL_GPIO_Init+0x240>
 800135a:	2307      	movs	r3, #7
 800135c:	e00c      	b.n	8001378 <HAL_GPIO_Init+0x240>
 800135e:	2306      	movs	r3, #6
 8001360:	e00a      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001362:	2305      	movs	r3, #5
 8001364:	e008      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001366:	2304      	movs	r3, #4
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x240>
 800136a:	2303      	movs	r3, #3
 800136c:	e004      	b.n	8001378 <HAL_GPIO_Init+0x240>
 800136e:	2302      	movs	r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001376:	2300      	movs	r3, #0
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4093      	lsls	r3, r2
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001388:	4935      	ldr	r1, [pc, #212]	; (8001460 <HAL_GPIO_Init+0x328>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001396:	4b3d      	ldr	r3, [pc, #244]	; (800148c <HAL_GPIO_Init+0x354>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ba:	4a34      	ldr	r2, [pc, #208]	; (800148c <HAL_GPIO_Init+0x354>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <HAL_GPIO_Init+0x354>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e4:	4a29      	ldr	r2, [pc, #164]	; (800148c <HAL_GPIO_Init+0x354>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_GPIO_Init+0x354>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800140e:	4a1f      	ldr	r2, [pc, #124]	; (800148c <HAL_GPIO_Init+0x354>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_GPIO_Init+0x354>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <HAL_GPIO_Init+0x354>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3301      	adds	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	f67f ae84 	bls.w	8001154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40013800 	.word	0x40013800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40021400 	.word	0x40021400
 800147c:	40021800 	.word	0x40021800
 8001480:	40021c00 	.word	0x40021c00
 8001484:	40022000 	.word	0x40022000
 8001488:	40022400 	.word	0x40022400
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e264      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d075      	beq.n	80015ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e2:	4ba3      	ldr	r3, [pc, #652]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d00c      	beq.n	8001508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ee:	4ba0      	ldr	r3, [pc, #640]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d112      	bne.n	8001520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fa:	4b9d      	ldr	r3, [pc, #628]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001506:	d10b      	bne.n	8001520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	4b99      	ldr	r3, [pc, #612]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d05b      	beq.n	80015cc <HAL_RCC_OscConfig+0x108>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d157      	bne.n	80015cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e23f      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001528:	d106      	bne.n	8001538 <HAL_RCC_OscConfig+0x74>
 800152a:	4b91      	ldr	r3, [pc, #580]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a90      	ldr	r2, [pc, #576]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e01d      	b.n	8001574 <HAL_RCC_OscConfig+0xb0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x98>
 8001542:	4b8b      	ldr	r3, [pc, #556]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a8a      	ldr	r2, [pc, #552]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b88      	ldr	r3, [pc, #544]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a87      	ldr	r2, [pc, #540]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0xb0>
 800155c:	4b84      	ldr	r3, [pc, #528]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a83      	ldr	r2, [pc, #524]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b81      	ldr	r3, [pc, #516]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a80      	ldr	r2, [pc, #512]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fcca 	bl	8000f14 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fcc6 	bl	8000f14 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e204      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b76      	ldr	r3, [pc, #472]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0xc0>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fcb6 	bl	8000f14 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fcb2 	bl	8000f14 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1f0      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b6c      	ldr	r3, [pc, #432]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0xe8>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d063      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	4b62      	ldr	r3, [pc, #392]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d11c      	bne.n	800162c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f2:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_RCC_OscConfig+0x152>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e1c4      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4952      	ldr	r1, [pc, #328]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	e03a      	b.n	80016a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_RCC_OscConfig+0x2b0>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fc6b 	bl	8000f14 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff fc67 	bl	8000f14 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e1a5      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	4b46      	ldr	r3, [pc, #280]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4940      	ldr	r1, [pc, #256]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <HAL_RCC_OscConfig+0x2b0>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fc4a 	bl	8000f14 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff fc46 	bl	8000f14 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e184      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d030      	beq.n	8001710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d016      	beq.n	80016e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x2b4>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff fc2a 	bl	8000f14 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff fc26 	bl	8000f14 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e164      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x200>
 80016e2:	e015      	b.n	8001710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_OscConfig+0x2b4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fc13 	bl	8000f14 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fc0f 	bl	8000f14 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e14d      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a0 	beq.w	800185e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x2b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d121      	bne.n	800179e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_RCC_OscConfig+0x2b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_RCC_OscConfig+0x2b8>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff fbd5 	bl	8000f14 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	e011      	b.n	8001792 <HAL_RCC_OscConfig+0x2ce>
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	42470000 	.word	0x42470000
 8001778:	42470e80 	.word	0x42470e80
 800177c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001780:	f7ff fbc8 	bl	8000f14 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e106      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b85      	ldr	r3, [pc, #532]	; (80019a8 <HAL_RCC_OscConfig+0x4e4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
 80017a6:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a80      	ldr	r2, [pc, #512]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	e01c      	b.n	80017ee <HAL_RCC_OscConfig+0x32a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d10c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x312>
 80017bc:	4b7b      	ldr	r3, [pc, #492]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a7a      	ldr	r2, [pc, #488]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	4b78      	ldr	r3, [pc, #480]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a77      	ldr	r2, [pc, #476]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
 80017d4:	e00b      	b.n	80017ee <HAL_RCC_OscConfig+0x32a>
 80017d6:	4b75      	ldr	r3, [pc, #468]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017da:	4a74      	ldr	r2, [pc, #464]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6713      	str	r3, [r2, #112]	; 0x70
 80017e2:	4b72      	ldr	r3, [pc, #456]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e6:	4a71      	ldr	r2, [pc, #452]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d015      	beq.n	8001822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff fb8d 	bl	8000f14 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff fb89 	bl	8000f14 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0c5      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001814:	4b65      	ldr	r3, [pc, #404]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ee      	beq.n	80017fe <HAL_RCC_OscConfig+0x33a>
 8001820:	e014      	b.n	800184c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff fb77 	bl	8000f14 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fb73 	bl	8000f14 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0af      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001840:	4b5a      	ldr	r3, [pc, #360]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ee      	bne.n	800182a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d105      	bne.n	800185e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001852:	4b56      	ldr	r3, [pc, #344]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a55      	ldr	r2, [pc, #340]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 8001858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 809b 	beq.w	800199e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d05c      	beq.n	800192e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d141      	bne.n	8001900 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187c:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_RCC_OscConfig+0x4ec>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fb47 	bl	8000f14 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fb43 	bl	8000f14 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e081      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189c:	4b43      	ldr	r3, [pc, #268]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f0      	bne.n	800188a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69da      	ldr	r2, [r3, #28]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	019b      	lsls	r3, r3, #6
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	085b      	lsrs	r3, r3, #1
 80018c0:	3b01      	subs	r3, #1
 80018c2:	041b      	lsls	r3, r3, #16
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	061b      	lsls	r3, r3, #24
 80018cc:	4937      	ldr	r1, [pc, #220]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <HAL_RCC_OscConfig+0x4ec>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fb1c 	bl	8000f14 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff fb18 	bl	8000f14 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e056      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x41c>
 80018fe:	e04e      	b.n	800199e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_OscConfig+0x4ec>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fb05 	bl	8000f14 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff fb01 	bl	8000f14 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e03f      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x44a>
 800192c:	e037      	b.n	800199e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e032      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_RCC_OscConfig+0x4e8>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d028      	beq.n	800199a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d121      	bne.n	800199a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d11a      	bne.n	800199a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800196a:	4013      	ands	r3, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001970:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001972:	4293      	cmp	r3, r2
 8001974:	d111      	bne.n	800199a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	3b01      	subs	r3, #1
 8001984:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d107      	bne.n	800199a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40007000 	.word	0x40007000
 80019ac:	40023800 	.word	0x40023800
 80019b0:	42470060 	.word	0x42470060

080019b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0cc      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4b68      	ldr	r3, [pc, #416]	; (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d90c      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0b8      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a08:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a58      	ldr	r2, [pc, #352]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a20:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a52      	ldr	r2, [pc, #328]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	494d      	ldr	r1, [pc, #308]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d044      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d119      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e07f      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06f      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e067      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a92:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f023 0203 	bic.w	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4934      	ldr	r1, [pc, #208]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa4:	f7ff fa36 	bl	8000f14 <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aac:	f7ff fa32 	bl	8000f14 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e04f      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 020c 	and.w	r2, r3, #12
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d1eb      	bne.n	8001aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d20c      	bcs.n	8001afc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e032      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4916      	ldr	r1, [pc, #88]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b3a:	f000 f821 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	490a      	ldr	r1, [pc, #40]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	5ccb      	ldrb	r3, [r1, r3]
 8001b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1c8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f8ee 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023c00 	.word	0x40023c00
 8001b70:	40023800 	.word	0x40023800
 8001b74:	08006e08 	.word	0x08006e08
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	20000008 	.word	0x20000008

08001b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	2300      	movs	r3, #0
 8001b92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b98:	4b67      	ldr	r3, [pc, #412]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d00d      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	f200 80bd 	bhi.w	8001d24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb2:	e0b7      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bb6:	60bb      	str	r3, [r7, #8]
       break;
 8001bb8:	e0b7      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bba:	4b61      	ldr	r3, [pc, #388]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001bbc:	60bb      	str	r3, [r7, #8]
      break;
 8001bbe:	e0b4      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc0:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bca:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d04d      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd6:	4b58      	ldr	r3, [pc, #352]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	099b      	lsrs	r3, r3, #6
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	ea02 0800 	and.w	r8, r2, r0
 8001bee:	ea03 0901 	and.w	r9, r3, r1
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	4649      	mov	r1, r9
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	014b      	lsls	r3, r1, #5
 8001c00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c04:	0142      	lsls	r2, r0, #5
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	ebb0 0008 	subs.w	r0, r0, r8
 8001c0e:	eb61 0109 	sbc.w	r1, r1, r9
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	018b      	lsls	r3, r1, #6
 8001c1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c20:	0182      	lsls	r2, r0, #6
 8001c22:	1a12      	subs	r2, r2, r0
 8001c24:	eb63 0301 	sbc.w	r3, r3, r1
 8001c28:	f04f 0000 	mov.w	r0, #0
 8001c2c:	f04f 0100 	mov.w	r1, #0
 8001c30:	00d9      	lsls	r1, r3, #3
 8001c32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c36:	00d0      	lsls	r0, r2, #3
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	eb12 0208 	adds.w	r2, r2, r8
 8001c40:	eb43 0309 	adc.w	r3, r3, r9
 8001c44:	f04f 0000 	mov.w	r0, #0
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	0259      	lsls	r1, r3, #9
 8001c4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c52:	0250      	lsls	r0, r2, #9
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	f7fe fac4 	bl	80001f0 <__aeabi_uldivmod>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e04a      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	099b      	lsrs	r3, r3, #6
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	ea02 0400 	and.w	r4, r2, r0
 8001c8a:	ea03 0501 	and.w	r5, r3, r1
 8001c8e:	4620      	mov	r0, r4
 8001c90:	4629      	mov	r1, r5
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	014b      	lsls	r3, r1, #5
 8001c9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ca0:	0142      	lsls	r2, r0, #5
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	1b00      	subs	r0, r0, r4
 8001ca8:	eb61 0105 	sbc.w	r1, r1, r5
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	018b      	lsls	r3, r1, #6
 8001cb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cba:	0182      	lsls	r2, r0, #6
 8001cbc:	1a12      	subs	r2, r2, r0
 8001cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001cc2:	f04f 0000 	mov.w	r0, #0
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	00d9      	lsls	r1, r3, #3
 8001ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cd0:	00d0      	lsls	r0, r2, #3
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	1912      	adds	r2, r2, r4
 8001cd8:	eb45 0303 	adc.w	r3, r5, r3
 8001cdc:	f04f 0000 	mov.w	r0, #0
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	0299      	lsls	r1, r3, #10
 8001ce6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cea:	0290      	lsls	r0, r2, #10
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	f7fe fa78 	bl	80001f0 <__aeabi_uldivmod>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4613      	mov	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	3301      	adds	r3, #1
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	60bb      	str	r3, [r7, #8]
      break;
 8001d22:	e002      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d26:	60bb      	str	r3, [r7, #8]
      break;
 8001d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	00f42400 	.word	0x00f42400
 8001d40:	007a1200 	.word	0x007a1200

08001d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d60:	f7ff fff0 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0a9b      	lsrs	r3, r3, #10
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4903      	ldr	r1, [pc, #12]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08006e18 	.word	0x08006e18

08001d84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	220f      	movs	r2, #15
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_RCC_GetClockConfig+0x60>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 020f 	and.w	r2, r3, #15
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	601a      	str	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40023c00 	.word	0x40023c00

08001de8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e07b      	b.n	8001ef2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d108      	bne.n	8001e14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e0a:	d009      	beq.n	8001e20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
 8001e12:	e005      	b.n	8001e20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe feda 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea4:	ea42 0103 	orr.w	r1, r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	f003 0104 	and.w	r1, r3, #4
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	f003 0210 	and.w	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b088      	sub	sp, #32
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_SPI_Transmit+0x22>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e126      	b.n	800216a <HAL_SPI_Transmit+0x270>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f24:	f7fe fff6 	bl	8000f14 <HAL_GetTick>
 8001f28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d002      	beq.n	8001f40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f3e:	e10b      	b.n	8002158 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_SPI_Transmit+0x52>
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f50:	e102      	b.n	8002158 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2203      	movs	r2, #3
 8001f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	88fa      	ldrh	r2, [r7, #6]
 8001f6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	88fa      	ldrh	r2, [r7, #6]
 8001f70:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f98:	d10f      	bne.n	8001fba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc4:	2b40      	cmp	r3, #64	; 0x40
 8001fc6:	d007      	beq.n	8001fd8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fe0:	d14b      	bne.n	800207a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_SPI_Transmit+0xf6>
 8001fea:	8afb      	ldrh	r3, [r7, #22]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d13e      	bne.n	800206e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	881a      	ldrh	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	1c9a      	adds	r2, r3, #2
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002014:	e02b      	b.n	800206e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b02      	cmp	r3, #2
 8002022:	d112      	bne.n	800204a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	881a      	ldrh	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	1c9a      	adds	r2, r3, #2
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	86da      	strh	r2, [r3, #54]	; 0x36
 8002048:	e011      	b.n	800206e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800204a:	f7fe ff63 	bl	8000f14 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d803      	bhi.n	8002062 <HAL_SPI_Transmit+0x168>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002060:	d102      	bne.n	8002068 <HAL_SPI_Transmit+0x16e>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800206c:	e074      	b.n	8002158 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1ce      	bne.n	8002016 <HAL_SPI_Transmit+0x11c>
 8002078:	e04c      	b.n	8002114 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <HAL_SPI_Transmit+0x18e>
 8002082:	8afb      	ldrh	r3, [r7, #22]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d140      	bne.n	800210a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	330c      	adds	r3, #12
 8002092:	7812      	ldrb	r2, [r2, #0]
 8002094:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020ae:	e02c      	b.n	800210a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d113      	bne.n	80020e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	330c      	adds	r3, #12
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80020e4:	e011      	b.n	800210a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020e6:	f7fe ff15 	bl	8000f14 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d803      	bhi.n	80020fe <HAL_SPI_Transmit+0x204>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020fc:	d102      	bne.n	8002104 <HAL_SPI_Transmit+0x20a>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002108:	e026      	b.n	8002158 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1cd      	bne.n	80020b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fbcb 	bl	80028b4 <SPI_EndRxTxTransaction>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10a      	bne.n	8002148 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]
 8002154:	e000      	b.n	8002158 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002156:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002168:	7ffb      	ldrb	r3, [r7, #31]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b088      	sub	sp, #32
 8002176:	af02      	add	r7, sp, #8
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800218e:	d112      	bne.n	80021b6 <HAL_SPI_Receive+0x44>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10e      	bne.n	80021b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2204      	movs	r2, #4
 800219c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f8f1 	bl	8002394 <HAL_SPI_TransmitReceive>
 80021b2:	4603      	mov	r3, r0
 80021b4:	e0ea      	b.n	800238c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_SPI_Receive+0x52>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0e3      	b.n	800238c <HAL_SPI_Receive+0x21a>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021cc:	f7fe fea2 	bl	8000f14 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021e2:	e0ca      	b.n	800237a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_Receive+0x7e>
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021f4:	e0c1      	b.n	800237a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2204      	movs	r2, #4
 80021fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800223c:	d10f      	bne.n	800225e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800224c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d007      	beq.n	800227c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800227a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d162      	bne.n	800234a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002284:	e02e      	b.n	80022e4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d115      	bne.n	80022c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f103 020c 	add.w	r2, r3, #12
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022be:	e011      	b.n	80022e4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022c0:	f7fe fe28 	bl	8000f14 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d803      	bhi.n	80022d8 <HAL_SPI_Receive+0x166>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022d6:	d102      	bne.n	80022de <HAL_SPI_Receive+0x16c>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022e2:	e04a      	b.n	800237a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1cb      	bne.n	8002286 <HAL_SPI_Receive+0x114>
 80022ee:	e031      	b.n	8002354 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d113      	bne.n	8002326 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	b292      	uxth	r2, r2
 800230a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	1c9a      	adds	r2, r3, #2
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002324:	e011      	b.n	800234a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002326:	f7fe fdf5 	bl	8000f14 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d803      	bhi.n	800233e <HAL_SPI_Receive+0x1cc>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800233c:	d102      	bne.n	8002344 <HAL_SPI_Receive+0x1d2>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002348:	e017      	b.n	800237a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1cd      	bne.n	80022f0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	6839      	ldr	r1, [r7, #0]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fa45 	bl	80027e8 <SPI_EndRxTransaction>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
 8002376:	e000      	b.n	800237a <HAL_SPI_Receive+0x208>
  }

error :
 8002378:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800238a:	7dfb      	ldrb	r3, [r7, #23]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023a2:	2301      	movs	r3, #1
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x26>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e18a      	b.n	80026d0 <HAL_SPI_TransmitReceive+0x33c>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023c2:	f7fe fda7 	bl	8000f14 <HAL_GetTick>
 80023c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023d8:	887b      	ldrh	r3, [r7, #2]
 80023da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d00f      	beq.n	8002404 <HAL_SPI_TransmitReceive+0x70>
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ea:	d107      	bne.n	80023fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d103      	bne.n	80023fc <HAL_SPI_TransmitReceive+0x68>
 80023f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d003      	beq.n	8002404 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
 80023fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002402:	e15b      	b.n	80026bc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x82>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x82>
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800241c:	e14e      	b.n	80026bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b04      	cmp	r3, #4
 8002428:	d003      	beq.n	8002432 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2205      	movs	r2, #5
 800242e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	887a      	ldrh	r2, [r7, #2]
 8002442:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	887a      	ldrh	r2, [r7, #2]
 800245a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d007      	beq.n	8002486 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800248e:	d178      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_SPI_TransmitReceive+0x10a>
 8002498:	8b7b      	ldrh	r3, [r7, #26]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d166      	bne.n	800256c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	1c9a      	adds	r2, r3, #2
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c2:	e053      	b.n	800256c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d11b      	bne.n	800250a <HAL_SPI_TransmitReceive+0x176>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d016      	beq.n	800250a <HAL_SPI_TransmitReceive+0x176>
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d113      	bne.n	800250a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	881a      	ldrh	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	1c9a      	adds	r2, r3, #2
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d119      	bne.n	800254c <HAL_SPI_TransmitReceive+0x1b8>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d014      	beq.n	800254c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	b292      	uxth	r2, r2
 800252e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	1c9a      	adds	r2, r3, #2
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002548:	2301      	movs	r3, #1
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800254c:	f7fe fce2 	bl	8000f14 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002558:	429a      	cmp	r2, r3
 800255a:	d807      	bhi.n	800256c <HAL_SPI_TransmitReceive+0x1d8>
 800255c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002562:	d003      	beq.n	800256c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800256a:	e0a7      	b.n	80026bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1a6      	bne.n	80024c4 <HAL_SPI_TransmitReceive+0x130>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1a1      	bne.n	80024c4 <HAL_SPI_TransmitReceive+0x130>
 8002580:	e07c      	b.n	800267c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_SPI_TransmitReceive+0x1fc>
 800258a:	8b7b      	ldrh	r3, [r7, #26]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d16b      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	330c      	adds	r3, #12
 800259a:	7812      	ldrb	r2, [r2, #0]
 800259c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b6:	e057      	b.n	8002668 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d11c      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x26c>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d017      	beq.n	8002600 <HAL_SPI_TransmitReceive+0x26c>
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d114      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d119      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x2ae>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d014      	beq.n	8002642 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800263e:	2301      	movs	r3, #1
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002642:	f7fe fc67 	bl	8000f14 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800264e:	429a      	cmp	r2, r3
 8002650:	d803      	bhi.n	800265a <HAL_SPI_TransmitReceive+0x2c6>
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002658:	d102      	bne.n	8002660 <HAL_SPI_TransmitReceive+0x2cc>
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002666:	e029      	b.n	80026bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1a2      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x224>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d19d      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800267c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f917 	bl	80028b4 <SPI_EndRxTxTransaction>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002698:	e010      	b.n	80026bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10b      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	e000      	b.n	80026bc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3730      	adds	r7, #48	; 0x30
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026e8:	f7fe fc14 	bl	8000f14 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026f8:	f7fe fc0c 	bl	8000f14 <HAL_GetTick>
 80026fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026fe:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	015b      	lsls	r3, r3, #5
 8002704:	0d1b      	lsrs	r3, r3, #20
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	fb02 f303 	mul.w	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800270e:	e054      	b.n	80027ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002716:	d050      	beq.n	80027ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002718:	f7fe fbfc 	bl	8000f14 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	429a      	cmp	r2, r3
 8002726:	d902      	bls.n	800272e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d13d      	bne.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800273c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002746:	d111      	bne.n	800276c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002750:	d004      	beq.n	800275c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275a:	d107      	bne.n	800276c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002774:	d10f      	bne.n	8002796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e017      	b.n	80027da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4013      	ands	r3, r2
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	bf0c      	ite	eq
 80027ca:	2301      	moveq	r3, #1
 80027cc:	2300      	movne	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d19b      	bne.n	8002710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000004 	.word	0x20000004

080027e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027fc:	d111      	bne.n	8002822 <SPI_EndRxTransaction+0x3a>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002806:	d004      	beq.n	8002812 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002810:	d107      	bne.n	8002822 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800282a:	d12a      	bne.n	8002882 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002834:	d012      	beq.n	800285c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7ff ff49 	bl	80026d8 <SPI_WaitFlagStateUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d02d      	beq.n	80028a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002850:	f043 0220 	orr.w	r2, r3, #32
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e026      	b.n	80028aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2200      	movs	r2, #0
 8002864:	2101      	movs	r1, #1
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f7ff ff36 	bl	80026d8 <SPI_WaitFlagStateUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01a      	beq.n	80028a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f043 0220 	orr.w	r2, r3, #32
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e013      	b.n	80028aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2200      	movs	r2, #0
 800288a:	2101      	movs	r1, #1
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff ff23 	bl	80026d8 <SPI_WaitFlagStateUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e000      	b.n	80028aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <SPI_EndRxTxTransaction+0x7c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <SPI_EndRxTxTransaction+0x80>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0d5b      	lsrs	r3, r3, #21
 80028cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028de:	d112      	bne.n	8002906 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff fef4 	bl	80026d8 <SPI_WaitFlagStateUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f043 0220 	orr.w	r2, r3, #32
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e00f      	b.n	8002926 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3b01      	subs	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b80      	cmp	r3, #128	; 0x80
 800291e:	d0f2      	beq.n	8002906 <SPI_EndRxTxTransaction+0x52>
 8002920:	e000      	b.n	8002924 <SPI_EndRxTxTransaction+0x70>
        break;
 8002922:	bf00      	nop
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000004 	.word	0x20000004
 8002934:	165e9f81 	.word	0x165e9f81

08002938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e041      	b.n	80029ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe f990 	bl	8000c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f000 fc7a 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04e      	b.n	8002a8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d022      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d01d      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d018      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00e      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_TIM_Base_Start_IT+0xd4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d111      	bne.n	8002a7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d010      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	e007      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40010400 	.word	0x40010400
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40001800 	.word	0x40001800

08002ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e041      	b.n	8002b4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f839 	bl	8002b56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f000 fbba 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_TIM_PWM_Start+0x24>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	e022      	b.n	8002bd6 <HAL_TIM_PWM_Start+0x6a>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d109      	bne.n	8002baa <HAL_TIM_PWM_Start+0x3e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	e015      	b.n	8002bd6 <HAL_TIM_PWM_Start+0x6a>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d109      	bne.n	8002bc4 <HAL_TIM_PWM_Start+0x58>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e008      	b.n	8002bd6 <HAL_TIM_PWM_Start+0x6a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e07c      	b.n	8002cd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d104      	bne.n	8002bee <HAL_TIM_PWM_Start+0x82>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bec:	e013      	b.n	8002c16 <HAL_TIM_PWM_Start+0xaa>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d104      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x92>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bfc:	e00b      	b.n	8002c16 <HAL_TIM_PWM_Start+0xaa>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_PWM_Start+0xa2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c0c:	e003      	b.n	8002c16 <HAL_TIM_PWM_Start+0xaa>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	6839      	ldr	r1, [r7, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fe10 	bl	8003844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2d      	ldr	r2, [pc, #180]	; (8002ce0 <HAL_TIM_PWM_Start+0x174>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_TIM_PWM_Start+0xcc>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a2c      	ldr	r2, [pc, #176]	; (8002ce4 <HAL_TIM_PWM_Start+0x178>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_TIM_PWM_Start+0xd0>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_TIM_PWM_Start+0xd2>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <HAL_TIM_PWM_Start+0x174>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x136>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d01d      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x136>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ce8 <HAL_TIM_PWM_Start+0x17c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d018      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x136>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_TIM_PWM_Start+0x180>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x136>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <HAL_TIM_PWM_Start+0x184>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x136>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_TIM_PWM_Start+0x178>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x136>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_TIM_PWM_Start+0x188>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x136>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <HAL_TIM_PWM_Start+0x18c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d111      	bne.n	8002cc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d010      	beq.n	8002cd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	e007      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40010400 	.word	0x40010400
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	40000800 	.word	0x40000800
 8002cf0:	40000c00 	.word	0x40000c00
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40001800 	.word	0x40001800

08002cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d122      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d11b      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0202 	mvn.w	r2, #2
 8002d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa77 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa69 	bl	800321e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fa7a 	bl	8003246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d122      	bne.n	8002dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d11b      	bne.n	8002dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0204 	mvn.w	r2, #4
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa4d 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa3f 	bl	800321e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fa50 	bl	8003246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d122      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d11b      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0208 	mvn.w	r2, #8
 8002dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa23 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 8002dec:	e005      	b.n	8002dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa15 	bl	800321e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fa26 	bl	8003246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d122      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d11b      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0210 	mvn.w	r2, #16
 8002e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2208      	movs	r2, #8
 8002e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9f9 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9eb 	bl	800321e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f9fc 	bl	8003246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10e      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0201 	mvn.w	r2, #1
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fe76 	bl	8000b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e98:	2b80      	cmp	r3, #128	; 0x80
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fdca 	bl	8003a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	d107      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f9c1 	bl	800325a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d107      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0220 	mvn.w	r2, #32
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fd94 	bl	8003a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0ae      	b.n	8003088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	f200 809f 	bhi.w	8003078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f3a:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f40:	08002f75 	.word	0x08002f75
 8002f44:	08003079 	.word	0x08003079
 8002f48:	08003079 	.word	0x08003079
 8002f4c:	08003079 	.word	0x08003079
 8002f50:	08002fb5 	.word	0x08002fb5
 8002f54:	08003079 	.word	0x08003079
 8002f58:	08003079 	.word	0x08003079
 8002f5c:	08003079 	.word	0x08003079
 8002f60:	08002ff7 	.word	0x08002ff7
 8002f64:	08003079 	.word	0x08003079
 8002f68:	08003079 	.word	0x08003079
 8002f6c:	08003079 	.word	0x08003079
 8002f70:	08003037 	.word	0x08003037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fa18 	bl	80033b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0204 	bic.w	r2, r2, #4
 8002f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6999      	ldr	r1, [r3, #24]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	619a      	str	r2, [r3, #24]
      break;
 8002fb2:	e064      	b.n	800307e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fa68 	bl	8003490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6999      	ldr	r1, [r3, #24]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	021a      	lsls	r2, r3, #8
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	619a      	str	r2, [r3, #24]
      break;
 8002ff4:	e043      	b.n	800307e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fabd 	bl	800357c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69da      	ldr	r2, [r3, #28]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0208 	orr.w	r2, r2, #8
 8003010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0204 	bic.w	r2, r2, #4
 8003020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69d9      	ldr	r1, [r3, #28]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	61da      	str	r2, [r3, #28]
      break;
 8003034:	e023      	b.n	800307e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fb11 	bl	8003664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69d9      	ldr	r1, [r3, #28]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	021a      	lsls	r2, r3, #8
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	61da      	str	r2, [r3, #28]
      break;
 8003076:	e002      	b.n	800307e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
      break;
 800307c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_TIM_ConfigClockSource+0x1c>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e0b4      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x186>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e4:	d03e      	beq.n	8003164 <HAL_TIM_ConfigClockSource+0xd4>
 80030e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ea:	f200 8087 	bhi.w	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 80030ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f2:	f000 8086 	beq.w	8003202 <HAL_TIM_ConfigClockSource+0x172>
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fa:	d87f      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b70      	cmp	r3, #112	; 0x70
 80030fe:	d01a      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0xa6>
 8003100:	2b70      	cmp	r3, #112	; 0x70
 8003102:	d87b      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b60      	cmp	r3, #96	; 0x60
 8003106:	d050      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x11a>
 8003108:	2b60      	cmp	r3, #96	; 0x60
 800310a:	d877      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b50      	cmp	r3, #80	; 0x50
 800310e:	d03c      	beq.n	800318a <HAL_TIM_ConfigClockSource+0xfa>
 8003110:	2b50      	cmp	r3, #80	; 0x50
 8003112:	d873      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b40      	cmp	r3, #64	; 0x40
 8003116:	d058      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x13a>
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d86f      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b30      	cmp	r3, #48	; 0x30
 800311e:	d064      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x15a>
 8003120:	2b30      	cmp	r3, #48	; 0x30
 8003122:	d86b      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b20      	cmp	r3, #32
 8003126:	d060      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x15a>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d867      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05c      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x15a>
 8003130:	2b10      	cmp	r3, #16
 8003132:	d05a      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x15a>
 8003134:	e062      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6899      	ldr	r1, [r3, #8]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f000 fb5d 	bl	8003804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	609a      	str	r2, [r3, #8]
      break;
 8003162:	e04f      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6899      	ldr	r1, [r3, #8]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f000 fb46 	bl	8003804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003186:	609a      	str	r2, [r3, #8]
      break;
 8003188:	e03c      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	461a      	mov	r2, r3
 8003198:	f000 faba 	bl	8003710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2150      	movs	r1, #80	; 0x50
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fb13 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 80031a8:	e02c      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f000 fad9 	bl	800376e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2160      	movs	r1, #96	; 0x60
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fb03 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 80031c8:	e01c      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	461a      	mov	r2, r3
 80031d8:	f000 fa9a 	bl	8003710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 faf3 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 80031e8:	e00c      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f000 faea 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 80031fa:	e003      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003200:	e000      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a40      	ldr	r2, [pc, #256]	; (8003384 <TIM_Base_SetConfig+0x114>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328e:	d00f      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3d      	ldr	r2, [pc, #244]	; (8003388 <TIM_Base_SetConfig+0x118>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00b      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3c      	ldr	r2, [pc, #240]	; (800338c <TIM_Base_SetConfig+0x11c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3b      	ldr	r2, [pc, #236]	; (8003390 <TIM_Base_SetConfig+0x120>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3a      	ldr	r2, [pc, #232]	; (8003394 <TIM_Base_SetConfig+0x124>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d108      	bne.n	80032c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2f      	ldr	r2, [pc, #188]	; (8003384 <TIM_Base_SetConfig+0x114>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d02b      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d027      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2c      	ldr	r2, [pc, #176]	; (8003388 <TIM_Base_SetConfig+0x118>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d023      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2b      	ldr	r2, [pc, #172]	; (800338c <TIM_Base_SetConfig+0x11c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01f      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2a      	ldr	r2, [pc, #168]	; (8003390 <TIM_Base_SetConfig+0x120>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01b      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a29      	ldr	r2, [pc, #164]	; (8003394 <TIM_Base_SetConfig+0x124>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d017      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a28      	ldr	r2, [pc, #160]	; (8003398 <TIM_Base_SetConfig+0x128>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a27      	ldr	r2, [pc, #156]	; (800339c <TIM_Base_SetConfig+0x12c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00f      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <TIM_Base_SetConfig+0x130>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00b      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <TIM_Base_SetConfig+0x134>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d007      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a24      	ldr	r2, [pc, #144]	; (80033a8 <TIM_Base_SetConfig+0x138>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a23      	ldr	r2, [pc, #140]	; (80033ac <TIM_Base_SetConfig+0x13c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d108      	bne.n	8003334 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <TIM_Base_SetConfig+0x114>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_Base_SetConfig+0xf8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <TIM_Base_SetConfig+0x124>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d103      	bne.n	8003370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	615a      	str	r2, [r3, #20]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40010400 	.word	0x40010400
 8003398:	40014000 	.word	0x40014000
 800339c:	40014400 	.word	0x40014400
 80033a0:	40014800 	.word	0x40014800
 80033a4:	40001800 	.word	0x40001800
 80033a8:	40001c00 	.word	0x40001c00
 80033ac:	40002000 	.word	0x40002000

080033b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0201 	bic.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 0302 	bic.w	r3, r3, #2
 80033f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a20      	ldr	r2, [pc, #128]	; (8003488 <TIM_OC1_SetConfig+0xd8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <TIM_OC1_SetConfig+0x64>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a1f      	ldr	r2, [pc, #124]	; (800348c <TIM_OC1_SetConfig+0xdc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10c      	bne.n	800342e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0308 	bic.w	r3, r3, #8
 800341a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a15      	ldr	r2, [pc, #84]	; (8003488 <TIM_OC1_SetConfig+0xd8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_OC1_SetConfig+0x8e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a14      	ldr	r2, [pc, #80]	; (800348c <TIM_OC1_SetConfig+0xdc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	621a      	str	r2, [r3, #32]
}
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40010000 	.word	0x40010000
 800348c:	40010400 	.word	0x40010400

08003490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0210 	bic.w	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0320 	bic.w	r3, r3, #32
 80034da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a22      	ldr	r2, [pc, #136]	; (8003574 <TIM_OC2_SetConfig+0xe4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_OC2_SetConfig+0x68>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a21      	ldr	r2, [pc, #132]	; (8003578 <TIM_OC2_SetConfig+0xe8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d10d      	bne.n	8003514 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a17      	ldr	r2, [pc, #92]	; (8003574 <TIM_OC2_SetConfig+0xe4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_OC2_SetConfig+0x94>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a16      	ldr	r2, [pc, #88]	; (8003578 <TIM_OC2_SetConfig+0xe8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d113      	bne.n	800354c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800352a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	621a      	str	r2, [r3, #32]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000
 8003578:	40010400 	.word	0x40010400

0800357c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a21      	ldr	r2, [pc, #132]	; (800365c <TIM_OC3_SetConfig+0xe0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_OC3_SetConfig+0x66>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a20      	ldr	r2, [pc, #128]	; (8003660 <TIM_OC3_SetConfig+0xe4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d10d      	bne.n	80035fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a16      	ldr	r2, [pc, #88]	; (800365c <TIM_OC3_SetConfig+0xe0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <TIM_OC3_SetConfig+0x92>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a15      	ldr	r2, [pc, #84]	; (8003660 <TIM_OC3_SetConfig+0xe4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d113      	bne.n	8003636 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800361c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	621a      	str	r2, [r3, #32]
}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40010000 	.word	0x40010000
 8003660:	40010400 	.word	0x40010400

08003664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	031b      	lsls	r3, r3, #12
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <TIM_OC4_SetConfig+0xa4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_OC4_SetConfig+0x68>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a11      	ldr	r2, [pc, #68]	; (800370c <TIM_OC4_SetConfig+0xa8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d109      	bne.n	80036e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	019b      	lsls	r3, r3, #6
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40010000 	.word	0x40010000
 800370c:	40010400 	.word	0x40010400

08003710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f023 0201 	bic.w	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 030a 	bic.w	r3, r3, #10
 800374c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376e:	b480      	push	{r7}
 8003770:	b087      	sub	sp, #28
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f023 0210 	bic.w	r2, r3, #16
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	031b      	lsls	r3, r3, #12
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f043 0307 	orr.w	r3, r3, #7
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	609a      	str	r2, [r3, #8]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800381e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	431a      	orrs	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2201      	movs	r2, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1a      	ldr	r2, [r3, #32]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	431a      	orrs	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e05a      	b.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a21      	ldr	r2, [pc, #132]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d022      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f4:	d01d      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a18      	ldr	r2, [pc, #96]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a17      	ldr	r2, [pc, #92]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a15      	ldr	r2, [pc, #84]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10c      	bne.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40010400 	.word	0x40010400
 8003980:	40014000 	.word	0x40014000
 8003984:	40001800 	.word	0x40001800

08003988 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e03d      	b.n	8003a20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <__NVIC_SetPriority>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	db0a      	blt.n	8003a7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	490c      	ldr	r1, [pc, #48]	; (8003aa0 <__NVIC_SetPriority+0x4c>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	0112      	lsls	r2, r2, #4
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	440b      	add	r3, r1
 8003a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a7c:	e00a      	b.n	8003a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4908      	ldr	r1, [pc, #32]	; (8003aa4 <__NVIC_SetPriority+0x50>)
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	3b04      	subs	r3, #4
 8003a8c:	0112      	lsls	r2, r2, #4
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	440b      	add	r3, r1
 8003a92:	761a      	strb	r2, [r3, #24]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000e100 	.word	0xe000e100
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <SysTick_Handler+0x1c>)
 8003aae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ab0:	f001 fdf6 	bl	80056a0 <xTaskGetSchedulerState>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003aba:	f002 fddd 	bl	8006678 <xPortSysTickHandler>
  }
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	e000e010 	.word	0xe000e010

08003ac8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003acc:	2100      	movs	r1, #0
 8003ace:	f06f 0004 	mvn.w	r0, #4
 8003ad2:	f7ff ffbf 	bl	8003a54 <__NVIC_SetPriority>
#endif
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae2:	f3ef 8305 	mrs	r3, IPSR
 8003ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003aee:	f06f 0305 	mvn.w	r3, #5
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	e00c      	b.n	8003b10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <osKernelInitialize+0x44>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <osKernelInitialize+0x44>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	607b      	str	r3, [r7, #4]
 8003b08:	e002      	b.n	8003b10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b10:	687b      	ldr	r3, [r7, #4]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	200000a8 	.word	0x200000a8

08003b24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b2a:	f3ef 8305 	mrs	r3, IPSR
 8003b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b36:	f06f 0305 	mvn.w	r3, #5
 8003b3a:	607b      	str	r3, [r7, #4]
 8003b3c:	e010      	b.n	8003b60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <osKernelStart+0x48>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d109      	bne.n	8003b5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b46:	f7ff ffbf 	bl	8003ac8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <osKernelStart+0x48>)
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b50:	f001 f94a 	bl	8004de8 <vTaskStartScheduler>
      stat = osOK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	e002      	b.n	8003b60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b60:	687b      	ldr	r3, [r7, #4]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200000a8 	.word	0x200000a8

08003b70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08e      	sub	sp, #56	; 0x38
 8003b74:	af04      	add	r7, sp, #16
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b80:	f3ef 8305 	mrs	r3, IPSR
 8003b84:	617b      	str	r3, [r7, #20]
  return(result);
 8003b86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d17e      	bne.n	8003c8a <osThreadNew+0x11a>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d07b      	beq.n	8003c8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b96:	2318      	movs	r3, #24
 8003b98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d045      	beq.n	8003c36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <osThreadNew+0x48>
        name = attr->name;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <osThreadNew+0x6e>
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b38      	cmp	r3, #56	; 0x38
 8003bd0:	d805      	bhi.n	8003bde <osThreadNew+0x6e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <osThreadNew+0x72>
        return (NULL);
 8003bde:	2300      	movs	r3, #0
 8003be0:	e054      	b.n	8003c8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00e      	beq.n	8003c18 <osThreadNew+0xa8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2bbb      	cmp	r3, #187	; 0xbb
 8003c00:	d90a      	bls.n	8003c18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d006      	beq.n	8003c18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <osThreadNew+0xa8>
        mem = 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e010      	b.n	8003c3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10c      	bne.n	8003c3a <osThreadNew+0xca>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d108      	bne.n	8003c3a <osThreadNew+0xca>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <osThreadNew+0xca>
          mem = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	e001      	b.n	8003c3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d110      	bne.n	8003c62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c48:	9202      	str	r2, [sp, #8]
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6a3a      	ldr	r2, [r7, #32]
 8003c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 feda 	bl	8004a10 <xTaskCreateStatic>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	e013      	b.n	8003c8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d110      	bne.n	8003c8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	f107 0310 	add.w	r3, r7, #16
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 ff25 	bl	8004aca <xTaskCreate>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d001      	beq.n	8003c8a <osThreadNew+0x11a>
            hTask = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c8a:	693b      	ldr	r3, [r7, #16]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3728      	adds	r7, #40	; 0x28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <osThreadFlagsSet+0x1a>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da03      	bge.n	8003cb6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8003cae:	f06f 0303 	mvn.w	r3, #3
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e035      	b.n	8003d22 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cbc:	f3ef 8305 	mrs	r3, IPSR
 8003cc0:	613b      	str	r3, [r7, #16]
  return(result);
 8003cc2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01f      	beq.n	8003d08 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003ccc:	f107 0308 	add.w	r3, r7, #8
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	6839      	ldr	r1, [r7, #0]
 8003cd8:	6978      	ldr	r0, [r7, #20]
 8003cda:	f001 fe8b 	bl	80059f4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8003cde:	f107 030c 	add.w	r3, r7, #12
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	9200      	str	r2, [sp, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2100      	movs	r1, #0
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f001 fe82 	bl	80059f4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d015      	beq.n	8003d22 <osThreadFlagsSet+0x8e>
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <osThreadFlagsSet+0x98>)
 8003cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	e00c      	b.n	8003d22 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	6839      	ldr	r1, [r7, #0]
 8003d0e:	6978      	ldr	r0, [r7, #20]
 8003d10:	f001 fdb2 	bl	8005878 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	6978      	ldr	r0, [r7, #20]
 8003d1e:	f001 fdab 	bl	8005878 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	; 0x30
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d3c:	f3ef 8305 	mrs	r3, IPSR
 8003d40:	617b      	str	r3, [r7, #20]
  return(result);
 8003d42:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8003d48:	f06f 0305 	mvn.w	r3, #5
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4e:	e06b      	b.n	8003e28 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da03      	bge.n	8003d5e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8003d56:	f06f 0303 	mvn.w	r3, #3
 8003d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5c:	e064      	b.n	8003e28 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6c:	e001      	b.n	8003d72 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8003d7a:	f001 f951 	bl	8005020 <xTaskGetTickCount>
 8003d7e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8003d80:	f107 0210 	add.w	r2, r7, #16
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f001 fd15 	bl	80057b8 <xTaskNotifyWait>
 8003d8e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d137      	bne.n	8003e06 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8003d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da2:	4313      	orrs	r3, r2
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00c      	beq.n	8003dca <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	4013      	ands	r3, r2
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d032      	beq.n	8003e22 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10f      	bne.n	8003de2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003dc2:	f06f 0302 	mvn.w	r3, #2
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003dc8:	e02e      	b.n	8003e28 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d128      	bne.n	8003e26 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003dda:	f06f 0302 	mvn.w	r3, #2
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003de0:	e022      	b.n	8003e28 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8003de2:	f001 f91d 	bl	8005020 <xTaskGetTickCount>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d902      	bls.n	8003dfc <osThreadFlagsWait+0xcc>
          tout  = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	e00e      	b.n	8003e1a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
 8003e04:	e009      	b.n	8003e1a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8003e0c:	f06f 0302 	mvn.w	r3, #2
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e12:	e002      	b.n	8003e1a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003e14:	f06f 0301 	mvn.w	r3, #1
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1af      	bne.n	8003d80 <osThreadFlagsWait+0x50>
 8003e20:	e002      	b.n	8003e28 <osThreadFlagsWait+0xf8>
            break;
 8003e22:	bf00      	nop
 8003e24:	e000      	b.n	8003e28 <osThreadFlagsWait+0xf8>
            break;
 8003e26:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3730      	adds	r7, #48	; 0x30
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e3a:	f3ef 8305 	mrs	r3, IPSR
 8003e3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <osDelay+0x1c>
    stat = osErrorISR;
 8003e46:	f06f 0305 	mvn.w	r3, #5
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e007      	b.n	8003e5e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 ff91 	bl	8004d80 <vTaskDelay>
    }
  }

  return (stat);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4a06      	ldr	r2, [pc, #24]	; (8003e98 <vApplicationGetIdleTaskMemory+0x30>)
 8003e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	601a      	str	r2, [r3, #0]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	200000ac 	.word	0x200000ac
 8003e98:	20000168 	.word	0x20000168

08003e9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003eac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4a06      	ldr	r2, [pc, #24]	; (8003ecc <vApplicationGetTimerTaskMemory+0x30>)
 8003eb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eba:	601a      	str	r2, [r3, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	20000368 	.word	0x20000368
 8003ecc:	20000424 	.word	0x20000424

08003ed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f103 0208 	add.w	r2, r3, #8
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f103 0208 	add.w	r2, r3, #8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f103 0208 	add.w	r2, r3, #8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b085      	sub	sp, #20
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	601a      	str	r2, [r3, #0]
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f88:	d103      	bne.n	8003f92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e00c      	b.n	8003fac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3308      	adds	r3, #8
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e002      	b.n	8003fa0 <vListInsert+0x2e>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d2f6      	bcs.n	8003f9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	601a      	str	r2, [r3, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6892      	ldr	r2, [r2, #8]
 8003ffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6852      	ldr	r2, [r2, #4]
 8004004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	429a      	cmp	r2, r3
 800400e:	d103      	bne.n	8004018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	1e5a      	subs	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004062:	f002 fa77 	bl	8006554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	68f9      	ldr	r1, [r7, #12]
 8004070:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	441a      	add	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	3b01      	subs	r3, #1
 8004094:	68f9      	ldr	r1, [r7, #12]
 8004096:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	441a      	add	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	22ff      	movs	r2, #255	; 0xff
 80040a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	22ff      	movs	r2, #255	; 0xff
 80040ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d114      	bne.n	80040e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01a      	beq.n	80040f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3310      	adds	r3, #16
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 f929 	bl	800531c <xTaskRemoveFromEventList>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d012      	beq.n	80040f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <xQueueGenericReset+0xcc>)
 80040d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	e009      	b.n	80040f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3310      	adds	r3, #16
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fef2 	bl	8003ed0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3324      	adds	r3, #36	; 0x24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff feed 	bl	8003ed0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040f6:	f002 fa5d 	bl	80065b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08e      	sub	sp, #56	; 0x38
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <xQueueGenericCreateStatic+0x52>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <xQueueGenericCreateStatic+0x56>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <xQueueGenericCreateStatic+0x58>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	623b      	str	r3, [r7, #32]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <xQueueGenericCreateStatic+0x7e>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <xQueueGenericCreateStatic+0x82>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <xQueueGenericCreateStatic+0x84>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	61fb      	str	r3, [r7, #28]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041a6:	2350      	movs	r3, #80	; 0x50
 80041a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b50      	cmp	r3, #80	; 0x50
 80041ae:	d00a      	beq.n	80041c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	61bb      	str	r3, [r7, #24]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00d      	beq.n	80041ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f805 	bl	80041f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3730      	adds	r7, #48	; 0x30
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d103      	bne.n	8004214 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e002      	b.n	800421a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004226:	2101      	movs	r1, #1
 8004228:	69b8      	ldr	r0, [r7, #24]
 800422a:	f7ff ff05 	bl	8004038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08e      	sub	sp, #56	; 0x38
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800424e:	2300      	movs	r3, #0
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <xQueueGenericSend+0x32>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d103      	bne.n	8004280 <xQueueGenericSend+0x40>
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <xQueueGenericSend+0x44>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <xQueueGenericSend+0x46>
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <xQueueGenericSend+0x60>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800429c:	bf00      	nop
 800429e:	e7fe      	b.n	800429e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d103      	bne.n	80042ae <xQueueGenericSend+0x6e>
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <xQueueGenericSend+0x72>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <xQueueGenericSend+0x74>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <xQueueGenericSend+0x8e>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	623b      	str	r3, [r7, #32]
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ce:	f001 f9e7 	bl	80056a0 <xTaskGetSchedulerState>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <xQueueGenericSend+0x9e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <xQueueGenericSend+0xa2>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <xQueueGenericSend+0xa4>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <xQueueGenericSend+0xbe>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	61fb      	str	r3, [r7, #28]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042fe:	f002 f929 	bl	8006554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <xQueueGenericSend+0xd4>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d129      	bne.n	8004368 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431a:	f000 fa0b 	bl	8004734 <prvCopyDataToQueue>
 800431e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d010      	beq.n	800434a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	3324      	adds	r3, #36	; 0x24
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fff5 	bl	800531c <xTaskRemoveFromEventList>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004338:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <xQueueGenericSend+0x1f8>)
 800433a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	e00a      	b.n	8004360 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004350:	4b39      	ldr	r3, [pc, #228]	; (8004438 <xQueueGenericSend+0x1f8>)
 8004352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004360:	f002 f928 	bl	80065b4 <vPortExitCritical>
				return pdPASS;
 8004364:	2301      	movs	r3, #1
 8004366:	e063      	b.n	8004430 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800436e:	f002 f921 	bl	80065b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004372:	2300      	movs	r3, #0
 8004374:	e05c      	b.n	8004430 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	4618      	mov	r0, r3
 8004382:	f001 f82f 	bl	80053e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800438a:	f002 f913 	bl	80065b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800438e:	f000 fd9b 	bl	8004ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004392:	f002 f8df 	bl	8006554 <vPortEnterCritical>
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800439c:	b25b      	sxtb	r3, r3
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a2:	d103      	bne.n	80043ac <xQueueGenericSend+0x16c>
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b2:	b25b      	sxtb	r3, r3
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b8:	d103      	bne.n	80043c2 <xQueueGenericSend+0x182>
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c2:	f002 f8f7 	bl	80065b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043c6:	1d3a      	adds	r2, r7, #4
 80043c8:	f107 0314 	add.w	r3, r7, #20
 80043cc:	4611      	mov	r1, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f81e 	bl	8005410 <xTaskCheckForTimeOut>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d124      	bne.n	8004424 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043dc:	f000 faa2 	bl	8004924 <prvIsQueueFull>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d018      	beq.n	8004418 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	3310      	adds	r3, #16
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 ff44 	bl	800527c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f6:	f000 fa2d 	bl	8004854 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043fa:	f000 fd73 	bl	8004ee4 <xTaskResumeAll>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	f47f af7c 	bne.w	80042fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004406:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <xQueueGenericSend+0x1f8>)
 8004408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	e772      	b.n	80042fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800441a:	f000 fa1b 	bl	8004854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800441e:	f000 fd61 	bl	8004ee4 <xTaskResumeAll>
 8004422:	e76c      	b.n	80042fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004426:	f000 fa15 	bl	8004854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800442a:	f000 fd5b 	bl	8004ee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800442e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004430:	4618      	mov	r0, r3
 8004432:	3738      	adds	r7, #56	; 0x38
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	e000ed04 	.word	0xe000ed04

0800443c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b090      	sub	sp, #64	; 0x40
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d103      	bne.n	8004478 <xQueueGenericSendFromISR+0x3c>
 8004470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <xQueueGenericSendFromISR+0x40>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <xQueueGenericSendFromISR+0x42>
 800447c:	2300      	movs	r3, #0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d103      	bne.n	80044a6 <xQueueGenericSendFromISR+0x6a>
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <xQueueGenericSendFromISR+0x6e>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <xQueueGenericSendFromISR+0x70>
 80044aa:	2300      	movs	r3, #0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	623b      	str	r3, [r7, #32]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044c6:	f002 f927 	bl	8006718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044ca:	f3ef 8211 	mrs	r2, BASEPRI
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	61fa      	str	r2, [r7, #28]
 80044e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <xQueueGenericSendFromISR+0xbc>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d12f      	bne.n	8004558 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800450e:	f000 f911 	bl	8004734 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004512:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800451a:	d112      	bne.n	8004542 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d016      	beq.n	8004552 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004526:	3324      	adds	r3, #36	; 0x24
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fef7 	bl	800531c <xTaskRemoveFromEventList>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00e      	beq.n	8004552 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e007      	b.n	8004552 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004546:	3301      	adds	r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	b25a      	sxtb	r2, r3
 800454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004552:	2301      	movs	r3, #1
 8004554:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004556:	e001      	b.n	800455c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004558:	2300      	movs	r3, #0
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004566:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800456a:	4618      	mov	r0, r3
 800456c:	3740      	adds	r7, #64	; 0x40
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08c      	sub	sp, #48	; 0x30
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <xQueueReceive+0x30>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	623b      	str	r3, [r7, #32]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <xQueueReceive+0x3e>
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <xQueueReceive+0x42>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <xQueueReceive+0x44>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xQueueReceive+0x5e>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	61fb      	str	r3, [r7, #28]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045d2:	f001 f865 	bl	80056a0 <xTaskGetSchedulerState>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <xQueueReceive+0x6e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <xQueueReceive+0x72>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <xQueueReceive+0x74>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <xQueueReceive+0x8e>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	61bb      	str	r3, [r7, #24]
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004602:	f001 ffa7 	bl	8006554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01f      	beq.n	8004652 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004616:	f000 f8f7 	bl	8004808 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004620:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00f      	beq.n	800464a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	3310      	adds	r3, #16
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fe74 	bl	800531c <xTaskRemoveFromEventList>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800463a:	4b3d      	ldr	r3, [pc, #244]	; (8004730 <xQueueReceive+0x1bc>)
 800463c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800464a:	f001 ffb3 	bl	80065b4 <vPortExitCritical>
				return pdPASS;
 800464e:	2301      	movs	r3, #1
 8004650:	e069      	b.n	8004726 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d103      	bne.n	8004660 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004658:	f001 ffac 	bl	80065b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800465c:	2300      	movs	r3, #0
 800465e:	e062      	b.n	8004726 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004666:	f107 0310 	add.w	r3, r7, #16
 800466a:	4618      	mov	r0, r3
 800466c:	f000 feba 	bl	80053e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004674:	f001 ff9e 	bl	80065b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004678:	f000 fc26 	bl	8004ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800467c:	f001 ff6a 	bl	8006554 <vPortEnterCritical>
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004686:	b25b      	sxtb	r3, r3
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800468c:	d103      	bne.n	8004696 <xQueueReceive+0x122>
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800469c:	b25b      	sxtb	r3, r3
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a2:	d103      	bne.n	80046ac <xQueueReceive+0x138>
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ac:	f001 ff82 	bl	80065b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046b0:	1d3a      	adds	r2, r7, #4
 80046b2:	f107 0310 	add.w	r3, r7, #16
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fea9 	bl	8005410 <xTaskCheckForTimeOut>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d123      	bne.n	800470c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c6:	f000 f917 	bl	80048f8 <prvIsQueueEmpty>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d017      	beq.n	8004700 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	3324      	adds	r3, #36	; 0x24
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fdcf 	bl	800527c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e0:	f000 f8b8 	bl	8004854 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046e4:	f000 fbfe 	bl	8004ee4 <xTaskResumeAll>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d189      	bne.n	8004602 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <xQueueReceive+0x1bc>)
 80046f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	e780      	b.n	8004602 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004702:	f000 f8a7 	bl	8004854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004706:	f000 fbed 	bl	8004ee4 <xTaskResumeAll>
 800470a:	e77a      	b.n	8004602 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800470c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800470e:	f000 f8a1 	bl	8004854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004712:	f000 fbe7 	bl	8004ee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004718:	f000 f8ee 	bl	80048f8 <prvIsQueueEmpty>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	f43f af6f 	beq.w	8004602 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004724:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004726:	4618      	mov	r0, r3
 8004728:	3730      	adds	r7, #48	; 0x30
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10d      	bne.n	800476e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d14d      	bne.n	80047f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 ffbc 	bl	80056dc <xTaskPriorityDisinherit>
 8004764:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	e043      	b.n	80047f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d119      	bne.n	80047a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6858      	ldr	r0, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	461a      	mov	r2, r3
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	f002 fa1a 	bl	8006bb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	441a      	add	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	429a      	cmp	r2, r3
 800479c:	d32b      	bcc.n	80047f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	e026      	b.n	80047f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68d8      	ldr	r0, [r3, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	461a      	mov	r2, r3
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	f002 fa00 	bl	8006bb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	425b      	negs	r3, r3
 80047c2:	441a      	add	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d207      	bcs.n	80047e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	425b      	negs	r3, r3
 80047de:	441a      	add	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d105      	bne.n	80047f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047fe:	697b      	ldr	r3, [r7, #20]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d018      	beq.n	800484c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	441a      	add	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	429a      	cmp	r2, r3
 8004832:	d303      	bcc.n	800483c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68d9      	ldr	r1, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	461a      	mov	r2, r3
 8004846:	6838      	ldr	r0, [r7, #0]
 8004848:	f002 f9b6 	bl	8006bb8 <memcpy>
	}
}
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800485c:	f001 fe7a 	bl	8006554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004866:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004868:	e011      	b.n	800488e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d012      	beq.n	8004898 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3324      	adds	r3, #36	; 0x24
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fd50 	bl	800531c <xTaskRemoveFromEventList>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004882:	f000 fe27 	bl	80054d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	3b01      	subs	r3, #1
 800488a:	b2db      	uxtb	r3, r3
 800488c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800488e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	dce9      	bgt.n	800486a <prvUnlockQueue+0x16>
 8004896:	e000      	b.n	800489a <prvUnlockQueue+0x46>
					break;
 8004898:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	22ff      	movs	r2, #255	; 0xff
 800489e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048a2:	f001 fe87 	bl	80065b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048a6:	f001 fe55 	bl	8006554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048b2:	e011      	b.n	80048d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d012      	beq.n	80048e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3310      	adds	r3, #16
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fd2b 	bl	800531c <xTaskRemoveFromEventList>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048cc:	f000 fe02 	bl	80054d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048d0:	7bbb      	ldrb	r3, [r7, #14]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	dce9      	bgt.n	80048b4 <prvUnlockQueue+0x60>
 80048e0:	e000      	b.n	80048e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	22ff      	movs	r2, #255	; 0xff
 80048e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048ec:	f001 fe62 	bl	80065b4 <vPortExitCritical>
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004900:	f001 fe28 	bl	8006554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800490c:	2301      	movs	r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	e001      	b.n	8004916 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004916:	f001 fe4d 	bl	80065b4 <vPortExitCritical>

	return xReturn;
 800491a:	68fb      	ldr	r3, [r7, #12]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800492c:	f001 fe12 	bl	8006554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004938:	429a      	cmp	r2, r3
 800493a:	d102      	bne.n	8004942 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e001      	b.n	8004946 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004946:	f001 fe35 	bl	80065b4 <vPortExitCritical>

	return xReturn;
 800494a:	68fb      	ldr	r3, [r7, #12]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	e014      	b.n	800498e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004964:	4a0f      	ldr	r2, [pc, #60]	; (80049a4 <vQueueAddToRegistry+0x50>)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10b      	bne.n	8004988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004970:	490c      	ldr	r1, [pc, #48]	; (80049a4 <vQueueAddToRegistry+0x50>)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800497a:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <vQueueAddToRegistry+0x50>)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4413      	add	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004986:	e006      	b.n	8004996 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b07      	cmp	r3, #7
 8004992:	d9e7      	bls.n	8004964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20004b80 	.word	0x20004b80

080049a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049b8:	f001 fdcc 	bl	8006554 <vPortEnterCritical>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049c2:	b25b      	sxtb	r3, r3
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c8:	d103      	bne.n	80049d2 <vQueueWaitForMessageRestricted+0x2a>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049d8:	b25b      	sxtb	r3, r3
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049de:	d103      	bne.n	80049e8 <vQueueWaitForMessageRestricted+0x40>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e8:	f001 fde4 	bl	80065b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	3324      	adds	r3, #36	; 0x24
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fc61 	bl	80052c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	f7ff ff26 	bl	8004854 <prvUnlockQueue>
	}
 8004a08:	bf00      	nop
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08e      	sub	sp, #56	; 0x38
 8004a14:	af04      	add	r7, sp, #16
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	623b      	str	r3, [r7, #32]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61fb      	str	r3, [r7, #28]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a56:	23bc      	movs	r3, #188	; 0xbc
 8004a58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2bbc      	cmp	r3, #188	; 0xbc
 8004a5e:	d00a      	beq.n	8004a76 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	61bb      	str	r3, [r7, #24]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01e      	beq.n	8004abc <xTaskCreateStatic+0xac>
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01b      	beq.n	8004abc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	2202      	movs	r2, #2
 8004a92:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a96:	2300      	movs	r3, #0
 8004a98:	9303      	str	r3, [sp, #12]
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	9302      	str	r3, [sp, #8]
 8004a9e:	f107 0314 	add.w	r3, r7, #20
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f850 	bl	8004b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ab6:	f000 f8f3 	bl	8004ca0 <prvAddNewTaskToReadyList>
 8004aba:	e001      	b.n	8004ac0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ac0:	697b      	ldr	r3, [r7, #20]
	}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3728      	adds	r7, #40	; 0x28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b08c      	sub	sp, #48	; 0x30
 8004ace:	af04      	add	r7, sp, #16
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 fe5a 	bl	8006798 <pvPortMalloc>
 8004ae4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00e      	beq.n	8004b0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004aec:	20bc      	movs	r0, #188	; 0xbc
 8004aee:	f001 fe53 	bl	8006798 <pvPortMalloc>
 8004af2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
 8004b00:	e005      	b.n	8004b0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b02:	6978      	ldr	r0, [r7, #20]
 8004b04:	f001 ff14 	bl	8006930 <vPortFree>
 8004b08:	e001      	b.n	8004b0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d017      	beq.n	8004b44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b1c:	88fa      	ldrh	r2, [r7, #6]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	9303      	str	r3, [sp, #12]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	9302      	str	r3, [sp, #8]
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f80e 	bl	8004b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b38:	69f8      	ldr	r0, [r7, #28]
 8004b3a:	f000 f8b1 	bl	8004ca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	e002      	b.n	8004b4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3720      	adds	r7, #32
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	21a5      	movs	r1, #165	; 0xa5
 8004b6e:	f002 f831 	bl	8006bd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f023 0307 	bic.w	r3, r3, #7
 8004b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <prvInitialiseNewTask+0x58>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	617b      	str	r3, [r7, #20]
}
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01f      	beq.n	8004bf2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	e012      	b.n	8004bde <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	7819      	ldrb	r1, [r3, #0]
 8004bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3334      	adds	r3, #52	; 0x34
 8004bc8:	460a      	mov	r2, r1
 8004bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d006      	beq.n	8004be6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2b0f      	cmp	r3, #15
 8004be2:	d9e9      	bls.n	8004bb8 <prvInitialiseNewTask+0x64>
 8004be4:	e000      	b.n	8004be8 <prvInitialiseNewTask+0x94>
			{
				break;
 8004be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bf0:	e003      	b.n	8004bfa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	2b37      	cmp	r3, #55	; 0x37
 8004bfe:	d901      	bls.n	8004c04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c00:	2337      	movs	r3, #55	; 0x37
 8004c02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	2200      	movs	r2, #0
 8004c14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff f978 	bl	8003f10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	3318      	adds	r3, #24
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff f973 	bl	8003f10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	3354      	adds	r3, #84	; 0x54
 8004c54:	2260      	movs	r2, #96	; 0x60
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 ffbb 	bl	8006bd4 <memset>
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <prvInitialiseNewTask+0x140>)
 8004c62:	659a      	str	r2, [r3, #88]	; 0x58
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <prvInitialiseNewTask+0x144>)
 8004c68:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <prvInitialiseNewTask+0x148>)
 8004c6e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	69b8      	ldr	r0, [r7, #24]
 8004c76:	f001 fb43 	bl	8006300 <pxPortInitialiseStack>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c8c:	bf00      	nop
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	08006e40 	.word	0x08006e40
 8004c98:	08006e60 	.word	0x08006e60
 8004c9c:	08006e20 	.word	0x08006e20

08004ca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ca8:	f001 fc54 	bl	8006554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cac:	4b2d      	ldr	r3, [pc, #180]	; (8004d64 <prvAddNewTaskToReadyList+0xc4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	4a2c      	ldr	r2, [pc, #176]	; (8004d64 <prvAddNewTaskToReadyList+0xc4>)
 8004cb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <prvAddNewTaskToReadyList+0xc8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cbe:	4a2a      	ldr	r2, [pc, #168]	; (8004d68 <prvAddNewTaskToReadyList+0xc8>)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <prvAddNewTaskToReadyList+0xc4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d110      	bne.n	8004cee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ccc:	f000 fc26 	bl	800551c <prvInitialiseTaskLists>
 8004cd0:	e00d      	b.n	8004cee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cd2:	4b26      	ldr	r3, [pc, #152]	; (8004d6c <prvAddNewTaskToReadyList+0xcc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cda:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <prvAddNewTaskToReadyList+0xc8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d802      	bhi.n	8004cee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ce8:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <prvAddNewTaskToReadyList+0xc8>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <prvAddNewTaskToReadyList+0xd0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <prvAddNewTaskToReadyList+0xd0>)
 8004cf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <prvAddNewTaskToReadyList+0xd0>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <prvAddNewTaskToReadyList+0xd4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d903      	bls.n	8004d14 <prvAddNewTaskToReadyList+0x74>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <prvAddNewTaskToReadyList+0xd4>)
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <prvAddNewTaskToReadyList+0xd8>)
 8004d22:	441a      	add	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f7ff f8fd 	bl	8003f2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d30:	f001 fc40 	bl	80065b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d34:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <prvAddNewTaskToReadyList+0xcc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00e      	beq.n	8004d5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <prvAddNewTaskToReadyList+0xc8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d207      	bcs.n	8004d5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d4a:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <prvAddNewTaskToReadyList+0xdc>)
 8004d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000cf8 	.word	0x20000cf8
 8004d68:	20000824 	.word	0x20000824
 8004d6c:	20000d04 	.word	0x20000d04
 8004d70:	20000d14 	.word	0x20000d14
 8004d74:	20000d00 	.word	0x20000d00
 8004d78:	20000828 	.word	0x20000828
 8004d7c:	e000ed04 	.word	0xe000ed04

08004d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d017      	beq.n	8004dc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d92:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <vTaskDelay+0x60>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <vTaskDelay+0x30>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	60bb      	str	r3, [r7, #8]
}
 8004dac:	bf00      	nop
 8004dae:	e7fe      	b.n	8004dae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004db0:	f000 f88a 	bl	8004ec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004db4:	2100      	movs	r1, #0
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 ff00 	bl	8005bbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dbc:	f000 f892 	bl	8004ee4 <xTaskResumeAll>
 8004dc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d107      	bne.n	8004dd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <vTaskDelay+0x64>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000d20 	.word	0x20000d20
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004df6:	463a      	mov	r2, r7
 8004df8:	1d39      	adds	r1, r7, #4
 8004dfa:	f107 0308 	add.w	r3, r7, #8
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff f832 	bl	8003e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	9202      	str	r2, [sp, #8]
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	2300      	movs	r3, #0
 8004e14:	460a      	mov	r2, r1
 8004e16:	4924      	ldr	r1, [pc, #144]	; (8004ea8 <vTaskStartScheduler+0xc0>)
 8004e18:	4824      	ldr	r0, [pc, #144]	; (8004eac <vTaskStartScheduler+0xc4>)
 8004e1a:	f7ff fdf9 	bl	8004a10 <xTaskCreateStatic>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <vTaskStartScheduler+0xc8>)
 8004e22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e24:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <vTaskStartScheduler+0xc8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	e001      	b.n	8004e36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d102      	bne.n	8004e42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e3c:	f000 ff12 	bl	8005c64 <xTimerCreateTimerTask>
 8004e40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d11b      	bne.n	8004e80 <vTaskStartScheduler+0x98>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	613b      	str	r3, [r7, #16]
}
 8004e5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <vTaskStartScheduler+0xcc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3354      	adds	r3, #84	; 0x54
 8004e62:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <vTaskStartScheduler+0xd0>)
 8004e64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <vTaskStartScheduler+0xd4>)
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e6e:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <vTaskStartScheduler+0xd8>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e74:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <vTaskStartScheduler+0xdc>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e7a:	f001 fac9 	bl	8006410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e7e:	e00e      	b.n	8004e9e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e86:	d10a      	bne.n	8004e9e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	60fb      	str	r3, [r7, #12]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <vTaskStartScheduler+0xb4>
}
 8004e9e:	bf00      	nop
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08006da8 	.word	0x08006da8
 8004eac:	080054ed 	.word	0x080054ed
 8004eb0:	20000d1c 	.word	0x20000d1c
 8004eb4:	20000824 	.word	0x20000824
 8004eb8:	20000014 	.word	0x20000014
 8004ebc:	20000d18 	.word	0x20000d18
 8004ec0:	20000d04 	.word	0x20000d04
 8004ec4:	20000cfc 	.word	0x20000cfc

08004ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <vTaskSuspendAll+0x18>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	4a03      	ldr	r2, [pc, #12]	; (8004ee0 <vTaskSuspendAll+0x18>)
 8004ed4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ed6:	bf00      	nop
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	20000d20 	.word	0x20000d20

08004ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ef2:	4b42      	ldr	r3, [pc, #264]	; (8004ffc <xTaskResumeAll+0x118>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <xTaskResumeAll+0x2c>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	603b      	str	r3, [r7, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f10:	f001 fb20 	bl	8006554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f14:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <xTaskResumeAll+0x118>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	4a38      	ldr	r2, [pc, #224]	; (8004ffc <xTaskResumeAll+0x118>)
 8004f1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1e:	4b37      	ldr	r3, [pc, #220]	; (8004ffc <xTaskResumeAll+0x118>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d162      	bne.n	8004fec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f26:	4b36      	ldr	r3, [pc, #216]	; (8005000 <xTaskResumeAll+0x11c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d05e      	beq.n	8004fec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f2e:	e02f      	b.n	8004f90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f30:	4b34      	ldr	r3, [pc, #208]	; (8005004 <xTaskResumeAll+0x120>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3318      	adds	r3, #24
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff f851 	bl	8003fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff f84c 	bl	8003fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	4b2d      	ldr	r3, [pc, #180]	; (8005008 <xTaskResumeAll+0x124>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d903      	bls.n	8004f60 <xTaskResumeAll+0x7c>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	; (8005008 <xTaskResumeAll+0x124>)
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4a27      	ldr	r2, [pc, #156]	; (800500c <xTaskResumeAll+0x128>)
 8004f6e:	441a      	add	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3304      	adds	r3, #4
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f7fe ffd7 	bl	8003f2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f80:	4b23      	ldr	r3, [pc, #140]	; (8005010 <xTaskResumeAll+0x12c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d302      	bcc.n	8004f90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f8a:	4b22      	ldr	r3, [pc, #136]	; (8005014 <xTaskResumeAll+0x130>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f90:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <xTaskResumeAll+0x120>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1cb      	bne.n	8004f30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f9e:	f000 fb5f 	bl	8005660 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fa2:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <xTaskResumeAll+0x134>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fae:	f000 f847 	bl	8005040 <xTaskIncrementTick>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004fb8:	4b16      	ldr	r3, [pc, #88]	; (8005014 <xTaskResumeAll+0x130>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f1      	bne.n	8004fae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <xTaskResumeAll+0x134>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fd0:	4b10      	ldr	r3, [pc, #64]	; (8005014 <xTaskResumeAll+0x130>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fdc:	4b0f      	ldr	r3, [pc, #60]	; (800501c <xTaskResumeAll+0x138>)
 8004fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fec:	f001 fae2 	bl	80065b4 <vPortExitCritical>

	return xAlreadyYielded;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000d20 	.word	0x20000d20
 8005000:	20000cf8 	.word	0x20000cf8
 8005004:	20000cb8 	.word	0x20000cb8
 8005008:	20000d00 	.word	0x20000d00
 800500c:	20000828 	.word	0x20000828
 8005010:	20000824 	.word	0x20000824
 8005014:	20000d0c 	.word	0x20000d0c
 8005018:	20000d08 	.word	0x20000d08
 800501c:	e000ed04 	.word	0xe000ed04

08005020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <xTaskGetTickCount+0x1c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800502c:	687b      	ldr	r3, [r7, #4]
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	20000cfc 	.word	0x20000cfc

08005040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800504a:	4b4f      	ldr	r3, [pc, #316]	; (8005188 <xTaskIncrementTick+0x148>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 808f 	bne.w	8005172 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005054:	4b4d      	ldr	r3, [pc, #308]	; (800518c <xTaskIncrementTick+0x14c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800505c:	4a4b      	ldr	r2, [pc, #300]	; (800518c <xTaskIncrementTick+0x14c>)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d120      	bne.n	80050aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005068:	4b49      	ldr	r3, [pc, #292]	; (8005190 <xTaskIncrementTick+0x150>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <xTaskIncrementTick+0x48>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	603b      	str	r3, [r7, #0]
}
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <xTaskIncrementTick+0x46>
 8005088:	4b41      	ldr	r3, [pc, #260]	; (8005190 <xTaskIncrementTick+0x150>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	4b41      	ldr	r3, [pc, #260]	; (8005194 <xTaskIncrementTick+0x154>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a3f      	ldr	r2, [pc, #252]	; (8005190 <xTaskIncrementTick+0x150>)
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	4a3f      	ldr	r2, [pc, #252]	; (8005194 <xTaskIncrementTick+0x154>)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4b3e      	ldr	r3, [pc, #248]	; (8005198 <xTaskIncrementTick+0x158>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	4a3d      	ldr	r2, [pc, #244]	; (8005198 <xTaskIncrementTick+0x158>)
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	f000 fadb 	bl	8005660 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050aa:	4b3c      	ldr	r3, [pc, #240]	; (800519c <xTaskIncrementTick+0x15c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d349      	bcc.n	8005148 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050b4:	4b36      	ldr	r3, [pc, #216]	; (8005190 <xTaskIncrementTick+0x150>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050be:	4b37      	ldr	r3, [pc, #220]	; (800519c <xTaskIncrementTick+0x15c>)
 80050c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c4:	601a      	str	r2, [r3, #0]
					break;
 80050c6:	e03f      	b.n	8005148 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c8:	4b31      	ldr	r3, [pc, #196]	; (8005190 <xTaskIncrementTick+0x150>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d203      	bcs.n	80050e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050e0:	4a2e      	ldr	r2, [pc, #184]	; (800519c <xTaskIncrementTick+0x15c>)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050e6:	e02f      	b.n	8005148 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe ff79 	bl	8003fe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d004      	beq.n	8005104 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	3318      	adds	r3, #24
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe ff70 	bl	8003fe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <xTaskIncrementTick+0x160>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d903      	bls.n	8005118 <xTaskIncrementTick+0xd8>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	4a22      	ldr	r2, [pc, #136]	; (80051a0 <xTaskIncrementTick+0x160>)
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <xTaskIncrementTick+0x164>)
 8005126:	441a      	add	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f7fe fefb 	bl	8003f2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005138:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <xTaskIncrementTick+0x168>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	429a      	cmp	r2, r3
 8005140:	d3b8      	bcc.n	80050b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005142:	2301      	movs	r3, #1
 8005144:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005146:	e7b5      	b.n	80050b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005148:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <xTaskIncrementTick+0x168>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514e:	4915      	ldr	r1, [pc, #84]	; (80051a4 <xTaskIncrementTick+0x164>)
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d901      	bls.n	8005164 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005164:	4b11      	ldr	r3, [pc, #68]	; (80051ac <xTaskIncrementTick+0x16c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800516c:	2301      	movs	r3, #1
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	e004      	b.n	800517c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005172:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <xTaskIncrementTick+0x170>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3301      	adds	r3, #1
 8005178:	4a0d      	ldr	r2, [pc, #52]	; (80051b0 <xTaskIncrementTick+0x170>)
 800517a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800517c:	697b      	ldr	r3, [r7, #20]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000d20 	.word	0x20000d20
 800518c:	20000cfc 	.word	0x20000cfc
 8005190:	20000cb0 	.word	0x20000cb0
 8005194:	20000cb4 	.word	0x20000cb4
 8005198:	20000d10 	.word	0x20000d10
 800519c:	20000d18 	.word	0x20000d18
 80051a0:	20000d00 	.word	0x20000d00
 80051a4:	20000828 	.word	0x20000828
 80051a8:	20000824 	.word	0x20000824
 80051ac:	20000d0c 	.word	0x20000d0c
 80051b0:	20000d08 	.word	0x20000d08

080051b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051ba:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <vTaskSwitchContext+0xb0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051c2:	4b29      	ldr	r3, [pc, #164]	; (8005268 <vTaskSwitchContext+0xb4>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051c8:	e046      	b.n	8005258 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80051ca:	4b27      	ldr	r3, [pc, #156]	; (8005268 <vTaskSwitchContext+0xb4>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d0:	4b26      	ldr	r3, [pc, #152]	; (800526c <vTaskSwitchContext+0xb8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e010      	b.n	80051fa <vTaskSwitchContext+0x46>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	607b      	str	r3, [r7, #4]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <vTaskSwitchContext+0x3e>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	491d      	ldr	r1, [pc, #116]	; (8005270 <vTaskSwitchContext+0xbc>)
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0e4      	beq.n	80051d8 <vTaskSwitchContext+0x24>
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4a15      	ldr	r2, [pc, #84]	; (8005270 <vTaskSwitchContext+0xbc>)
 800521a:	4413      	add	r3, r2
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	605a      	str	r2, [r3, #4]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	3308      	adds	r3, #8
 8005230:	429a      	cmp	r2, r3
 8005232:	d104      	bne.n	800523e <vTaskSwitchContext+0x8a>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a0b      	ldr	r2, [pc, #44]	; (8005274 <vTaskSwitchContext+0xc0>)
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <vTaskSwitchContext+0xb8>)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800524e:	4b09      	ldr	r3, [pc, #36]	; (8005274 <vTaskSwitchContext+0xc0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3354      	adds	r3, #84	; 0x54
 8005254:	4a08      	ldr	r2, [pc, #32]	; (8005278 <vTaskSwitchContext+0xc4>)
 8005256:	6013      	str	r3, [r2, #0]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	20000d20 	.word	0x20000d20
 8005268:	20000d0c 	.word	0x20000d0c
 800526c:	20000d00 	.word	0x20000d00
 8005270:	20000828 	.word	0x20000828
 8005274:	20000824 	.word	0x20000824
 8005278:	20000014 	.word	0x20000014

0800527c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	60fb      	str	r3, [r7, #12]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052a2:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <vTaskPlaceOnEventList+0x44>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3318      	adds	r3, #24
 80052a8:	4619      	mov	r1, r3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fe fe61 	bl	8003f72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052b0:	2101      	movs	r1, #1
 80052b2:	6838      	ldr	r0, [r7, #0]
 80052b4:	f000 fc82 	bl	8005bbc <prvAddCurrentTaskToDelayedList>
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000824 	.word	0x20000824

080052c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	617b      	str	r3, [r7, #20]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <vTaskPlaceOnEventListRestricted+0x54>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3318      	adds	r3, #24
 80052f2:	4619      	mov	r1, r3
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7fe fe18 	bl	8003f2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005304:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	68b8      	ldr	r0, [r7, #8]
 800530a:	f000 fc57 	bl	8005bbc <prvAddCurrentTaskToDelayedList>
	}
 800530e:	bf00      	nop
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20000824 	.word	0x20000824

0800531c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10a      	bne.n	8005348 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	60fb      	str	r3, [r7, #12]
}
 8005344:	bf00      	nop
 8005346:	e7fe      	b.n	8005346 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	3318      	adds	r3, #24
 800534c:	4618      	mov	r0, r3
 800534e:	f7fe fe49 	bl	8003fe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005352:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <xTaskRemoveFromEventList+0xb0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d11d      	bne.n	8005396 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	3304      	adds	r3, #4
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fe40 	bl	8003fe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <xTaskRemoveFromEventList+0xb4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d903      	bls.n	8005378 <xTaskRemoveFromEventList+0x5c>
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	4a16      	ldr	r2, [pc, #88]	; (80053d0 <xTaskRemoveFromEventList+0xb4>)
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <xTaskRemoveFromEventList+0xb8>)
 8005386:	441a      	add	r2, r3
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f7fe fdcb 	bl	8003f2a <vListInsertEnd>
 8005394:	e005      	b.n	80053a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	3318      	adds	r3, #24
 800539a:	4619      	mov	r1, r3
 800539c:	480e      	ldr	r0, [pc, #56]	; (80053d8 <xTaskRemoveFromEventList+0xbc>)
 800539e:	f7fe fdc4 	bl	8003f2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <xTaskRemoveFromEventList+0xc0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d905      	bls.n	80053bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053b0:	2301      	movs	r3, #1
 80053b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053b4:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <xTaskRemoveFromEventList+0xc4>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	e001      	b.n	80053c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053c0:	697b      	ldr	r3, [r7, #20]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000d20 	.word	0x20000d20
 80053d0:	20000d00 	.word	0x20000d00
 80053d4:	20000828 	.word	0x20000828
 80053d8:	20000cb8 	.word	0x20000cb8
 80053dc:	20000824 	.word	0x20000824
 80053e0:	20000d0c 	.word	0x20000d0c

080053e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <vTaskInternalSetTimeOutState+0x24>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <vTaskInternalSetTimeOutState+0x28>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	605a      	str	r2, [r3, #4]
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	20000d10 	.word	0x20000d10
 800540c:	20000cfc 	.word	0x20000cfc

08005410 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	60fb      	str	r3, [r7, #12]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005452:	f001 f87f 	bl	8006554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <xTaskCheckForTimeOut+0xbc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800546e:	d102      	bne.n	8005476 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	e023      	b.n	80054be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <xTaskCheckForTimeOut+0xc0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d007      	beq.n	8005492 <xTaskCheckForTimeOut+0x82>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	e015      	b.n	80054be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	429a      	cmp	r2, r3
 800549a:	d20b      	bcs.n	80054b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	1ad2      	subs	r2, r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff9b 	bl	80053e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	e004      	b.n	80054be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054be:	f001 f879 	bl	80065b4 <vPortExitCritical>

	return xReturn;
 80054c2:	69fb      	ldr	r3, [r7, #28]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000cfc 	.word	0x20000cfc
 80054d0:	20000d10 	.word	0x20000d10

080054d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054d8:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <vTaskMissedYield+0x14>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
}
 80054de:	bf00      	nop
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	20000d0c 	.word	0x20000d0c

080054ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054f4:	f000 f852 	bl	800559c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <prvIdleTask+0x28>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d9f9      	bls.n	80054f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <prvIdleTask+0x2c>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005510:	e7f0      	b.n	80054f4 <prvIdleTask+0x8>
 8005512:	bf00      	nop
 8005514:	20000828 	.word	0x20000828
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	e00c      	b.n	8005542 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4a12      	ldr	r2, [pc, #72]	; (800557c <prvInitialiseTaskLists+0x60>)
 8005534:	4413      	add	r3, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe fcca 	bl	8003ed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3301      	adds	r3, #1
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b37      	cmp	r3, #55	; 0x37
 8005546:	d9ef      	bls.n	8005528 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005548:	480d      	ldr	r0, [pc, #52]	; (8005580 <prvInitialiseTaskLists+0x64>)
 800554a:	f7fe fcc1 	bl	8003ed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800554e:	480d      	ldr	r0, [pc, #52]	; (8005584 <prvInitialiseTaskLists+0x68>)
 8005550:	f7fe fcbe 	bl	8003ed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005554:	480c      	ldr	r0, [pc, #48]	; (8005588 <prvInitialiseTaskLists+0x6c>)
 8005556:	f7fe fcbb 	bl	8003ed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800555a:	480c      	ldr	r0, [pc, #48]	; (800558c <prvInitialiseTaskLists+0x70>)
 800555c:	f7fe fcb8 	bl	8003ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005560:	480b      	ldr	r0, [pc, #44]	; (8005590 <prvInitialiseTaskLists+0x74>)
 8005562:	f7fe fcb5 	bl	8003ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <prvInitialiseTaskLists+0x78>)
 8005568:	4a05      	ldr	r2, [pc, #20]	; (8005580 <prvInitialiseTaskLists+0x64>)
 800556a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <prvInitialiseTaskLists+0x7c>)
 800556e:	4a05      	ldr	r2, [pc, #20]	; (8005584 <prvInitialiseTaskLists+0x68>)
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000828 	.word	0x20000828
 8005580:	20000c88 	.word	0x20000c88
 8005584:	20000c9c 	.word	0x20000c9c
 8005588:	20000cb8 	.word	0x20000cb8
 800558c:	20000ccc 	.word	0x20000ccc
 8005590:	20000ce4 	.word	0x20000ce4
 8005594:	20000cb0 	.word	0x20000cb0
 8005598:	20000cb4 	.word	0x20000cb4

0800559c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055a2:	e019      	b.n	80055d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055a4:	f000 ffd6 	bl	8006554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a8:	4b10      	ldr	r3, [pc, #64]	; (80055ec <prvCheckTasksWaitingTermination+0x50>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe fd15 	bl	8003fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <prvCheckTasksWaitingTermination+0x54>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3b01      	subs	r3, #1
 80055c0:	4a0b      	ldr	r2, [pc, #44]	; (80055f0 <prvCheckTasksWaitingTermination+0x54>)
 80055c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055c4:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <prvCheckTasksWaitingTermination+0x58>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <prvCheckTasksWaitingTermination+0x58>)
 80055cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055ce:	f000 fff1 	bl	80065b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f810 	bl	80055f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <prvCheckTasksWaitingTermination+0x58>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e1      	bne.n	80055a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000ccc 	.word	0x20000ccc
 80055f0:	20000cf8 	.word	0x20000cf8
 80055f4:	20000ce0 	.word	0x20000ce0

080055f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3354      	adds	r3, #84	; 0x54
 8005604:	4618      	mov	r0, r3
 8005606:	f001 fafb 	bl	8006c00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005610:	2b00      	cmp	r3, #0
 8005612:	d108      	bne.n	8005626 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	4618      	mov	r0, r3
 800561a:	f001 f989 	bl	8006930 <vPortFree>
				vPortFree( pxTCB );
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 f986 	bl	8006930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005624:	e018      	b.n	8005658 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800562c:	2b01      	cmp	r3, #1
 800562e:	d103      	bne.n	8005638 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f001 f97d 	bl	8006930 <vPortFree>
	}
 8005636:	e00f      	b.n	8005658 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800563e:	2b02      	cmp	r3, #2
 8005640:	d00a      	beq.n	8005658 <prvDeleteTCB+0x60>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	60fb      	str	r3, [r7, #12]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <prvDeleteTCB+0x5e>
	}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <prvResetNextTaskUnblockTime+0x38>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d104      	bne.n	800567a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <prvResetNextTaskUnblockTime+0x3c>)
 8005672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005676:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005678:	e008      	b.n	800568c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <prvResetNextTaskUnblockTime+0x38>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <prvResetNextTaskUnblockTime+0x3c>)
 800568a:	6013      	str	r3, [r2, #0]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000cb0 	.word	0x20000cb0
 800569c:	20000d18 	.word	0x20000d18

080056a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <xTaskGetSchedulerState+0x34>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ae:	2301      	movs	r3, #1
 80056b0:	607b      	str	r3, [r7, #4]
 80056b2:	e008      	b.n	80056c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b4:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <xTaskGetSchedulerState+0x38>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d102      	bne.n	80056c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056bc:	2302      	movs	r3, #2
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	e001      	b.n	80056c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056c2:	2300      	movs	r3, #0
 80056c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056c6:	687b      	ldr	r3, [r7, #4]
	}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	20000d04 	.word	0x20000d04
 80056d8:	20000d20 	.word	0x20000d20

080056dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d056      	beq.n	80057a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056f2:	4b2e      	ldr	r3, [pc, #184]	; (80057ac <xTaskPriorityDisinherit+0xd0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d00a      	beq.n	8005712 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	60fb      	str	r3, [r7, #12]
}
 800570e:	bf00      	nop
 8005710:	e7fe      	b.n	8005710 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	60bb      	str	r3, [r7, #8]
}
 800572c:	bf00      	nop
 800572e:	e7fe      	b.n	800572e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005734:	1e5a      	subs	r2, r3, #1
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005742:	429a      	cmp	r2, r3
 8005744:	d02c      	beq.n	80057a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800574a:	2b00      	cmp	r3, #0
 800574c:	d128      	bne.n	80057a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	3304      	adds	r3, #4
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fc46 	bl	8003fe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <xTaskPriorityDisinherit+0xd4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d903      	bls.n	8005780 <xTaskPriorityDisinherit+0xa4>
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <xTaskPriorityDisinherit+0xd4>)
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4a09      	ldr	r2, [pc, #36]	; (80057b4 <xTaskPriorityDisinherit+0xd8>)
 800578e:	441a      	add	r2, r3
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f7fe fbc7 	bl	8003f2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057a0:	697b      	ldr	r3, [r7, #20]
	}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000824 	.word	0x20000824
 80057b0:	20000d00 	.word	0x20000d00
 80057b4:	20000828 	.word	0x20000828

080057b8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80057c6:	f000 fec5 	bl	8006554 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80057ca:	4b29      	ldr	r3, [pc, #164]	; (8005870 <xTaskNotifyWait+0xb8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d01c      	beq.n	8005812 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <xTaskNotifyWait+0xb8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	43d2      	mvns	r2, r2
 80057e4:	400a      	ands	r2, r1
 80057e6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80057ea:	4b21      	ldr	r3, [pc, #132]	; (8005870 <xTaskNotifyWait+0xb8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057fa:	2101      	movs	r1, #1
 80057fc:	6838      	ldr	r0, [r7, #0]
 80057fe:	f000 f9dd 	bl	8005bbc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005802:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <xTaskNotifyWait+0xbc>)
 8005804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005812:	f000 fecf 	bl	80065b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005816:	f000 fe9d 	bl	8006554 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005820:	4b13      	ldr	r3, [pc, #76]	; (8005870 <xTaskNotifyWait+0xb8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800582c:	4b10      	ldr	r3, [pc, #64]	; (8005870 <xTaskNotifyWait+0xb8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d002      	beq.n	8005840 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e00a      	b.n	8005856 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <xTaskNotifyWait+0xb8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	43d2      	mvns	r2, r2
 800584c:	400a      	ands	r2, r1
 800584e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8005852:	2301      	movs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <xTaskNotifyWait+0xb8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8005860:	f000 fea8 	bl	80065b4 <vPortExitCritical>

		return xReturn;
 8005864:	697b      	ldr	r3, [r7, #20]
	}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000824 	.word	0x20000824
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08a      	sub	sp, #40	; 0x28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005888:	2301      	movs	r3, #1
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <xTaskGenericNotify+0x30>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	61bb      	str	r3, [r7, #24]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80058ac:	f000 fe52 	bl	8006554 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80058c6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d82d      	bhi.n	8005932 <xTaskGenericNotify+0xba>
 80058d6:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <xTaskGenericNotify+0x64>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	08005955 	.word	0x08005955
 80058e0:	080058f1 	.word	0x080058f1
 80058e4:	08005903 	.word	0x08005903
 80058e8:	08005913 	.word	0x08005913
 80058ec:	0800591d 	.word	0x0800591d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005900:	e02b      	b.n	800595a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005910:	e023      	b.n	800595a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800591a:	e01e      	b.n	800595a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800591c:	7ffb      	ldrb	r3, [r7, #31]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d004      	beq.n	800592c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800592a:	e016      	b.n	800595a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800592c:	2300      	movs	r3, #0
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005930:	e013      	b.n	800595a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800593c:	d00c      	beq.n	8005958 <xTaskGenericNotify+0xe0>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	617b      	str	r3, [r7, #20]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <xTaskGenericNotify+0xda>
					break;
 8005954:	bf00      	nop
 8005956:	e000      	b.n	800595a <xTaskGenericNotify+0xe2>

					break;
 8005958:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800595a:	7ffb      	ldrb	r3, [r7, #31]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d13a      	bne.n	80059d6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	3304      	adds	r3, #4
 8005964:	4618      	mov	r0, r3
 8005966:	f7fe fb3d 	bl	8003fe4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596e:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <xTaskGenericNotify+0x16c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d903      	bls.n	800597e <xTaskGenericNotify+0x106>
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <xTaskGenericNotify+0x16c>)
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <xTaskGenericNotify+0x170>)
 800598c:	441a      	add	r2, r3
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	3304      	adds	r3, #4
 8005992:	4619      	mov	r1, r3
 8005994:	4610      	mov	r0, r2
 8005996:	f7fe fac8 	bl	8003f2a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <xTaskGenericNotify+0x140>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	613b      	str	r3, [r7, #16]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059bc:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <xTaskGenericNotify+0x174>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d907      	bls.n	80059d6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <xTaskGenericNotify+0x178>)
 80059c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80059d6:	f000 fded 	bl	80065b4 <vPortExitCritical>

		return xReturn;
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	; 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000d00 	.word	0x20000d00
 80059e8:	20000828 	.word	0x20000828
 80059ec:	20000824 	.word	0x20000824
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08e      	sub	sp, #56	; 0x38
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005a04:	2301      	movs	r3, #1
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a24:	f000 fe78 	bl	8006718 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005a2c:	f3ef 8211 	mrs	r2, BASEPRI
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	623a      	str	r2, [r7, #32]
 8005a42:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005a44:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d004      	beq.n	8005a58 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	2202      	movs	r2, #2
 8005a66:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d82f      	bhi.n	8005ad0 <xTaskGenericNotifyFromISR+0xdc>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <xTaskGenericNotifyFromISR+0x84>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005af3 	.word	0x08005af3
 8005a7c:	08005a8d 	.word	0x08005a8d
 8005a80:	08005a9f 	.word	0x08005a9f
 8005a84:	08005aaf 	.word	0x08005aaf
 8005a88:	08005ab9 	.word	0x08005ab9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	431a      	orrs	r2, r3
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005a9c:	e02c      	b.n	8005af8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005aac:	e024      	b.n	8005af8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005ab6:	e01f      	b.n	8005af8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d004      	beq.n	8005aca <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005ac8:	e016      	b.n	8005af8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005ace:	e013      	b.n	8005af8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ada:	d00c      	beq.n	8005af6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8005adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	61bb      	str	r3, [r7, #24]
}
 8005aee:	bf00      	nop
 8005af0:	e7fe      	b.n	8005af0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8005af2:	bf00      	nop
 8005af4:	e000      	b.n	8005af8 <xTaskGenericNotifyFromISR+0x104>
					break;
 8005af6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005af8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d146      	bne.n	8005b8e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	617b      	str	r3, [r7, #20]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b1e:	4b21      	ldr	r3, [pc, #132]	; (8005ba4 <xTaskGenericNotifyFromISR+0x1b0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11d      	bne.n	8005b62 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fa5a 	bl	8003fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <xTaskGenericNotifyFromISR+0x1b4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d903      	bls.n	8005b44 <xTaskGenericNotifyFromISR+0x150>
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <xTaskGenericNotifyFromISR+0x1b4>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a16      	ldr	r2, [pc, #88]	; (8005bac <xTaskGenericNotifyFromISR+0x1b8>)
 8005b52:	441a      	add	r2, r3
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe f9e5 	bl	8003f2a <vListInsertEnd>
 8005b60:	e005      	b.n	8005b6e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	3318      	adds	r3, #24
 8005b66:	4619      	mov	r1, r3
 8005b68:	4811      	ldr	r0, [pc, #68]	; (8005bb0 <xTaskGenericNotifyFromISR+0x1bc>)
 8005b6a:	f7fe f9de 	bl	8003f2a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <xTaskGenericNotifyFromISR+0x1c0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d908      	bls.n	8005b8e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b84:	2201      	movs	r2, #1
 8005b86:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <xTaskGenericNotifyFromISR+0x1c4>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f383 8811 	msr	BASEPRI, r3
}
 8005b98:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3738      	adds	r7, #56	; 0x38
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20000d20 	.word	0x20000d20
 8005ba8:	20000d00 	.word	0x20000d00
 8005bac:	20000828 	.word	0x20000828
 8005bb0:	20000cb8 	.word	0x20000cb8
 8005bb4:	20000824 	.word	0x20000824
 8005bb8:	20000d0c 	.word	0x20000d0c

08005bbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bc6:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <prvAddCurrentTaskToDelayedList+0x90>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bcc:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fa06 	bl	8003fe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bde:	d10a      	bne.n	8005bf6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d007      	beq.n	8005bf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005be6:	4b1a      	ldr	r3, [pc, #104]	; (8005c50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	4819      	ldr	r0, [pc, #100]	; (8005c54 <prvAddCurrentTaskToDelayedList+0x98>)
 8005bf0:	f7fe f99b 	bl	8003f2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bf4:	e026      	b.n	8005c44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bfe:	4b14      	ldr	r3, [pc, #80]	; (8005c50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d209      	bcs.n	8005c22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c0e:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3304      	adds	r3, #4
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f7fe f9a9 	bl	8003f72 <vListInsert>
}
 8005c20:	e010      	b.n	8005c44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c22:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fe f99f 	bl	8003f72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d202      	bcs.n	8005c44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c3e:	4a08      	ldr	r2, [pc, #32]	; (8005c60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6013      	str	r3, [r2, #0]
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000cfc 	.word	0x20000cfc
 8005c50:	20000824 	.word	0x20000824
 8005c54:	20000ce4 	.word	0x20000ce4
 8005c58:	20000cb4 	.word	0x20000cb4
 8005c5c:	20000cb0 	.word	0x20000cb0
 8005c60:	20000d18 	.word	0x20000d18

08005c64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c6e:	f000 fb07 	bl	8006280 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <xTimerCreateTimerTask+0x80>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d021      	beq.n	8005cbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c82:	1d3a      	adds	r2, r7, #4
 8005c84:	f107 0108 	add.w	r1, r7, #8
 8005c88:	f107 030c 	add.w	r3, r7, #12
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe f905 	bl	8003e9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	9202      	str	r2, [sp, #8]
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	460a      	mov	r2, r1
 8005ca4:	4910      	ldr	r1, [pc, #64]	; (8005ce8 <xTimerCreateTimerTask+0x84>)
 8005ca6:	4811      	ldr	r0, [pc, #68]	; (8005cec <xTimerCreateTimerTask+0x88>)
 8005ca8:	f7fe feb2 	bl	8004a10 <xTaskCreateStatic>
 8005cac:	4603      	mov	r3, r0
 8005cae:	4a10      	ldr	r2, [pc, #64]	; (8005cf0 <xTimerCreateTimerTask+0x8c>)
 8005cb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cb2:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <xTimerCreateTimerTask+0x8c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	613b      	str	r3, [r7, #16]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005cda:	697b      	ldr	r3, [r7, #20]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20000d54 	.word	0x20000d54
 8005ce8:	08006db0 	.word	0x08006db0
 8005cec:	08005e29 	.word	0x08005e29
 8005cf0:	20000d58 	.word	0x20000d58

08005cf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	623b      	str	r3, [r7, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d22:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <xTimerGenericCommand+0x98>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d02a      	beq.n	8005d80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	dc18      	bgt.n	8005d6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d3c:	f7ff fcb0 	bl	80056a0 <xTaskGetSchedulerState>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d109      	bne.n	8005d5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d46:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <xTimerGenericCommand+0x98>)
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	f107 0110 	add.w	r1, r7, #16
 8005d4e:	2300      	movs	r3, #0
 8005d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d52:	f7fe fa75 	bl	8004240 <xQueueGenericSend>
 8005d56:	6278      	str	r0, [r7, #36]	; 0x24
 8005d58:	e012      	b.n	8005d80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <xTimerGenericCommand+0x98>)
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	f107 0110 	add.w	r1, r7, #16
 8005d62:	2300      	movs	r3, #0
 8005d64:	2200      	movs	r2, #0
 8005d66:	f7fe fa6b 	bl	8004240 <xQueueGenericSend>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d6c:	e008      	b.n	8005d80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d6e:	4b07      	ldr	r3, [pc, #28]	; (8005d8c <xTimerGenericCommand+0x98>)
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	f107 0110 	add.w	r1, r7, #16
 8005d76:	2300      	movs	r3, #0
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	f7fe fb5f 	bl	800443c <xQueueGenericSendFromISR>
 8005d7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3728      	adds	r7, #40	; 0x28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000d54 	.word	0x20000d54

08005d90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9a:	4b22      	ldr	r3, [pc, #136]	; (8005e24 <prvProcessExpiredTimer+0x94>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fe f91b 	bl	8003fe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d022      	beq.n	8005e02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	18d1      	adds	r1, r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f000 f8d1 	bl	8005f70 <prvInsertTimerInActiveList>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01f      	beq.n	8005e14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	2100      	movs	r1, #0
 8005dde:	6978      	ldr	r0, [r7, #20]
 8005de0:	f7ff ff88 	bl	8005cf4 <xTimerGenericCommand>
 8005de4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d113      	bne.n	8005e14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	60fb      	str	r3, [r7, #12]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	6978      	ldr	r0, [r7, #20]
 8005e1a:	4798      	blx	r3
}
 8005e1c:	bf00      	nop
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000d4c 	.word	0x20000d4c

08005e28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e30:	f107 0308 	add.w	r3, r7, #8
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 f857 	bl	8005ee8 <prvGetNextExpireTime>
 8005e3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f803 	bl	8005e4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e46:	f000 f8d5 	bl	8005ff4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e4a:	e7f1      	b.n	8005e30 <prvTimerTask+0x8>

08005e4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e56:	f7ff f837 	bl	8004ec8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e5a:	f107 0308 	add.w	r3, r7, #8
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 f866 	bl	8005f30 <prvSampleTimeNow>
 8005e64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d130      	bne.n	8005ece <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <prvProcessTimerOrBlockTask+0x3c>
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d806      	bhi.n	8005e88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e7a:	f7ff f833 	bl	8004ee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff ff85 	bl	8005d90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e86:	e024      	b.n	8005ed2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e8e:	4b13      	ldr	r3, [pc, #76]	; (8005edc <prvProcessTimerOrBlockTask+0x90>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <prvProcessTimerOrBlockTask+0x50>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <prvProcessTimerOrBlockTask+0x52>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <prvProcessTimerOrBlockTask+0x94>)
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	4619      	mov	r1, r3
 8005eae:	f7fe fd7b 	bl	80049a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005eb2:	f7ff f817 	bl	8004ee4 <xTaskResumeAll>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ebc:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <prvProcessTimerOrBlockTask+0x98>)
 8005ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	f3bf 8f6f 	isb	sy
}
 8005ecc:	e001      	b.n	8005ed2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ece:	f7ff f809 	bl	8004ee4 <xTaskResumeAll>
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000d50 	.word	0x20000d50
 8005ee0:	20000d54 	.word	0x20000d54
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ef0:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <prvGetNextExpireTime+0x44>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <prvGetNextExpireTime+0x16>
 8005efa:	2201      	movs	r2, #1
 8005efc:	e000      	b.n	8005f00 <prvGetNextExpireTime+0x18>
 8005efe:	2200      	movs	r2, #0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f0c:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <prvGetNextExpireTime+0x44>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e001      	b.n	8005f1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20000d4c 	.word	0x20000d4c

08005f30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f38:	f7ff f872 	bl	8005020 <xTaskGetTickCount>
 8005f3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <prvSampleTimeNow+0x3c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d205      	bcs.n	8005f54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f48:	f000 f936 	bl	80061b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	e002      	b.n	8005f5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f5a:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <prvSampleTimeNow+0x3c>)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f60:	68fb      	ldr	r3, [r7, #12]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000d5c 	.word	0x20000d5c

08005f70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d812      	bhi.n	8005fbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	1ad2      	subs	r2, r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d302      	bcc.n	8005faa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e01b      	b.n	8005fe2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005faa:	4b10      	ldr	r3, [pc, #64]	; (8005fec <prvInsertTimerInActiveList+0x7c>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f7fd ffdc 	bl	8003f72 <vListInsert>
 8005fba:	e012      	b.n	8005fe2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d206      	bcs.n	8005fd2 <prvInsertTimerInActiveList+0x62>
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d302      	bcc.n	8005fd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e007      	b.n	8005fe2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <prvInsertTimerInActiveList+0x80>)
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f7fd ffc8 	bl	8003f72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005fe2:	697b      	ldr	r3, [r7, #20]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000d50 	.word	0x20000d50
 8005ff0:	20000d4c 	.word	0x20000d4c

08005ff4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08e      	sub	sp, #56	; 0x38
 8005ff8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ffa:	e0ca      	b.n	8006192 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	da18      	bge.n	8006034 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	3304      	adds	r3, #4
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	61fb      	str	r3, [r7, #28]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800602a:	6850      	ldr	r0, [r2, #4]
 800602c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800602e:	6892      	ldr	r2, [r2, #8]
 8006030:	4611      	mov	r1, r2
 8006032:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f2c0 80aa 	blt.w	8006190 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	3304      	adds	r3, #4
 800604c:	4618      	mov	r0, r3
 800604e:	f7fd ffc9 	bl	8003fe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006052:	463b      	mov	r3, r7
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ff6b 	bl	8005f30 <prvSampleTimeNow>
 800605a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b09      	cmp	r3, #9
 8006060:	f200 8097 	bhi.w	8006192 <prvProcessReceivedCommands+0x19e>
 8006064:	a201      	add	r2, pc, #4	; (adr r2, 800606c <prvProcessReceivedCommands+0x78>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	08006095 	.word	0x08006095
 8006070:	08006095 	.word	0x08006095
 8006074:	08006095 	.word	0x08006095
 8006078:	08006109 	.word	0x08006109
 800607c:	0800611d 	.word	0x0800611d
 8006080:	08006167 	.word	0x08006167
 8006084:	08006095 	.word	0x08006095
 8006088:	08006095 	.word	0x08006095
 800608c:	08006109 	.word	0x08006109
 8006090:	0800611d 	.word	0x0800611d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	18d1      	adds	r1, r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b4:	f7ff ff5c 	bl	8005f70 <prvInsertTimerInActiveList>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d069      	beq.n	8006192 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d05e      	beq.n	8006192 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	441a      	add	r2, r3
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2300      	movs	r3, #0
 80060e2:	2100      	movs	r1, #0
 80060e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e6:	f7ff fe05 	bl	8005cf4 <xTimerGenericCommand>
 80060ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d14f      	bne.n	8006192 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	61bb      	str	r3, [r7, #24]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800610e:	f023 0301 	bic.w	r3, r3, #1
 8006112:	b2da      	uxtb	r2, r3
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800611a:	e03a      	b.n	8006192 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006122:	f043 0301 	orr.w	r3, r3, #1
 8006126:	b2da      	uxtb	r2, r3
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	617b      	str	r3, [r7, #20]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	18d1      	adds	r1, r2, r3
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006160:	f7ff ff06 	bl	8005f70 <prvInsertTimerInActiveList>
					break;
 8006164:	e015      	b.n	8006192 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d103      	bne.n	800617c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006176:	f000 fbdb 	bl	8006930 <vPortFree>
 800617a:	e00a      	b.n	8006192 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006182:	f023 0301 	bic.w	r3, r3, #1
 8006186:	b2da      	uxtb	r2, r3
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800618e:	e000      	b.n	8006192 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006190:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006192:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <prvProcessReceivedCommands+0x1c0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	1d39      	adds	r1, r7, #4
 8006198:	2200      	movs	r2, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe f9ea 	bl	8004574 <xQueueReceive>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f47f af2a 	bne.w	8005ffc <prvProcessReceivedCommands+0x8>
	}
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	3730      	adds	r7, #48	; 0x30
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000d54 	.word	0x20000d54

080061b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061be:	e048      	b.n	8006252 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061c0:	4b2d      	ldr	r3, [pc, #180]	; (8006278 <prvSwitchTimerLists+0xc0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ca:	4b2b      	ldr	r3, [pc, #172]	; (8006278 <prvSwitchTimerLists+0xc0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fd ff03 	bl	8003fe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d02e      	beq.n	8006252 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4413      	add	r3, r2
 80061fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	429a      	cmp	r2, r3
 8006204:	d90e      	bls.n	8006224 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006212:	4b19      	ldr	r3, [pc, #100]	; (8006278 <prvSwitchTimerLists+0xc0>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3304      	adds	r3, #4
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f7fd fea8 	bl	8003f72 <vListInsert>
 8006222:	e016      	b.n	8006252 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006224:	2300      	movs	r3, #0
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2300      	movs	r3, #0
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	2100      	movs	r1, #0
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7ff fd60 	bl	8005cf4 <xTimerGenericCommand>
 8006234:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	603b      	str	r3, [r7, #0]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006252:	4b09      	ldr	r3, [pc, #36]	; (8006278 <prvSwitchTimerLists+0xc0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1b1      	bne.n	80061c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <prvSwitchTimerLists+0xc0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <prvSwitchTimerLists+0xc4>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a04      	ldr	r2, [pc, #16]	; (8006278 <prvSwitchTimerLists+0xc0>)
 8006268:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800626a:	4a04      	ldr	r2, [pc, #16]	; (800627c <prvSwitchTimerLists+0xc4>)
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	6013      	str	r3, [r2, #0]
}
 8006270:	bf00      	nop
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000d4c 	.word	0x20000d4c
 800627c:	20000d50 	.word	0x20000d50

08006280 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006286:	f000 f965 	bl	8006554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800628a:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <prvCheckForValidListAndQueue+0x60>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d120      	bne.n	80062d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006292:	4814      	ldr	r0, [pc, #80]	; (80062e4 <prvCheckForValidListAndQueue+0x64>)
 8006294:	f7fd fe1c 	bl	8003ed0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006298:	4813      	ldr	r0, [pc, #76]	; (80062e8 <prvCheckForValidListAndQueue+0x68>)
 800629a:	f7fd fe19 	bl	8003ed0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800629e:	4b13      	ldr	r3, [pc, #76]	; (80062ec <prvCheckForValidListAndQueue+0x6c>)
 80062a0:	4a10      	ldr	r2, [pc, #64]	; (80062e4 <prvCheckForValidListAndQueue+0x64>)
 80062a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062a4:	4b12      	ldr	r3, [pc, #72]	; (80062f0 <prvCheckForValidListAndQueue+0x70>)
 80062a6:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <prvCheckForValidListAndQueue+0x68>)
 80062a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062aa:	2300      	movs	r3, #0
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <prvCheckForValidListAndQueue+0x74>)
 80062b0:	4a11      	ldr	r2, [pc, #68]	; (80062f8 <prvCheckForValidListAndQueue+0x78>)
 80062b2:	2110      	movs	r1, #16
 80062b4:	200a      	movs	r0, #10
 80062b6:	f7fd ff27 	bl	8004108 <xQueueGenericCreateStatic>
 80062ba:	4603      	mov	r3, r0
 80062bc:	4a08      	ldr	r2, [pc, #32]	; (80062e0 <prvCheckForValidListAndQueue+0x60>)
 80062be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <prvCheckForValidListAndQueue+0x60>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <prvCheckForValidListAndQueue+0x60>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	490b      	ldr	r1, [pc, #44]	; (80062fc <prvCheckForValidListAndQueue+0x7c>)
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe fb40 	bl	8004954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062d4:	f000 f96e 	bl	80065b4 <vPortExitCritical>
}
 80062d8:	bf00      	nop
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000d54 	.word	0x20000d54
 80062e4:	20000d24 	.word	0x20000d24
 80062e8:	20000d38 	.word	0x20000d38
 80062ec:	20000d4c 	.word	0x20000d4c
 80062f0:	20000d50 	.word	0x20000d50
 80062f4:	20000e00 	.word	0x20000e00
 80062f8:	20000d60 	.word	0x20000d60
 80062fc:	08006db8 	.word	0x08006db8

08006300 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3b04      	subs	r3, #4
 8006310:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3b04      	subs	r3, #4
 800631e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f023 0201 	bic.w	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3b04      	subs	r3, #4
 800632e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006330:	4a0c      	ldr	r2, [pc, #48]	; (8006364 <pxPortInitialiseStack+0x64>)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3b14      	subs	r3, #20
 800633a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3b04      	subs	r3, #4
 8006346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f06f 0202 	mvn.w	r2, #2
 800634e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3b20      	subs	r3, #32
 8006354:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006356:	68fb      	ldr	r3, [r7, #12]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	08006369 	.word	0x08006369

08006368 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006372:	4b12      	ldr	r3, [pc, #72]	; (80063bc <prvTaskExitError+0x54>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800637a:	d00a      	beq.n	8006392 <prvTaskExitError+0x2a>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	60fb      	str	r3, [r7, #12]
}
 800638e:	bf00      	nop
 8006390:	e7fe      	b.n	8006390 <prvTaskExitError+0x28>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	60bb      	str	r3, [r7, #8]
}
 80063a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063a6:	bf00      	nop
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0fc      	beq.n	80063a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063ae:	bf00      	nop
 80063b0:	bf00      	nop
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20000010 	.word	0x20000010

080063c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063c0:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <pxCurrentTCBConst2>)
 80063c2:	6819      	ldr	r1, [r3, #0]
 80063c4:	6808      	ldr	r0, [r1, #0]
 80063c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ca:	f380 8809 	msr	PSP, r0
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f04f 0000 	mov.w	r0, #0
 80063d6:	f380 8811 	msr	BASEPRI, r0
 80063da:	4770      	bx	lr
 80063dc:	f3af 8000 	nop.w

080063e0 <pxCurrentTCBConst2>:
 80063e0:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063e8:	4808      	ldr	r0, [pc, #32]	; (800640c <prvPortStartFirstTask+0x24>)
 80063ea:	6800      	ldr	r0, [r0, #0]
 80063ec:	6800      	ldr	r0, [r0, #0]
 80063ee:	f380 8808 	msr	MSP, r0
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f380 8814 	msr	CONTROL, r0
 80063fa:	b662      	cpsie	i
 80063fc:	b661      	cpsie	f
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	df00      	svc	0
 8006408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800640a:	bf00      	nop
 800640c:	e000ed08 	.word	0xe000ed08

08006410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006416:	4b46      	ldr	r3, [pc, #280]	; (8006530 <xPortStartScheduler+0x120>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a46      	ldr	r2, [pc, #280]	; (8006534 <xPortStartScheduler+0x124>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10a      	bne.n	8006436 <xPortStartScheduler+0x26>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	613b      	str	r3, [r7, #16]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006436:	4b3e      	ldr	r3, [pc, #248]	; (8006530 <xPortStartScheduler+0x120>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a3f      	ldr	r2, [pc, #252]	; (8006538 <xPortStartScheduler+0x128>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d10a      	bne.n	8006456 <xPortStartScheduler+0x46>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	60fb      	str	r3, [r7, #12]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006456:	4b39      	ldr	r3, [pc, #228]	; (800653c <xPortStartScheduler+0x12c>)
 8006458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	22ff      	movs	r2, #255	; 0xff
 8006466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006478:	b2da      	uxtb	r2, r3
 800647a:	4b31      	ldr	r3, [pc, #196]	; (8006540 <xPortStartScheduler+0x130>)
 800647c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800647e:	4b31      	ldr	r3, [pc, #196]	; (8006544 <xPortStartScheduler+0x134>)
 8006480:	2207      	movs	r2, #7
 8006482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006484:	e009      	b.n	800649a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006486:	4b2f      	ldr	r3, [pc, #188]	; (8006544 <xPortStartScheduler+0x134>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3b01      	subs	r3, #1
 800648c:	4a2d      	ldr	r2, [pc, #180]	; (8006544 <xPortStartScheduler+0x134>)
 800648e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	b2db      	uxtb	r3, r3
 8006498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	2b80      	cmp	r3, #128	; 0x80
 80064a4:	d0ef      	beq.n	8006486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064a6:	4b27      	ldr	r3, [pc, #156]	; (8006544 <xPortStartScheduler+0x134>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f1c3 0307 	rsb	r3, r3, #7
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d00a      	beq.n	80064c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	60bb      	str	r3, [r7, #8]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064c8:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <xPortStartScheduler+0x134>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <xPortStartScheduler+0x134>)
 80064d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064d2:	4b1c      	ldr	r3, [pc, #112]	; (8006544 <xPortStartScheduler+0x134>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064da:	4a1a      	ldr	r2, [pc, #104]	; (8006544 <xPortStartScheduler+0x134>)
 80064dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064e6:	4b18      	ldr	r3, [pc, #96]	; (8006548 <xPortStartScheduler+0x138>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a17      	ldr	r2, [pc, #92]	; (8006548 <xPortStartScheduler+0x138>)
 80064ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064f2:	4b15      	ldr	r3, [pc, #84]	; (8006548 <xPortStartScheduler+0x138>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a14      	ldr	r2, [pc, #80]	; (8006548 <xPortStartScheduler+0x138>)
 80064f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064fe:	f000 f8dd 	bl	80066bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006502:	4b12      	ldr	r3, [pc, #72]	; (800654c <xPortStartScheduler+0x13c>)
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006508:	f000 f8fc 	bl	8006704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800650c:	4b10      	ldr	r3, [pc, #64]	; (8006550 <xPortStartScheduler+0x140>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0f      	ldr	r2, [pc, #60]	; (8006550 <xPortStartScheduler+0x140>)
 8006512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006518:	f7ff ff66 	bl	80063e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800651c:	f7fe fe4a 	bl	80051b4 <vTaskSwitchContext>
	prvTaskExitError();
 8006520:	f7ff ff22 	bl	8006368 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	e000ed00 	.word	0xe000ed00
 8006534:	410fc271 	.word	0x410fc271
 8006538:	410fc270 	.word	0x410fc270
 800653c:	e000e400 	.word	0xe000e400
 8006540:	20000e50 	.word	0x20000e50
 8006544:	20000e54 	.word	0x20000e54
 8006548:	e000ed20 	.word	0xe000ed20
 800654c:	20000010 	.word	0x20000010
 8006550:	e000ef34 	.word	0xe000ef34

08006554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	607b      	str	r3, [r7, #4]
}
 800656c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <vPortEnterCritical+0x58>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	4a0d      	ldr	r2, [pc, #52]	; (80065ac <vPortEnterCritical+0x58>)
 8006576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006578:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <vPortEnterCritical+0x58>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d10f      	bne.n	80065a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006580:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <vPortEnterCritical+0x5c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	603b      	str	r3, [r7, #0]
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <vPortEnterCritical+0x4a>
	}
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20000010 	.word	0x20000010
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065ba:	4b12      	ldr	r3, [pc, #72]	; (8006604 <vPortExitCritical+0x50>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <vPortExitCritical+0x24>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <vPortExitCritical+0x50>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3b01      	subs	r3, #1
 80065de:	4a09      	ldr	r2, [pc, #36]	; (8006604 <vPortExitCritical+0x50>)
 80065e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065e2:	4b08      	ldr	r3, [pc, #32]	; (8006604 <vPortExitCritical+0x50>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d105      	bne.n	80065f6 <vPortExitCritical+0x42>
 80065ea:	2300      	movs	r3, #0
 80065ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	f383 8811 	msr	BASEPRI, r3
}
 80065f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000010 	.word	0x20000010
	...

08006610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006610:	f3ef 8009 	mrs	r0, PSP
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	4b15      	ldr	r3, [pc, #84]	; (8006670 <pxCurrentTCBConst>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	f01e 0f10 	tst.w	lr, #16
 8006620:	bf08      	it	eq
 8006622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	6010      	str	r0, [r2, #0]
 800662c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006634:	f380 8811 	msr	BASEPRI, r0
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f7fe fdb8 	bl	80051b4 <vTaskSwitchContext>
 8006644:	f04f 0000 	mov.w	r0, #0
 8006648:	f380 8811 	msr	BASEPRI, r0
 800664c:	bc09      	pop	{r0, r3}
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	6808      	ldr	r0, [r1, #0]
 8006652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006656:	f01e 0f10 	tst.w	lr, #16
 800665a:	bf08      	it	eq
 800665c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006660:	f380 8809 	msr	PSP, r0
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	f3af 8000 	nop.w

08006670 <pxCurrentTCBConst>:
 8006670:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006692:	f7fe fcd5 	bl	8005040 <xTaskIncrementTick>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800669c:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <xPortSysTickHandler+0x40>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f383 8811 	msr	BASEPRI, r3
}
 80066ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066c0:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <vPortSetupTimerInterrupt+0x34>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <vPortSetupTimerInterrupt+0x38>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <vPortSetupTimerInterrupt+0x3c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <vPortSetupTimerInterrupt+0x40>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	099b      	lsrs	r3, r3, #6
 80066d8:	4a09      	ldr	r2, [pc, #36]	; (8006700 <vPortSetupTimerInterrupt+0x44>)
 80066da:	3b01      	subs	r3, #1
 80066dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066de:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <vPortSetupTimerInterrupt+0x34>)
 80066e0:	2207      	movs	r2, #7
 80066e2:	601a      	str	r2, [r3, #0]
}
 80066e4:	bf00      	nop
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	e000e010 	.word	0xe000e010
 80066f4:	e000e018 	.word	0xe000e018
 80066f8:	20000004 	.word	0x20000004
 80066fc:	10624dd3 	.word	0x10624dd3
 8006700:	e000e014 	.word	0xe000e014

08006704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006714 <vPortEnableVFP+0x10>
 8006708:	6801      	ldr	r1, [r0, #0]
 800670a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800670e:	6001      	str	r1, [r0, #0]
 8006710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006712:	bf00      	nop
 8006714:	e000ed88 	.word	0xe000ed88

08006718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800671e:	f3ef 8305 	mrs	r3, IPSR
 8006722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b0f      	cmp	r3, #15
 8006728:	d914      	bls.n	8006754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800672a:	4a17      	ldr	r2, [pc, #92]	; (8006788 <vPortValidateInterruptPriority+0x70>)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006734:	4b15      	ldr	r3, [pc, #84]	; (800678c <vPortValidateInterruptPriority+0x74>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	7afa      	ldrb	r2, [r7, #11]
 800673a:	429a      	cmp	r2, r3
 800673c:	d20a      	bcs.n	8006754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	607b      	str	r3, [r7, #4]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006754:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <vPortValidateInterruptPriority+0x78>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800675c:	4b0d      	ldr	r3, [pc, #52]	; (8006794 <vPortValidateInterruptPriority+0x7c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d90a      	bls.n	800677a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	603b      	str	r3, [r7, #0]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <vPortValidateInterruptPriority+0x60>
	}
 800677a:	bf00      	nop
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	e000e3f0 	.word	0xe000e3f0
 800678c:	20000e50 	.word	0x20000e50
 8006790:	e000ed0c 	.word	0xe000ed0c
 8006794:	20000e54 	.word	0x20000e54

08006798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08a      	sub	sp, #40	; 0x28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067a4:	f7fe fb90 	bl	8004ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067a8:	4b5b      	ldr	r3, [pc, #364]	; (8006918 <pvPortMalloc+0x180>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067b0:	f000 f920 	bl	80069f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067b4:	4b59      	ldr	r3, [pc, #356]	; (800691c <pvPortMalloc+0x184>)
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f040 8093 	bne.w	80068e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01d      	beq.n	8006804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067c8:	2208      	movs	r2, #8
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4413      	add	r3, r2
 80067ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d014      	beq.n	8006804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f023 0307 	bic.w	r3, r3, #7
 80067e0:	3308      	adds	r3, #8
 80067e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <pvPortMalloc+0x6c>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	617b      	str	r3, [r7, #20]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d06e      	beq.n	80068e8 <pvPortMalloc+0x150>
 800680a:	4b45      	ldr	r3, [pc, #276]	; (8006920 <pvPortMalloc+0x188>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d869      	bhi.n	80068e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006814:	4b43      	ldr	r3, [pc, #268]	; (8006924 <pvPortMalloc+0x18c>)
 8006816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006818:	4b42      	ldr	r3, [pc, #264]	; (8006924 <pvPortMalloc+0x18c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800681e:	e004      	b.n	800682a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d903      	bls.n	800683c <pvPortMalloc+0xa4>
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1f1      	bne.n	8006820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800683c:	4b36      	ldr	r3, [pc, #216]	; (8006918 <pvPortMalloc+0x180>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006842:	429a      	cmp	r2, r3
 8006844:	d050      	beq.n	80068e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2208      	movs	r2, #8
 800684c:	4413      	add	r3, r2
 800684e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	1ad2      	subs	r2, r2, r3
 8006860:	2308      	movs	r3, #8
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	429a      	cmp	r2, r3
 8006866:	d91f      	bls.n	80068a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <pvPortMalloc+0xf8>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	613b      	str	r3, [r7, #16]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	1ad2      	subs	r2, r2, r3
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068a2:	69b8      	ldr	r0, [r7, #24]
 80068a4:	f000 f908 	bl	8006ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068a8:	4b1d      	ldr	r3, [pc, #116]	; (8006920 <pvPortMalloc+0x188>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	4a1b      	ldr	r2, [pc, #108]	; (8006920 <pvPortMalloc+0x188>)
 80068b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068b6:	4b1a      	ldr	r3, [pc, #104]	; (8006920 <pvPortMalloc+0x188>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b1b      	ldr	r3, [pc, #108]	; (8006928 <pvPortMalloc+0x190>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d203      	bcs.n	80068ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068c2:	4b17      	ldr	r3, [pc, #92]	; (8006920 <pvPortMalloc+0x188>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a18      	ldr	r2, [pc, #96]	; (8006928 <pvPortMalloc+0x190>)
 80068c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	4b13      	ldr	r3, [pc, #76]	; (800691c <pvPortMalloc+0x184>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <pvPortMalloc+0x194>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3301      	adds	r3, #1
 80068e4:	4a11      	ldr	r2, [pc, #68]	; (800692c <pvPortMalloc+0x194>)
 80068e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068e8:	f7fe fafc 	bl	8004ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <pvPortMalloc+0x174>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	60fb      	str	r3, [r7, #12]
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <pvPortMalloc+0x172>
	return pvReturn;
 800690c:	69fb      	ldr	r3, [r7, #28]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3728      	adds	r7, #40	; 0x28
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20004a60 	.word	0x20004a60
 800691c:	20004a74 	.word	0x20004a74
 8006920:	20004a64 	.word	0x20004a64
 8006924:	20004a58 	.word	0x20004a58
 8006928:	20004a68 	.word	0x20004a68
 800692c:	20004a6c 	.word	0x20004a6c

08006930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d04d      	beq.n	80069de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006942:	2308      	movs	r3, #8
 8006944:	425b      	negs	r3, r3
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4413      	add	r3, r2
 800694a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <vPortFree+0xb8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10a      	bne.n	8006974 <vPortFree+0x44>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	60fb      	str	r3, [r7, #12]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <vPortFree+0x62>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	60bb      	str	r3, [r7, #8]
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <vPortFree+0xb8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01e      	beq.n	80069de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d11a      	bne.n	80069de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	4b0e      	ldr	r3, [pc, #56]	; (80069e8 <vPortFree+0xb8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	43db      	mvns	r3, r3
 80069b2:	401a      	ands	r2, r3
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069b8:	f7fe fa86 	bl	8004ec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <vPortFree+0xbc>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4413      	add	r3, r2
 80069c6:	4a09      	ldr	r2, [pc, #36]	; (80069ec <vPortFree+0xbc>)
 80069c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069ca:	6938      	ldr	r0, [r7, #16]
 80069cc:	f000 f874 	bl	8006ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069d0:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <vPortFree+0xc0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3301      	adds	r3, #1
 80069d6:	4a06      	ldr	r2, [pc, #24]	; (80069f0 <vPortFree+0xc0>)
 80069d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069da:	f7fe fa83 	bl	8004ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069de:	bf00      	nop
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20004a74 	.word	0x20004a74
 80069ec:	20004a64 	.word	0x20004a64
 80069f0:	20004a70 	.word	0x20004a70

080069f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a00:	4b27      	ldr	r3, [pc, #156]	; (8006aa0 <prvHeapInit+0xac>)
 8006a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00c      	beq.n	8006a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3307      	adds	r3, #7
 8006a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0307 	bic.w	r3, r3, #7
 8006a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	4a1f      	ldr	r2, [pc, #124]	; (8006aa0 <prvHeapInit+0xac>)
 8006a24:	4413      	add	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <prvHeapInit+0xb0>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a32:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <prvHeapInit+0xb0>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a40:	2208      	movs	r2, #8
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1a9b      	subs	r3, r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0307 	bic.w	r3, r3, #7
 8006a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a56:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <prvHeapInit+0xb8>)
 8006a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <prvHeapInit+0xbc>)
 8006a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a8c:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <prvHeapInit+0xc0>)
 8006a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	bf00      	nop
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	20000e58 	.word	0x20000e58
 8006aa4:	20004a58 	.word	0x20004a58
 8006aa8:	20004a60 	.word	0x20004a60
 8006aac:	20004a68 	.word	0x20004a68
 8006ab0:	20004a64 	.word	0x20004a64
 8006ab4:	20004a74 	.word	0x20004a74

08006ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ac0:	4b28      	ldr	r3, [pc, #160]	; (8006b64 <prvInsertBlockIntoFreeList+0xac>)
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e002      	b.n	8006acc <prvInsertBlockIntoFreeList+0x14>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d8f7      	bhi.n	8006ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d108      	bne.n	8006afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	441a      	add	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	441a      	add	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d118      	bne.n	8006b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <prvInsertBlockIntoFreeList+0xb0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d00d      	beq.n	8006b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e008      	b.n	8006b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <prvInsertBlockIntoFreeList+0xb0>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e003      	b.n	8006b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d002      	beq.n	8006b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20004a58 	.word	0x20004a58
 8006b68:	20004a60 	.word	0x20004a60

08006b6c <__libc_init_array>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	4d0d      	ldr	r5, [pc, #52]	; (8006ba4 <__libc_init_array+0x38>)
 8006b70:	4c0d      	ldr	r4, [pc, #52]	; (8006ba8 <__libc_init_array+0x3c>)
 8006b72:	1b64      	subs	r4, r4, r5
 8006b74:	10a4      	asrs	r4, r4, #2
 8006b76:	2600      	movs	r6, #0
 8006b78:	42a6      	cmp	r6, r4
 8006b7a:	d109      	bne.n	8006b90 <__libc_init_array+0x24>
 8006b7c:	4d0b      	ldr	r5, [pc, #44]	; (8006bac <__libc_init_array+0x40>)
 8006b7e:	4c0c      	ldr	r4, [pc, #48]	; (8006bb0 <__libc_init_array+0x44>)
 8006b80:	f000 f8f6 	bl	8006d70 <_init>
 8006b84:	1b64      	subs	r4, r4, r5
 8006b86:	10a4      	asrs	r4, r4, #2
 8006b88:	2600      	movs	r6, #0
 8006b8a:	42a6      	cmp	r6, r4
 8006b8c:	d105      	bne.n	8006b9a <__libc_init_array+0x2e>
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b94:	4798      	blx	r3
 8006b96:	3601      	adds	r6, #1
 8006b98:	e7ee      	b.n	8006b78 <__libc_init_array+0xc>
 8006b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9e:	4798      	blx	r3
 8006ba0:	3601      	adds	r6, #1
 8006ba2:	e7f2      	b.n	8006b8a <__libc_init_array+0x1e>
 8006ba4:	08006e88 	.word	0x08006e88
 8006ba8:	08006e88 	.word	0x08006e88
 8006bac:	08006e88 	.word	0x08006e88
 8006bb0:	08006e8c 	.word	0x08006e8c

08006bb4 <__retarget_lock_acquire_recursive>:
 8006bb4:	4770      	bx	lr

08006bb6 <__retarget_lock_release_recursive>:
 8006bb6:	4770      	bx	lr

08006bb8 <memcpy>:
 8006bb8:	440a      	add	r2, r1
 8006bba:	4291      	cmp	r1, r2
 8006bbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006bc0:	d100      	bne.n	8006bc4 <memcpy+0xc>
 8006bc2:	4770      	bx	lr
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bce:	4291      	cmp	r1, r2
 8006bd0:	d1f9      	bne.n	8006bc6 <memcpy+0xe>
 8006bd2:	bd10      	pop	{r4, pc}

08006bd4 <memset>:
 8006bd4:	4402      	add	r2, r0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d100      	bne.n	8006bde <memset+0xa>
 8006bdc:	4770      	bx	lr
 8006bde:	f803 1b01 	strb.w	r1, [r3], #1
 8006be2:	e7f9      	b.n	8006bd8 <memset+0x4>

08006be4 <cleanup_glue>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	460c      	mov	r4, r1
 8006be8:	6809      	ldr	r1, [r1, #0]
 8006bea:	4605      	mov	r5, r0
 8006bec:	b109      	cbz	r1, 8006bf2 <cleanup_glue+0xe>
 8006bee:	f7ff fff9 	bl	8006be4 <cleanup_glue>
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bfa:	f000 b869 	b.w	8006cd0 <_free_r>
	...

08006c00 <_reclaim_reent>:
 8006c00:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <_reclaim_reent+0xb4>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4283      	cmp	r3, r0
 8006c06:	b570      	push	{r4, r5, r6, lr}
 8006c08:	4604      	mov	r4, r0
 8006c0a:	d051      	beq.n	8006cb0 <_reclaim_reent+0xb0>
 8006c0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c0e:	b143      	cbz	r3, 8006c22 <_reclaim_reent+0x22>
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d14a      	bne.n	8006cac <_reclaim_reent+0xac>
 8006c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c18:	6819      	ldr	r1, [r3, #0]
 8006c1a:	b111      	cbz	r1, 8006c22 <_reclaim_reent+0x22>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f000 f857 	bl	8006cd0 <_free_r>
 8006c22:	6961      	ldr	r1, [r4, #20]
 8006c24:	b111      	cbz	r1, 8006c2c <_reclaim_reent+0x2c>
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 f852 	bl	8006cd0 <_free_r>
 8006c2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c2e:	b111      	cbz	r1, 8006c36 <_reclaim_reent+0x36>
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 f84d 	bl	8006cd0 <_free_r>
 8006c36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c38:	b111      	cbz	r1, 8006c40 <_reclaim_reent+0x40>
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 f848 	bl	8006cd0 <_free_r>
 8006c40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c42:	b111      	cbz	r1, 8006c4a <_reclaim_reent+0x4a>
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 f843 	bl	8006cd0 <_free_r>
 8006c4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c4c:	b111      	cbz	r1, 8006c54 <_reclaim_reent+0x54>
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 f83e 	bl	8006cd0 <_free_r>
 8006c54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c56:	b111      	cbz	r1, 8006c5e <_reclaim_reent+0x5e>
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f000 f839 	bl	8006cd0 <_free_r>
 8006c5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c60:	b111      	cbz	r1, 8006c68 <_reclaim_reent+0x68>
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 f834 	bl	8006cd0 <_free_r>
 8006c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c6a:	b111      	cbz	r1, 8006c72 <_reclaim_reent+0x72>
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f000 f82f 	bl	8006cd0 <_free_r>
 8006c72:	69a3      	ldr	r3, [r4, #24]
 8006c74:	b1e3      	cbz	r3, 8006cb0 <_reclaim_reent+0xb0>
 8006c76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c78:	4620      	mov	r0, r4
 8006c7a:	4798      	blx	r3
 8006c7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c7e:	b1b9      	cbz	r1, 8006cb0 <_reclaim_reent+0xb0>
 8006c80:	4620      	mov	r0, r4
 8006c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c86:	f7ff bfad 	b.w	8006be4 <cleanup_glue>
 8006c8a:	5949      	ldr	r1, [r1, r5]
 8006c8c:	b941      	cbnz	r1, 8006ca0 <_reclaim_reent+0xa0>
 8006c8e:	3504      	adds	r5, #4
 8006c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c92:	2d80      	cmp	r5, #128	; 0x80
 8006c94:	68d9      	ldr	r1, [r3, #12]
 8006c96:	d1f8      	bne.n	8006c8a <_reclaim_reent+0x8a>
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 f819 	bl	8006cd0 <_free_r>
 8006c9e:	e7ba      	b.n	8006c16 <_reclaim_reent+0x16>
 8006ca0:	680e      	ldr	r6, [r1, #0]
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 f814 	bl	8006cd0 <_free_r>
 8006ca8:	4631      	mov	r1, r6
 8006caa:	e7ef      	b.n	8006c8c <_reclaim_reent+0x8c>
 8006cac:	2500      	movs	r5, #0
 8006cae:	e7ef      	b.n	8006c90 <_reclaim_reent+0x90>
 8006cb0:	bd70      	pop	{r4, r5, r6, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000014 	.word	0x20000014

08006cb8 <__malloc_lock>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	; (8006cc0 <__malloc_lock+0x8>)
 8006cba:	f7ff bf7b 	b.w	8006bb4 <__retarget_lock_acquire_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	20004bc4 	.word	0x20004bc4

08006cc4 <__malloc_unlock>:
 8006cc4:	4801      	ldr	r0, [pc, #4]	; (8006ccc <__malloc_unlock+0x8>)
 8006cc6:	f7ff bf76 	b.w	8006bb6 <__retarget_lock_release_recursive>
 8006cca:	bf00      	nop
 8006ccc:	20004bc4 	.word	0x20004bc4

08006cd0 <_free_r>:
 8006cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cd2:	2900      	cmp	r1, #0
 8006cd4:	d048      	beq.n	8006d68 <_free_r+0x98>
 8006cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cda:	9001      	str	r0, [sp, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f1a1 0404 	sub.w	r4, r1, #4
 8006ce2:	bfb8      	it	lt
 8006ce4:	18e4      	addlt	r4, r4, r3
 8006ce6:	f7ff ffe7 	bl	8006cb8 <__malloc_lock>
 8006cea:	4a20      	ldr	r2, [pc, #128]	; (8006d6c <_free_r+0x9c>)
 8006cec:	9801      	ldr	r0, [sp, #4]
 8006cee:	6813      	ldr	r3, [r2, #0]
 8006cf0:	4615      	mov	r5, r2
 8006cf2:	b933      	cbnz	r3, 8006d02 <_free_r+0x32>
 8006cf4:	6063      	str	r3, [r4, #4]
 8006cf6:	6014      	str	r4, [r2, #0]
 8006cf8:	b003      	add	sp, #12
 8006cfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cfe:	f7ff bfe1 	b.w	8006cc4 <__malloc_unlock>
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	d90b      	bls.n	8006d1e <_free_r+0x4e>
 8006d06:	6821      	ldr	r1, [r4, #0]
 8006d08:	1862      	adds	r2, r4, r1
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	bf04      	itt	eq
 8006d0e:	681a      	ldreq	r2, [r3, #0]
 8006d10:	685b      	ldreq	r3, [r3, #4]
 8006d12:	6063      	str	r3, [r4, #4]
 8006d14:	bf04      	itt	eq
 8006d16:	1852      	addeq	r2, r2, r1
 8006d18:	6022      	streq	r2, [r4, #0]
 8006d1a:	602c      	str	r4, [r5, #0]
 8006d1c:	e7ec      	b.n	8006cf8 <_free_r+0x28>
 8006d1e:	461a      	mov	r2, r3
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	b10b      	cbz	r3, 8006d28 <_free_r+0x58>
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	d9fa      	bls.n	8006d1e <_free_r+0x4e>
 8006d28:	6811      	ldr	r1, [r2, #0]
 8006d2a:	1855      	adds	r5, r2, r1
 8006d2c:	42a5      	cmp	r5, r4
 8006d2e:	d10b      	bne.n	8006d48 <_free_r+0x78>
 8006d30:	6824      	ldr	r4, [r4, #0]
 8006d32:	4421      	add	r1, r4
 8006d34:	1854      	adds	r4, r2, r1
 8006d36:	42a3      	cmp	r3, r4
 8006d38:	6011      	str	r1, [r2, #0]
 8006d3a:	d1dd      	bne.n	8006cf8 <_free_r+0x28>
 8006d3c:	681c      	ldr	r4, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	6053      	str	r3, [r2, #4]
 8006d42:	4421      	add	r1, r4
 8006d44:	6011      	str	r1, [r2, #0]
 8006d46:	e7d7      	b.n	8006cf8 <_free_r+0x28>
 8006d48:	d902      	bls.n	8006d50 <_free_r+0x80>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	6003      	str	r3, [r0, #0]
 8006d4e:	e7d3      	b.n	8006cf8 <_free_r+0x28>
 8006d50:	6825      	ldr	r5, [r4, #0]
 8006d52:	1961      	adds	r1, r4, r5
 8006d54:	428b      	cmp	r3, r1
 8006d56:	bf04      	itt	eq
 8006d58:	6819      	ldreq	r1, [r3, #0]
 8006d5a:	685b      	ldreq	r3, [r3, #4]
 8006d5c:	6063      	str	r3, [r4, #4]
 8006d5e:	bf04      	itt	eq
 8006d60:	1949      	addeq	r1, r1, r5
 8006d62:	6021      	streq	r1, [r4, #0]
 8006d64:	6054      	str	r4, [r2, #4]
 8006d66:	e7c7      	b.n	8006cf8 <_free_r+0x28>
 8006d68:	b003      	add	sp, #12
 8006d6a:	bd30      	pop	{r4, r5, pc}
 8006d6c:	20004a78 	.word	0x20004a78

08006d70 <_init>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	bf00      	nop
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr

08006d7c <_fini>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	bf00      	nop
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr
