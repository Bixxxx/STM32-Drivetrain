
Drivetrain_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ea0  08006ea0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea8  08006ea8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004b50  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004bc8  20004bc8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019dab  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003122  00000000  00000000  00039e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  0003cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001258  00000000  00000000  0003e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003955  00000000  00000000  0003f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148d7  00000000  00000000  00042eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e43fa  00000000  00000000  0005778c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013bb86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005588  00000000  00000000  0013bbdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006d90 	.word	0x08006d90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006d90 	.word	0x08006d90

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fcec 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f878 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f9b8 	bl	8000868 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004f8:	f000 f8e0 	bl	80006bc <MX_SPI1_Init>
  MX_TIM1_Init();
 80004fc:	f000 f914 	bl	8000728 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000500:	2108      	movs	r1, #8
 8000502:	482b      	ldr	r0, [pc, #172]	; (80005b0 <main+0xc8>)
 8000504:	f002 fb42 	bl	8002b8c <HAL_TIM_PWM_Start>
  HAL_Delay(10);
 8000508:	200a      	movs	r0, #10
 800050a:	f000 fd1f 	bl	8000f4c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2110      	movs	r1, #16
 8000512:	4828      	ldr	r0, [pc, #160]	; (80005b4 <main+0xcc>)
 8000514:	f000 ffcc 	bl	80014b0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000518:	200a      	movs	r0, #10
 800051a:	f000 fd17 	bl	8000f4c <HAL_Delay>
  // READ INITIAL ANGLE
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2110      	movs	r1, #16
 8000522:	4824      	ldr	r0, [pc, #144]	; (80005b4 <main+0xcc>)
 8000524:	f000 ffc4 	bl	80014b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SPI_tx[0], 2, 1);
 8000528:	2301      	movs	r3, #1
 800052a:	2202      	movs	r2, #2
 800052c:	4922      	ldr	r1, [pc, #136]	; (80005b8 <main+0xd0>)
 800052e:	4823      	ldr	r0, [pc, #140]	; (80005bc <main+0xd4>)
 8000530:	f001 fcf3 	bl	8001f1a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2110      	movs	r1, #16
 8000538:	481e      	ldr	r0, [pc, #120]	; (80005b4 <main+0xcc>)
 800053a:	f000 ffb9 	bl	80014b0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800053e:	200a      	movs	r0, #10
 8000540:	f000 fd04 	bl	8000f4c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2110      	movs	r1, #16
 8000548:	481a      	ldr	r0, [pc, #104]	; (80005b4 <main+0xcc>)
 800054a:	f000 ffb1 	bl	80014b0 <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&hspi1, &SPI_rx[0], 2, 1);
 800054e:	2301      	movs	r3, #1
 8000550:	2202      	movs	r2, #2
 8000552:	491b      	ldr	r1, [pc, #108]	; (80005c0 <main+0xd8>)
 8000554:	4819      	ldr	r0, [pc, #100]	; (80005bc <main+0xd4>)
 8000556:	f001 fe1c 	bl	8002192 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2110      	movs	r1, #16
 800055e:	4815      	ldr	r0, [pc, #84]	; (80005b4 <main+0xcc>)
 8000560:	f000 ffa6 	bl	80014b0 <HAL_GPIO_WritePin>
  INITIAL_ANGLE = (SPI_rx[0] << 8 | SPI_rx[1])&clearbits;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <main+0xd8>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	021b      	lsls	r3, r3, #8
 800056a:	b21a      	sxth	r2, r3
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <main+0xd8>)
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	b21b      	sxth	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b21a      	sxth	r2, r3
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <main+0xdc>)
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	b21b      	sxth	r3, r3
 800057c:	4013      	ands	r3, r2
 800057e:	b21b      	sxth	r3, r3
 8000580:	b29a      	uxth	r2, r3
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <main+0xe0>)
 8000584:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000586:	f003 fab9 	bl	8003afc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartEncoder */
  StartEncoderHandle = osThreadNew(ReadEncoder, NULL, &StartEncoder_attributes);
 800058a:	4a10      	ldr	r2, [pc, #64]	; (80005cc <main+0xe4>)
 800058c:	2100      	movs	r1, #0
 800058e:	4810      	ldr	r0, [pc, #64]	; (80005d0 <main+0xe8>)
 8000590:	f003 fafe 	bl	8003b90 <osThreadNew>
 8000594:	4603      	mov	r3, r0
 8000596:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <main+0xec>)
 8000598:	6013      	str	r3, [r2, #0]

  /* creation of StartStepper */
  StartStepperHandle = osThreadNew(ControlStepper, NULL, &StartStepper_attributes);
 800059a:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <main+0xf0>)
 800059c:	2100      	movs	r1, #0
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <main+0xf4>)
 80005a0:	f003 faf6 	bl	8003b90 <osThreadNew>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <main+0xf8>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005aa:	f003 facb 	bl	8003b44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <main+0xc6>
 80005b0:	20004a88 	.word	0x20004a88
 80005b4:	40020000 	.word	0x40020000
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20004ad4 	.word	0x20004ad4
 80005c0:	20004a7c 	.word	0x20004a7c
 80005c4:	20000002 	.word	0x20000002
 80005c8:	20000094 	.word	0x20000094
 80005cc:	08006de0 	.word	0x08006de0
 80005d0:	08000955 	.word	0x08000955
 80005d4:	20004ad0 	.word	0x20004ad0
 80005d8:	08006e04 	.word	0x08006e04
 80005dc:	08000a9d 	.word	0x08000a9d
 80005e0:	20004a84 	.word	0x20004a84

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f006 fafe 	bl	8006bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <SystemClock_Config+0xd0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd4>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800065c:	2350      	movs	r3, #80	; 0x50
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ff39 	bl	80014e4 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000678:	f000 fa9a 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f99a 	bl	80019d4 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a6:	f000 fa83 	bl	8000bb0 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2218      	movs	r2, #24
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f001 fb7b 	bl	8001e08 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 fa4a 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20004ad4 	.word	0x20004ad4
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b096      	sub	sp, #88	; 0x58
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2220      	movs	r2, #32
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fa47 	bl	8006bf4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000766:	4b3e      	ldr	r3, [pc, #248]	; (8000860 <MX_TIM1_Init+0x138>)
 8000768:	4a3e      	ldr	r2, [pc, #248]	; (8000864 <MX_TIM1_Init+0x13c>)
 800076a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800076c:	4b3c      	ldr	r3, [pc, #240]	; (8000860 <MX_TIM1_Init+0x138>)
 800076e:	2247      	movs	r2, #71	; 0x47
 8000770:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b3b      	ldr	r3, [pc, #236]	; (8000860 <MX_TIM1_Init+0x138>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000778:	4b39      	ldr	r3, [pc, #228]	; (8000860 <MX_TIM1_Init+0x138>)
 800077a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800077e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b37      	ldr	r3, [pc, #220]	; (8000860 <MX_TIM1_Init+0x138>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000786:	4b36      	ldr	r3, [pc, #216]	; (8000860 <MX_TIM1_Init+0x138>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b34      	ldr	r3, [pc, #208]	; (8000860 <MX_TIM1_Init+0x138>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000792:	4833      	ldr	r0, [pc, #204]	; (8000860 <MX_TIM1_Init+0x138>)
 8000794:	f002 f8e0 	bl	8002958 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800079e:	f000 fa07 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ac:	4619      	mov	r1, r3
 80007ae:	482c      	ldr	r0, [pc, #176]	; (8000860 <MX_TIM1_Init+0x138>)
 80007b0:	f002 fc7e 	bl	80030b0 <HAL_TIM_ConfigClockSource>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007ba:	f000 f9f9 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007be:	4828      	ldr	r0, [pc, #160]	; (8000860 <MX_TIM1_Init+0x138>)
 80007c0:	f002 f98a 	bl	8002ad8 <HAL_TIM_PWM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007ca:	f000 f9f1 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007da:	4619      	mov	r1, r3
 80007dc:	4820      	ldr	r0, [pc, #128]	; (8000860 <MX_TIM1_Init+0x138>)
 80007de:	f003 f867 	bl	80038b0 <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007e8:	f000 f9e2 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f8:	2300      	movs	r3, #0
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080c:	2208      	movs	r2, #8
 800080e:	4619      	mov	r1, r3
 8000810:	4813      	ldr	r0, [pc, #76]	; (8000860 <MX_TIM1_Init+0x138>)
 8000812:	f002 fb8b 	bl	8002f2c <HAL_TIM_PWM_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800081c:	f000 f9c8 	bl	8000bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <MX_TIM1_Init+0x138>)
 8000844:	f003 f8b0 	bl	80039a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800084e:	f000 f9af 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <MX_TIM1_Init+0x138>)
 8000854:	f000 fa48 	bl	8000ce8 <HAL_TIM_MspPostInit>

}
 8000858:	bf00      	nop
 800085a:	3758      	adds	r7, #88	; 0x58
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20004a88 	.word	0x20004a88
 8000864:	40010000 	.word	0x40010000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b31      	ldr	r3, [pc, #196]	; (8000948 <MX_GPIO_Init+0xe0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a30      	ldr	r2, [pc, #192]	; (8000948 <MX_GPIO_Init+0xe0>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <MX_GPIO_Init+0xe0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a29      	ldr	r2, [pc, #164]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b27      	ldr	r3, [pc, #156]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a22      	ldr	r2, [pc, #136]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_GPIO_Init+0xe0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2110      	movs	r1, #16
 80008f2:	4816      	ldr	r0, [pc, #88]	; (800094c <MX_GPIO_Init+0xe4>)
 80008f4:	f000 fddc 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fe:	4814      	ldr	r0, [pc, #80]	; (8000950 <MX_GPIO_Init+0xe8>)
 8000900:	f000 fdd6 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000904:	2310      	movs	r3, #16
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_GPIO_Init+0xe4>)
 800091c:	f000 fc1c 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_GPIO_Init+0xe8>)
 800093a:	f000 fc0d 	bl	8001158 <HAL_GPIO_Init>

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000
 8000950:	40021400 	.word	0x40021400

08000954 <ReadEncoder>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadEncoder */
void ReadEncoder(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2110      	movs	r1, #16
 8000960:	4840      	ldr	r0, [pc, #256]	; (8000a64 <ReadEncoder+0x110>)
 8000962:	f000 fda5 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPI_tx[0], 2, 1);
 8000966:	2301      	movs	r3, #1
 8000968:	2202      	movs	r2, #2
 800096a:	493f      	ldr	r1, [pc, #252]	; (8000a68 <ReadEncoder+0x114>)
 800096c:	483f      	ldr	r0, [pc, #252]	; (8000a6c <ReadEncoder+0x118>)
 800096e:	f001 fad4 	bl	8001f1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2110      	movs	r1, #16
 8000976:	483b      	ldr	r0, [pc, #236]	; (8000a64 <ReadEncoder+0x110>)
 8000978:	f000 fd9a 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800097c:	200a      	movs	r0, #10
 800097e:	f000 fae5 	bl	8000f4c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2110      	movs	r1, #16
 8000986:	4837      	ldr	r0, [pc, #220]	; (8000a64 <ReadEncoder+0x110>)
 8000988:	f000 fd92 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, &SPI_rx[0], 2, 1);
 800098c:	2301      	movs	r3, #1
 800098e:	2202      	movs	r2, #2
 8000990:	4937      	ldr	r1, [pc, #220]	; (8000a70 <ReadEncoder+0x11c>)
 8000992:	4836      	ldr	r0, [pc, #216]	; (8000a6c <ReadEncoder+0x118>)
 8000994:	f001 fbfd 	bl	8002192 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	4831      	ldr	r0, [pc, #196]	; (8000a64 <ReadEncoder+0x110>)
 800099e:	f000 fd87 	bl	80014b0 <HAL_GPIO_WritePin>

	ENCODER_ANGLE = (SPI_rx[0] << 8 | SPI_rx[1])&clearbits;
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <ReadEncoder+0x11c>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <ReadEncoder+0x11c>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <ReadEncoder+0x120>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4013      	ands	r3, r2
 80009bc:	b21b      	sxth	r3, r3
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <ReadEncoder+0x124>)
 80009c2:	801a      	strh	r2, [r3, #0]
	ENCODER_ANGLE = (ENCODER_ANGLE - INITIAL_ANGLE)&clearbits;
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <ReadEncoder+0x124>)
 80009c6:	881a      	ldrh	r2, [r3, #0]
 80009c8:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <ReadEncoder+0x128>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	b21a      	sxth	r2, r3
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <ReadEncoder+0x120>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4013      	ands	r3, r2
 80009da:	b21b      	sxth	r3, r3
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <ReadEncoder+0x124>)
 80009e0:	801a      	strh	r2, [r3, #0]
	ANGLE_DEGREE = ENCODER_ANGLE*ConvertToDegree;
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <ReadEncoder+0x124>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	ee07 3a90 	vmov	s15, r3
 80009ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ee:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000a80 <ReadEncoder+0x12c>
 80009f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <ReadEncoder+0x130>)
 80009f8:	edc3 7a00 	vstr	s15, [r3]

	if(ANGLE_DEGREE > 180){
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <ReadEncoder+0x130>)
 80009fe:	edd3 7a00 	vldr	s15, [r3]
 8000a02:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000a88 <ReadEncoder+0x134>
 8000a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0e:	dd09      	ble.n	8000a24 <ReadEncoder+0xd0>
		ANGLE_DEGREE = ANGLE_DEGREE - 360;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <ReadEncoder+0x130>)
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000a8c <ReadEncoder+0x138>
 8000a1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <ReadEncoder+0x130>)
 8000a20:	edc3 7a00 	vstr	s15, [r3]
	}
	ANGLE_ERROR = ANGLE_REF - ANGLE_DEGREE;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <ReadEncoder+0x13c>)
 8000a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a2a:	ee07 3a90 	vmov	s15, r3
 8000a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <ReadEncoder+0x130>)
 8000a34:	edd3 7a00 	vldr	s15, [r3]
 8000a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a40:	ee17 3a90 	vmov	r3, s15
 8000a44:	b21a      	sxth	r2, r3
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <ReadEncoder+0x140>)
 8000a48:	801a      	strh	r2, [r3, #0]
	thread1++;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <ReadEncoder+0x144>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <ReadEncoder+0x144>)
 8000a52:	6013      	str	r3, [r2, #0]
    osThreadFlagsWait(1U,osFlagsWaitAny, osWaitForever);
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f003 f978 	bl	8003d50 <osThreadFlagsWait>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a60:	e77c      	b.n	800095c <ReadEncoder+0x8>
 8000a62:	bf00      	nop
 8000a64:	40020000 	.word	0x40020000
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20004ad4 	.word	0x20004ad4
 8000a70:	20004a7c 	.word	0x20004a7c
 8000a74:	20000002 	.word	0x20000002
 8000a78:	20000096 	.word	0x20000096
 8000a7c:	20000094 	.word	0x20000094
 8000a80:	3cb402d0 	.word	0x3cb402d0
 8000a84:	20004a78 	.word	0x20004a78
 8000a88:	43340000 	.word	0x43340000
 8000a8c:	43b40000 	.word	0x43b40000
 8000a90:	20000098 	.word	0x20000098
 8000a94:	2000009a 	.word	0x2000009a
 8000a98:	2000009c 	.word	0x2000009c

08000a9c <ControlStepper>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlStepper */
void ControlStepper(void *argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlStepper */
  /* Infinite loop */
  for(;;)
  {
	//TODO: Change direction depending on Error sign
	ANGLE_ERROR = ANGLE_REF - ANGLE_DEGREE;
 8000aa4:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <ControlStepper+0xc8>)
 8000aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aaa:	ee07 3a90 	vmov	s15, r3
 8000aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <ControlStepper+0xcc>)
 8000ab4:	edd3 7a00 	vldr	s15, [r3]
 8000ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac0:	ee17 3a90 	vmov	r3, s15
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <ControlStepper+0xd0>)
 8000ac8:	801a      	strh	r2, [r3, #0]
	if (ANGLE_ERROR < 0){
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <ControlStepper+0xd0>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da06      	bge.n	8000ae2 <ControlStepper+0x46>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ada:	4825      	ldr	r0, [pc, #148]	; (8000b70 <ControlStepper+0xd4>)
 8000adc:	f000 fce8 	bl	80014b0 <HAL_GPIO_WritePin>
 8000ae0:	e005      	b.n	8000aee <ControlStepper+0x52>
	}
	else{
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae8:	4821      	ldr	r0, [pc, #132]	; (8000b70 <ControlStepper+0xd4>)
 8000aea:	f000 fce1 	bl	80014b0 <HAL_GPIO_WritePin>
	}
	ANGLE_ERROR = abs(ANGLE_ERROR);
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <ControlStepper+0xd0>)
 8000af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bfb8      	it	lt
 8000af8:	425b      	neglt	r3, r3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <ControlStepper+0xd0>)
 8000b00:	801a      	strh	r2, [r3, #0]
	//ARR inversely proportional to error
	PWM_PERIOD = 10*65535/(ANGLE_ERROR+1);
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <ControlStepper+0xd0>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <ControlStepper+0xd8>)
 8000b0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <ControlStepper+0xdc>)
 8000b14:	801a      	strh	r2, [r3, #0]
	PWM_DUTY_CYCLE = PWM_PERIOD/2;
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <ControlStepper+0xdc>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <ControlStepper+0xe0>)
 8000b20:	801a      	strh	r2, [r3, #0]
	if(ANGLE_ERROR < 2){
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <ControlStepper+0xd0>)
 8000b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	dc02      	bgt.n	8000b32 <ControlStepper+0x96>
		PWM_DUTY_CYCLE = 0;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <ControlStepper+0xe0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
		//TODO: CALL THRUST THREAD
	}
	TIM1->ARR  = PWM_PERIOD;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <ControlStepper+0xdc>)
 8000b34:	881a      	ldrh	r2, [r3, #0]
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <ControlStepper+0xe4>)
 8000b38:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR3 = PWM_DUTY_CYCLE;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <ControlStepper+0xe0>)
 8000b3c:	881a      	ldrh	r2, [r3, #0]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <ControlStepper+0xe4>)
 8000b40:	63da      	str	r2, [r3, #60]	; 0x3c

	osDelay(500U);
 8000b42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b46:	f003 f984 	bl	8003e52 <osDelay>
	thread2++;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <ControlStepper+0xe8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <ControlStepper+0xe8>)
 8000b52:	6013      	str	r3, [r2, #0]
	osThreadFlagsSet(StartEncoderHandle, 1U);
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <ControlStepper+0xec>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 f8aa 	bl	8003cb4 <osThreadFlagsSet>
	ANGLE_ERROR = ANGLE_REF - ANGLE_DEGREE;
 8000b60:	e7a0      	b.n	8000aa4 <ControlStepper+0x8>
 8000b62:	bf00      	nop
 8000b64:	20000098 	.word	0x20000098
 8000b68:	20004a78 	.word	0x20004a78
 8000b6c:	2000009a 	.word	0x2000009a
 8000b70:	40021400 	.word	0x40021400
 8000b74:	0009fff6 	.word	0x0009fff6
 8000b78:	20004a80 	.word	0x20004a80
 8000b7c:	20004a7e 	.word	0x20004a7e
 8000b80:	40010000 	.word	0x40010000
 8000b84:	200000a0 	.word	0x200000a0
 8000b88:	20004ad0 	.word	0x20004ad0

08000b8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9e:	f000 f9b5 	bl	8000f0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40001000 	.word	0x40001000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_MspInit+0x54>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <HAL_MspInit+0x54>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_MspInit+0x54>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_MspInit+0x54>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_MspInit+0x54>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_MspInit+0x54>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	f06f 0001 	mvn.w	r0, #1
 8000c02:	f000 fa7f 	bl	8001104 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_SPI_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12b      	bne.n	8000c8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_SPI_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c6e:	23e0      	movs	r3, #224	; 0xe0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_SPI_MspInit+0x8c>)
 8000c8a:	f000 fa65 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40013000 	.word	0x40013000
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_TIM_Base_MspInit+0x3c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10d      	bne.n	8000cd2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_TIM_Base_MspInit+0x40>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <HAL_TIM_Base_MspInit+0x40>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <HAL_TIM_Base_MspInit+0x40>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <HAL_TIM_MspPostInit+0x68>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d11e      	bne.n	8000d48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_TIM_MspPostInit+0x6c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <HAL_TIM_MspPostInit+0x6c>)
 8000d14:	f043 0310 	orr.w	r3, r3, #16
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_TIM_MspPostInit+0x6c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0310 	and.w	r3, r3, #16
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_TIM_MspPostInit+0x70>)
 8000d44:	f000 fa08 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40010000 	.word	0x40010000
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	2036      	movs	r0, #54	; 0x36
 8000d72:	f000 f9c7 	bl	8001104 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d76:	2036      	movs	r0, #54	; 0x36
 8000d78:	f000 f9e0 	bl	800113c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <HAL_InitTick+0xa4>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <HAL_InitTick+0xa4>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_InitTick+0xa4>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d98:	f107 0210 	add.w	r2, r7, #16
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 fffe 	bl	8001da4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000da8:	f000 ffe8 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8000dac:	4603      	mov	r3, r0
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db4:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <HAL_InitTick+0xa8>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	0c9b      	lsrs	r3, r3, #18
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_InitTick+0xac>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <HAL_InitTick+0xb0>)
 8000dc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_InitTick+0xac>)
 8000dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dcc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_InitTick+0xac>)
 8000dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_InitTick+0xac>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_InitTick+0xac>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <HAL_InitTick+0xac>)
 8000de2:	f001 fdb9 	bl	8002958 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d104      	bne.n	8000df6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <HAL_InitTick+0xac>)
 8000dee:	f001 fe03 	bl	80029f8 <HAL_TIM_Base_Start_IT>
 8000df2:	4603      	mov	r3, r0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3730      	adds	r7, #48	; 0x30
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	431bde83 	.word	0x431bde83
 8000e08:	20004b30 	.word	0x20004b30
 8000e0c:	40001000 	.word	0x40001000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM6_DAC_IRQHandler+0x10>)
 8000e42:	f001 ff6b 	bl	8002d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20004b30 	.word	0x20004b30

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:
 8000e82:	58d4      	ldr	r4, [r2, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:
 8000e88:	18c4      	adds	r4, r0, r3
 8000e8a:	428c      	cmp	r4, r1
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
 8000e92:	2300      	movs	r3, #0
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:
 8000e9a:	42a2      	cmp	r2, r4
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
 8000ea2:	f005 fe73 	bl	8006b8c <__libc_init_array>
 8000ea6:	f7ff fb1f 	bl	80004e8 <main>
 8000eaa:	4770      	bx	lr
 8000eac:	20030000 	.word	0x20030000
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000078 	.word	0x20000078
 8000eb8:	08006eb0 	.word	0x08006eb0
 8000ebc:	20000078 	.word	0x20000078
 8000ec0:	20004bc8 	.word	0x20004bc8

08000ec4 <ADC_IRQHandler>:
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f8fc 	bl	80010ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f7ff ff30 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fe5e 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000000c 	.word	0x2000000c
 8000f30:	20004b78 	.word	0x20004b78

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20004b78 	.word	0x20004b78

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffee 	bl	8000f34 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffde 	bl	8000f34 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000000c 	.word	0x2000000c

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff4c 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001116:	f7ff ff61 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 800111a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	6978      	ldr	r0, [r7, #20]
 8001122:	f7ff ffb1 	bl	8001088 <NVIC_EncodePriority>
 8001126:	4602      	mov	r2, r0
 8001128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff80 	bl	8001034 <__NVIC_SetPriority>
}
 8001134:	bf00      	nop
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff54 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e177      	b.n	8001464 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8166 	bne.w	800145e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80c0 	beq.w	800145e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_GPIO_Init+0x324>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a65      	ldr	r2, [pc, #404]	; (800147c <HAL_GPIO_Init+0x324>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b63      	ldr	r3, [pc, #396]	; (800147c <HAL_GPIO_Init+0x324>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a61      	ldr	r2, [pc, #388]	; (8001480 <HAL_GPIO_Init+0x328>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a58      	ldr	r2, [pc, #352]	; (8001484 <HAL_GPIO_Init+0x32c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d037      	beq.n	8001396 <HAL_GPIO_Init+0x23e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a57      	ldr	r2, [pc, #348]	; (8001488 <HAL_GPIO_Init+0x330>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d031      	beq.n	8001392 <HAL_GPIO_Init+0x23a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a56      	ldr	r2, [pc, #344]	; (800148c <HAL_GPIO_Init+0x334>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d02b      	beq.n	800138e <HAL_GPIO_Init+0x236>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a55      	ldr	r2, [pc, #340]	; (8001490 <HAL_GPIO_Init+0x338>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d025      	beq.n	800138a <HAL_GPIO_Init+0x232>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a54      	ldr	r2, [pc, #336]	; (8001494 <HAL_GPIO_Init+0x33c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01f      	beq.n	8001386 <HAL_GPIO_Init+0x22e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a53      	ldr	r2, [pc, #332]	; (8001498 <HAL_GPIO_Init+0x340>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x22a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_GPIO_Init+0x344>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x226>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a51      	ldr	r2, [pc, #324]	; (80014a0 <HAL_GPIO_Init+0x348>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x222>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a50      	ldr	r2, [pc, #320]	; (80014a4 <HAL_GPIO_Init+0x34c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x21e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x21a>
 800136e:	2309      	movs	r3, #9
 8001370:	e012      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001372:	230a      	movs	r3, #10
 8001374:	e010      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001376:	2308      	movs	r3, #8
 8001378:	e00e      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800137a:	2307      	movs	r3, #7
 800137c:	e00c      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800137e:	2306      	movs	r3, #6
 8001380:	e00a      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001382:	2305      	movs	r3, #5
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001386:	2304      	movs	r3, #4
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4935      	ldr	r1, [pc, #212]	; (8001480 <HAL_GPIO_Init+0x328>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <HAL_GPIO_Init+0x354>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013da:	4a34      	ldr	r2, [pc, #208]	; (80014ac <HAL_GPIO_Init+0x354>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <HAL_GPIO_Init+0x354>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001404:	4a29      	ldr	r2, [pc, #164]	; (80014ac <HAL_GPIO_Init+0x354>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <HAL_GPIO_Init+0x354>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142e:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <HAL_GPIO_Init+0x354>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_GPIO_Init+0x354>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <HAL_GPIO_Init+0x354>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f ae84 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40021400 	.word	0x40021400
 800149c:	40021800 	.word	0x40021800
 80014a0:	40021c00 	.word	0x40021c00
 80014a4:	40022000 	.word	0x40022000
 80014a8:	40022400 	.word	0x40022400
 80014ac:	40013c00 	.word	0x40013c00

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014cc:	e003      	b.n	80014d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	041a      	lsls	r2, r3, #16
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e264      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d075      	beq.n	80015ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001502:	4ba3      	ldr	r3, [pc, #652]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b04      	cmp	r3, #4
 800150c:	d00c      	beq.n	8001528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150e:	4ba0      	ldr	r3, [pc, #640]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001516:	2b08      	cmp	r3, #8
 8001518:	d112      	bne.n	8001540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800151a:	4b9d      	ldr	r3, [pc, #628]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001526:	d10b      	bne.n	8001540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	4b99      	ldr	r3, [pc, #612]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d05b      	beq.n	80015ec <HAL_RCC_OscConfig+0x108>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d157      	bne.n	80015ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e23f      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001548:	d106      	bne.n	8001558 <HAL_RCC_OscConfig+0x74>
 800154a:	4b91      	ldr	r3, [pc, #580]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a90      	ldr	r2, [pc, #576]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e01d      	b.n	8001594 <HAL_RCC_OscConfig+0xb0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x98>
 8001562:	4b8b      	ldr	r3, [pc, #556]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a8a      	ldr	r2, [pc, #552]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b88      	ldr	r3, [pc, #544]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a87      	ldr	r2, [pc, #540]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0xb0>
 800157c:	4b84      	ldr	r3, [pc, #528]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a83      	ldr	r2, [pc, #524]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b81      	ldr	r3, [pc, #516]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a80      	ldr	r2, [pc, #512]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 800158e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fcca 	bl	8000f34 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fcc6 	bl	8000f34 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e204      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	4b76      	ldr	r3, [pc, #472]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0xc0>
 80015c2:	e014      	b.n	80015ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fcb6 	bl	8000f34 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fcb2 	bl	8000f34 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e1f0      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	4b6c      	ldr	r3, [pc, #432]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0xe8>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d063      	beq.n	80016c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015fa:	4b65      	ldr	r3, [pc, #404]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001606:	4b62      	ldr	r3, [pc, #392]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800160e:	2b08      	cmp	r3, #8
 8001610:	d11c      	bne.n	800164c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001612:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d116      	bne.n	800164c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_RCC_OscConfig+0x152>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d001      	beq.n	8001636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e1c4      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001636:	4b56      	ldr	r3, [pc, #344]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4952      	ldr	r1, [pc, #328]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164a:	e03a      	b.n	80016c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d020      	beq.n	8001696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001654:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7ff fc6b 	bl	8000f34 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff fc67 	bl	8000f34 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1a5      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001680:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4940      	ldr	r1, [pc, #256]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]
 8001694:	e015      	b.n	80016c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_RCC_OscConfig+0x2b0>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff fc4a 	bl	8000f34 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a4:	f7ff fc46 	bl	8000f34 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e184      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d030      	beq.n	8001730 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d016      	beq.n	8001704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <HAL_RCC_OscConfig+0x2b4>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fc2a 	bl	8000f34 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff fc26 	bl	8000f34 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e164      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x200>
 8001702:	e015      	b.n	8001730 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_RCC_OscConfig+0x2b4>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170a:	f7ff fc13 	bl	8000f34 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff fc0f 	bl	8000f34 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e14d      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a0 	beq.w	800187e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10f      	bne.n	800176e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176a:	2301      	movs	r3, #1
 800176c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_OscConfig+0x2b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d121      	bne.n	80017be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_RCC_OscConfig+0x2b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_RCC_OscConfig+0x2b8>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001786:	f7ff fbd5 	bl	8000f34 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	e011      	b.n	80017b2 <HAL_RCC_OscConfig+0x2ce>
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	42470000 	.word	0x42470000
 8001798:	42470e80 	.word	0x42470e80
 800179c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a0:	f7ff fbc8 	bl	8000f34 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e106      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b2:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <HAL_RCC_OscConfig+0x4e4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d106      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2f0>
 80017c6:	4b81      	ldr	r3, [pc, #516]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	4a80      	ldr	r2, [pc, #512]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6713      	str	r3, [r2, #112]	; 0x70
 80017d2:	e01c      	b.n	800180e <HAL_RCC_OscConfig+0x32a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x312>
 80017dc:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e0:	4a7a      	ldr	r2, [pc, #488]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6713      	str	r3, [r2, #112]	; 0x70
 80017e8:	4b78      	ldr	r3, [pc, #480]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	4a77      	ldr	r2, [pc, #476]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6713      	str	r3, [r2, #112]	; 0x70
 80017f4:	e00b      	b.n	800180e <HAL_RCC_OscConfig+0x32a>
 80017f6:	4b75      	ldr	r3, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	4a74      	ldr	r2, [pc, #464]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6713      	str	r3, [r2, #112]	; 0x70
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 8001804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001806:	4a71      	ldr	r2, [pc, #452]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d015      	beq.n	8001842 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff fb8d 	bl	8000f34 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff fb89 	bl	8000f34 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e0c5      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001834:	4b65      	ldr	r3, [pc, #404]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ee      	beq.n	800181e <HAL_RCC_OscConfig+0x33a>
 8001840:	e014      	b.n	800186c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff fb77 	bl	8000f34 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff fb73 	bl	8000f34 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	; 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0af      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001860:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ee      	bne.n	800184a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d105      	bne.n	800187e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001872:	4b56      	ldr	r3, [pc, #344]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a55      	ldr	r2, [pc, #340]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 809b 	beq.w	80019be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001888:	4b50      	ldr	r3, [pc, #320]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d05c      	beq.n	800194e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d141      	bne.n	8001920 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189c:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <HAL_RCC_OscConfig+0x4ec>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fb47 	bl	8000f34 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff fb43 	bl	8000f34 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e081      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018bc:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69da      	ldr	r2, [r3, #28]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	019b      	lsls	r3, r3, #6
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	061b      	lsls	r3, r3, #24
 80018ec:	4937      	ldr	r1, [pc, #220]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f2:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <HAL_RCC_OscConfig+0x4ec>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb1c 	bl	8000f34 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fb18 	bl	8000f34 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e056      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x41c>
 800191e:	e04e      	b.n	80019be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCC_OscConfig+0x4ec>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fb05 	bl	8000f34 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fb01 	bl	8000f34 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e03f      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x44a>
 800194c:	e037      	b.n	80019be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e032      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <HAL_RCC_OscConfig+0x4e8>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d028      	beq.n	80019ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d121      	bne.n	80019ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d11a      	bne.n	80019ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800198a:	4013      	ands	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001990:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001992:	4293      	cmp	r3, r2
 8001994:	d111      	bne.n	80019ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	085b      	lsrs	r3, r3, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40007000 	.word	0x40007000
 80019cc:	40023800 	.word	0x40023800
 80019d0:	42470060 	.word	0x42470060

080019d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0cc      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d90c      	bls.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0b8      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a40:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a52      	ldr	r2, [pc, #328]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	494d      	ldr	r1, [pc, #308]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d044      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d119      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e07f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e06f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e067      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4934      	ldr	r1, [pc, #208]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff fa36 	bl	8000f34 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff fa32 	bl	8000f34 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e04f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d20c      	bcs.n	8001b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e032      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4916      	ldr	r1, [pc, #88]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	490e      	ldr	r1, [pc, #56]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b5a:	f000 f821 	bl	8001ba0 <HAL_RCC_GetSysClockFreq>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	490a      	ldr	r1, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	5ccb      	ldrb	r3, [r1, r3]
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f8ee 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00
 8001b90:	40023800 	.word	0x40023800
 8001b94:	08006e28 	.word	0x08006e28
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bb8:	4b67      	ldr	r3, [pc, #412]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d00d      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	f200 80bd 	bhi.w	8001d44 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d003      	beq.n	8001bda <HAL_RCC_GetSysClockFreq+0x3a>
 8001bd2:	e0b7      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bd4:	4b61      	ldr	r3, [pc, #388]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bd6:	60bb      	str	r3, [r7, #8]
       break;
 8001bd8:	e0b7      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bda:	4b61      	ldr	r3, [pc, #388]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001bdc:	60bb      	str	r3, [r7, #8]
      break;
 8001bde:	e0b4      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be0:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001be8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bea:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d04d      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf6:	4b58      	ldr	r3, [pc, #352]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	099b      	lsrs	r3, r3, #6
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c06:	f04f 0100 	mov.w	r1, #0
 8001c0a:	ea02 0800 	and.w	r8, r2, r0
 8001c0e:	ea03 0901 	and.w	r9, r3, r1
 8001c12:	4640      	mov	r0, r8
 8001c14:	4649      	mov	r1, r9
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	014b      	lsls	r3, r1, #5
 8001c20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c24:	0142      	lsls	r2, r0, #5
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	ebb0 0008 	subs.w	r0, r0, r8
 8001c2e:	eb61 0109 	sbc.w	r1, r1, r9
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	018b      	lsls	r3, r1, #6
 8001c3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c40:	0182      	lsls	r2, r0, #6
 8001c42:	1a12      	subs	r2, r2, r0
 8001c44:	eb63 0301 	sbc.w	r3, r3, r1
 8001c48:	f04f 0000 	mov.w	r0, #0
 8001c4c:	f04f 0100 	mov.w	r1, #0
 8001c50:	00d9      	lsls	r1, r3, #3
 8001c52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c56:	00d0      	lsls	r0, r2, #3
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	eb12 0208 	adds.w	r2, r2, r8
 8001c60:	eb43 0309 	adc.w	r3, r3, r9
 8001c64:	f04f 0000 	mov.w	r0, #0
 8001c68:	f04f 0100 	mov.w	r1, #0
 8001c6c:	0259      	lsls	r1, r3, #9
 8001c6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c72:	0250      	lsls	r0, r2, #9
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	f7fe fab4 	bl	80001f0 <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e04a      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c92:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	099b      	lsrs	r3, r3, #6
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ca2:	f04f 0100 	mov.w	r1, #0
 8001ca6:	ea02 0400 	and.w	r4, r2, r0
 8001caa:	ea03 0501 	and.w	r5, r3, r1
 8001cae:	4620      	mov	r0, r4
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	014b      	lsls	r3, r1, #5
 8001cbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cc0:	0142      	lsls	r2, r0, #5
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	1b00      	subs	r0, r0, r4
 8001cc8:	eb61 0105 	sbc.w	r1, r1, r5
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	018b      	lsls	r3, r1, #6
 8001cd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cda:	0182      	lsls	r2, r0, #6
 8001cdc:	1a12      	subs	r2, r2, r0
 8001cde:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	f04f 0100 	mov.w	r1, #0
 8001cea:	00d9      	lsls	r1, r3, #3
 8001cec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cf0:	00d0      	lsls	r0, r2, #3
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	1912      	adds	r2, r2, r4
 8001cf8:	eb45 0303 	adc.w	r3, r5, r3
 8001cfc:	f04f 0000 	mov.w	r0, #0
 8001d00:	f04f 0100 	mov.w	r1, #0
 8001d04:	0299      	lsls	r1, r3, #10
 8001d06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d0a:	0290      	lsls	r0, r2, #10
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	461a      	mov	r2, r3
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	f7fe fa68 	bl	80001f0 <__aeabi_uldivmod>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4613      	mov	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	3301      	adds	r3, #1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	60bb      	str	r3, [r7, #8]
      break;
 8001d42:	e002      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d46:	60bb      	str	r3, [r7, #8]
      break;
 8001d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	007a1200 	.word	0x007a1200

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d80:	f7ff fff0 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0a9b      	lsrs	r3, r3, #10
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4903      	ldr	r1, [pc, #12]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	08006e38 	.word	0x08006e38

08001da4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	220f      	movs	r2, #15
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_RCC_GetClockConfig+0x5c>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_RCC_GetClockConfig+0x60>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 020f 	and.w	r2, r3, #15
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	601a      	str	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e07b      	b.n	8001f12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d108      	bne.n	8001e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e2a:	d009      	beq.n	8001e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
 8001e32:	e005      	b.n	8001e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe feda 	bl	8000c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	ea42 0103 	orr.w	r1, r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	f003 0104 	and.w	r1, r3, #4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	f003 0210 	and.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69da      	ldr	r2, [r3, #28]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_SPI_Transmit+0x22>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e126      	b.n	800218a <HAL_SPI_Transmit+0x270>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f44:	f7fe fff6 	bl	8000f34 <HAL_GetTick>
 8001f48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d002      	beq.n	8001f60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f5e:	e10b      	b.n	8002178 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_SPI_Transmit+0x52>
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f70:	e102      	b.n	8002178 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2203      	movs	r2, #3
 8001f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	88fa      	ldrh	r2, [r7, #6]
 8001f8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb8:	d10f      	bne.n	8001fda <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe4:	2b40      	cmp	r3, #64	; 0x40
 8001fe6:	d007      	beq.n	8001ff8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002000:	d14b      	bne.n	800209a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_SPI_Transmit+0xf6>
 800200a:	8afb      	ldrh	r3, [r7, #22]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d13e      	bne.n	800208e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	881a      	ldrh	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	1c9a      	adds	r2, r3, #2
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002034:	e02b      	b.n	800208e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b02      	cmp	r3, #2
 8002042:	d112      	bne.n	800206a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	881a      	ldrh	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	1c9a      	adds	r2, r3, #2
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	86da      	strh	r2, [r3, #54]	; 0x36
 8002068:	e011      	b.n	800208e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800206a:	f7fe ff63 	bl	8000f34 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d803      	bhi.n	8002082 <HAL_SPI_Transmit+0x168>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002080:	d102      	bne.n	8002088 <HAL_SPI_Transmit+0x16e>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800208c:	e074      	b.n	8002178 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ce      	bne.n	8002036 <HAL_SPI_Transmit+0x11c>
 8002098:	e04c      	b.n	8002134 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <HAL_SPI_Transmit+0x18e>
 80020a2:	8afb      	ldrh	r3, [r7, #22]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d140      	bne.n	800212a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	330c      	adds	r3, #12
 80020b2:	7812      	ldrb	r2, [r2, #0]
 80020b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020ce:	e02c      	b.n	800212a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d113      	bne.n	8002106 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	330c      	adds	r3, #12
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	86da      	strh	r2, [r3, #54]	; 0x36
 8002104:	e011      	b.n	800212a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002106:	f7fe ff15 	bl	8000f34 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d803      	bhi.n	800211e <HAL_SPI_Transmit+0x204>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800211c:	d102      	bne.n	8002124 <HAL_SPI_Transmit+0x20a>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002128:	e026      	b.n	8002178 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1cd      	bne.n	80020d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	6839      	ldr	r1, [r7, #0]
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fbcb 	bl	80028d4 <SPI_EndRxTxTransaction>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	77fb      	strb	r3, [r7, #31]
 8002174:	e000      	b.n	8002178 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002176:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002188:	7ffb      	ldrb	r3, [r7, #31]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b088      	sub	sp, #32
 8002196:	af02      	add	r7, sp, #8
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ae:	d112      	bne.n	80021d6 <HAL_SPI_Receive+0x44>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10e      	bne.n	80021d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2204      	movs	r2, #4
 80021bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021c0:	88fa      	ldrh	r2, [r7, #6]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	4613      	mov	r3, r2
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f8f1 	bl	80023b4 <HAL_SPI_TransmitReceive>
 80021d2:	4603      	mov	r3, r0
 80021d4:	e0ea      	b.n	80023ac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_SPI_Receive+0x52>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0e3      	b.n	80023ac <HAL_SPI_Receive+0x21a>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021ec:	f7fe fea2 	bl	8000f34 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d002      	beq.n	8002204 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80021fe:	2302      	movs	r3, #2
 8002200:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002202:	e0ca      	b.n	800239a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_SPI_Receive+0x7e>
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002214:	e0c1      	b.n	800239a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2204      	movs	r2, #4
 800221a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	88fa      	ldrh	r2, [r7, #6]
 800222e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	88fa      	ldrh	r2, [r7, #6]
 8002234:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800225c:	d10f      	bne.n	800227e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800226c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b40      	cmp	r3, #64	; 0x40
 800228a:	d007      	beq.n	800229c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800229a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d162      	bne.n	800236a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022a4:	e02e      	b.n	8002304 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d115      	bne.n	80022e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f103 020c 	add.w	r2, r3, #12
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022de:	e011      	b.n	8002304 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022e0:	f7fe fe28 	bl	8000f34 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d803      	bhi.n	80022f8 <HAL_SPI_Receive+0x166>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f6:	d102      	bne.n	80022fe <HAL_SPI_Receive+0x16c>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002302:	e04a      	b.n	800239a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1cb      	bne.n	80022a6 <HAL_SPI_Receive+0x114>
 800230e:	e031      	b.n	8002374 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d113      	bne.n	8002346 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	b292      	uxth	r2, r2
 800232a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	1c9a      	adds	r2, r3, #2
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002344:	e011      	b.n	800236a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002346:	f7fe fdf5 	bl	8000f34 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d803      	bhi.n	800235e <HAL_SPI_Receive+0x1cc>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800235c:	d102      	bne.n	8002364 <HAL_SPI_Receive+0x1d2>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002368:	e017      	b.n	800239a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1cd      	bne.n	8002310 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	6839      	ldr	r1, [r7, #0]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fa45 	bl	8002808 <SPI_EndRxTransaction>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
 8002396:	e000      	b.n	800239a <HAL_SPI_Receive+0x208>
  }

error :
 8002398:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	; 0x30
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023c2:	2301      	movs	r3, #1
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_SPI_TransmitReceive+0x26>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e18a      	b.n	80026f0 <HAL_SPI_TransmitReceive+0x33c>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023e2:	f7fe fda7 	bl	8000f34 <HAL_GetTick>
 80023e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002400:	2b01      	cmp	r3, #1
 8002402:	d00f      	beq.n	8002424 <HAL_SPI_TransmitReceive+0x70>
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800240a:	d107      	bne.n	800241c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d103      	bne.n	800241c <HAL_SPI_TransmitReceive+0x68>
 8002414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002418:	2b04      	cmp	r3, #4
 800241a:	d003      	beq.n	8002424 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800241c:	2302      	movs	r3, #2
 800241e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002422:	e15b      	b.n	80026dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_SPI_TransmitReceive+0x82>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_SPI_TransmitReceive+0x82>
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800243c:	e14e      	b.n	80026dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b04      	cmp	r3, #4
 8002448:	d003      	beq.n	8002452 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2205      	movs	r2, #5
 800244e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	887a      	ldrh	r2, [r7, #2]
 8002462:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	887a      	ldrh	r2, [r7, #2]
 800247a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	d007      	beq.n	80024a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ae:	d178      	bne.n	80025a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_SPI_TransmitReceive+0x10a>
 80024b8:	8b7b      	ldrh	r3, [r7, #26]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d166      	bne.n	800258c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	881a      	ldrh	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	1c9a      	adds	r2, r3, #2
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e2:	e053      	b.n	800258c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d11b      	bne.n	800252a <HAL_SPI_TransmitReceive+0x176>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d016      	beq.n	800252a <HAL_SPI_TransmitReceive+0x176>
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d113      	bne.n	800252a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	881a      	ldrh	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	1c9a      	adds	r2, r3, #2
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d119      	bne.n	800256c <HAL_SPI_TransmitReceive+0x1b8>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d014      	beq.n	800256c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	b292      	uxth	r2, r2
 800254e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	1c9a      	adds	r2, r3, #2
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002568:	2301      	movs	r3, #1
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800256c:	f7fe fce2 	bl	8000f34 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002578:	429a      	cmp	r2, r3
 800257a:	d807      	bhi.n	800258c <HAL_SPI_TransmitReceive+0x1d8>
 800257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002582:	d003      	beq.n	800258c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800258a:	e0a7      	b.n	80026dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1a6      	bne.n	80024e4 <HAL_SPI_TransmitReceive+0x130>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1a1      	bne.n	80024e4 <HAL_SPI_TransmitReceive+0x130>
 80025a0:	e07c      	b.n	800269c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_SPI_TransmitReceive+0x1fc>
 80025aa:	8b7b      	ldrh	r3, [r7, #26]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d16b      	bne.n	8002688 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025d6:	e057      	b.n	8002688 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d11c      	bne.n	8002620 <HAL_SPI_TransmitReceive+0x26c>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d017      	beq.n	8002620 <HAL_SPI_TransmitReceive+0x26c>
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d114      	bne.n	8002620 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	330c      	adds	r3, #12
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d119      	bne.n	8002662 <HAL_SPI_TransmitReceive+0x2ae>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d014      	beq.n	8002662 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800265e:	2301      	movs	r3, #1
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002662:	f7fe fc67 	bl	8000f34 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800266e:	429a      	cmp	r2, r3
 8002670:	d803      	bhi.n	800267a <HAL_SPI_TransmitReceive+0x2c6>
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002678:	d102      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x2cc>
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	2b00      	cmp	r3, #0
 800267e:	d103      	bne.n	8002688 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002686:	e029      	b.n	80026dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1a2      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x224>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d19d      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800269c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f917 	bl	80028d4 <SPI_EndRxTxTransaction>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026b8:	e010      	b.n	80026dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10b      	bne.n	80026da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	e000      	b.n	80026dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3730      	adds	r7, #48	; 0x30
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002708:	f7fe fc14 	bl	8000f34 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	4413      	add	r3, r2
 8002716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002718:	f7fe fc0c 	bl	8000f34 <HAL_GetTick>
 800271c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800271e:	4b39      	ldr	r3, [pc, #228]	; (8002804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	015b      	lsls	r3, r3, #5
 8002724:	0d1b      	lsrs	r3, r3, #20
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800272e:	e054      	b.n	80027da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002736:	d050      	beq.n	80027da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002738:	f7fe fbfc 	bl	8000f34 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	429a      	cmp	r2, r3
 8002746:	d902      	bls.n	800274e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d13d      	bne.n	80027ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800275c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002766:	d111      	bne.n	800278c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002770:	d004      	beq.n	800277c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277a:	d107      	bne.n	800278c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800278a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002794:	d10f      	bne.n	80027b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e017      	b.n	80027fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4013      	ands	r3, r2
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d19b      	bne.n	8002730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000004 	.word	0x20000004

08002808 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800281c:	d111      	bne.n	8002842 <SPI_EndRxTransaction+0x3a>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002826:	d004      	beq.n	8002832 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002830:	d107      	bne.n	8002842 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800284a:	d12a      	bne.n	80028a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002854:	d012      	beq.n	800287c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2200      	movs	r2, #0
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff ff49 	bl	80026f8 <SPI_WaitFlagStateUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d02d      	beq.n	80028c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e026      	b.n	80028ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	2101      	movs	r1, #1
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff ff36 	bl	80026f8 <SPI_WaitFlagStateUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01a      	beq.n	80028c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	f043 0220 	orr.w	r2, r3, #32
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e013      	b.n	80028ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2101      	movs	r1, #1
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff ff23 	bl	80026f8 <SPI_WaitFlagStateUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e000      	b.n	80028ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <SPI_EndRxTxTransaction+0x7c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <SPI_EndRxTxTransaction+0x80>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0d5b      	lsrs	r3, r3, #21
 80028ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028fe:	d112      	bne.n	8002926 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2200      	movs	r2, #0
 8002908:	2180      	movs	r1, #128	; 0x80
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff fef4 	bl	80026f8 <SPI_WaitFlagStateUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d016      	beq.n	8002944 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f043 0220 	orr.w	r2, r3, #32
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e00f      	b.n	8002946 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3b01      	subs	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d0f2      	beq.n	8002926 <SPI_EndRxTxTransaction+0x52>
 8002940:	e000      	b.n	8002944 <SPI_EndRxTxTransaction+0x70>
        break;
 8002942:	bf00      	nop
  }

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000004 	.word	0x20000004
 8002954:	165e9f81 	.word	0x165e9f81

08002958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e041      	b.n	80029ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe f990 	bl	8000ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f000 fc7a 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d001      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e04e      	b.n	8002aae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a23      	ldr	r2, [pc, #140]	; (8002abc <HAL_TIM_Base_Start_IT+0xc4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d022      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3a:	d01d      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d018      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d013      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00e      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <HAL_TIM_Base_Start_IT+0xd4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d009      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d004      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d111      	bne.n	8002a9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d010      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0201 	orr.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9a:	e007      	b.n	8002aac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40000c00 	.word	0x40000c00
 8002acc:	40010400 	.word	0x40010400
 8002ad0:	40014000 	.word	0x40014000
 8002ad4:	40001800 	.word	0x40001800

08002ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e041      	b.n	8002b6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f839 	bl	8002b76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f000 fbba 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_TIM_PWM_Start+0x24>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e022      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x6a>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d109      	bne.n	8002bca <HAL_TIM_PWM_Start+0x3e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	e015      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x6a>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d109      	bne.n	8002be4 <HAL_TIM_PWM_Start+0x58>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e008      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x6a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07c      	b.n	8002cf8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_PWM_Start+0x82>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0c:	e013      	b.n	8002c36 <HAL_TIM_PWM_Start+0xaa>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PWM_Start+0x92>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	e00b      	b.n	8002c36 <HAL_TIM_PWM_Start+0xaa>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_PWM_Start+0xa2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c2c:	e003      	b.n	8002c36 <HAL_TIM_PWM_Start+0xaa>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fe10 	bl	8003864 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_TIM_PWM_Start+0x174>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_TIM_PWM_Start+0xcc>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <HAL_TIM_PWM_Start+0x178>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_TIM_PWM_Start+0xd0>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_TIM_PWM_Start+0xd2>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <HAL_TIM_PWM_Start+0x174>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d022      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x136>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d01d      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x136>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <HAL_TIM_PWM_Start+0x17c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d018      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x136>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_TIM_PWM_Start+0x180>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x136>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_TIM_PWM_Start+0x184>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00e      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x136>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <HAL_TIM_PWM_Start+0x178>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d009      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x136>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <HAL_TIM_PWM_Start+0x188>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d004      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0x136>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_TIM_PWM_Start+0x18c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d111      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b06      	cmp	r3, #6
 8002cd2:	d010      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce4:	e007      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40010400 	.word	0x40010400
 8002d08:	40000400 	.word	0x40000400
 8002d0c:	40000800 	.word	0x40000800
 8002d10:	40000c00 	.word	0x40000c00
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40001800 	.word	0x40001800

08002d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0202 	mvn.w	r2, #2
 8002d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa77 	bl	8003252 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa69 	bl	800323e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fa7a 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0204 	mvn.w	r2, #4
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa4d 	bl	8003252 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa3f 	bl	800323e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fa50 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0208 	mvn.w	r2, #8
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2204      	movs	r2, #4
 8002df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa23 	bl	8003252 <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa15 	bl	800323e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fa26 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0210 	mvn.w	r2, #16
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f9f9 	bl	8003252 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f9eb 	bl	800323e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f9fc 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0201 	mvn.w	r2, #1
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fe76 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b80      	cmp	r3, #128	; 0x80
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fdca 	bl	8003a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f9c1 	bl	800327a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0220 	mvn.w	r2, #32
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fd94 	bl	8003a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0ae      	b.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	f200 809f 	bhi.w	8003098 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08003099 	.word	0x08003099
 8002f68:	08003099 	.word	0x08003099
 8002f6c:	08003099 	.word	0x08003099
 8002f70:	08002fd5 	.word	0x08002fd5
 8002f74:	08003099 	.word	0x08003099
 8002f78:	08003099 	.word	0x08003099
 8002f7c:	08003099 	.word	0x08003099
 8002f80:	08003017 	.word	0x08003017
 8002f84:	08003099 	.word	0x08003099
 8002f88:	08003099 	.word	0x08003099
 8002f8c:	08003099 	.word	0x08003099
 8002f90:	08003057 	.word	0x08003057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fa18 	bl	80033d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0208 	orr.w	r2, r2, #8
 8002fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6999      	ldr	r1, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	619a      	str	r2, [r3, #24]
      break;
 8002fd2:	e064      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fa68 	bl	80034b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6999      	ldr	r1, [r3, #24]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	021a      	lsls	r2, r3, #8
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	619a      	str	r2, [r3, #24]
      break;
 8003014:	e043      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fabd 	bl	800359c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0208 	orr.w	r2, r2, #8
 8003030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0204 	bic.w	r2, r2, #4
 8003040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69d9      	ldr	r1, [r3, #28]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
      break;
 8003054:	e023      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fb11 	bl	8003684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69d9      	ldr	r1, [r3, #28]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	021a      	lsls	r2, r3, #8
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	61da      	str	r2, [r3, #28]
      break;
 8003096:	e002      	b.n	800309e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	75fb      	strb	r3, [r7, #23]
      break;
 800309c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_TIM_ConfigClockSource+0x1c>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e0b4      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x186>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	d03e      	beq.n	8003184 <HAL_TIM_ConfigClockSource+0xd4>
 8003106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310a:	f200 8087 	bhi.w	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003112:	f000 8086 	beq.w	8003222 <HAL_TIM_ConfigClockSource+0x172>
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	d87f      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b70      	cmp	r3, #112	; 0x70
 800311e:	d01a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0xa6>
 8003120:	2b70      	cmp	r3, #112	; 0x70
 8003122:	d87b      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b60      	cmp	r3, #96	; 0x60
 8003126:	d050      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x11a>
 8003128:	2b60      	cmp	r3, #96	; 0x60
 800312a:	d877      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b50      	cmp	r3, #80	; 0x50
 800312e:	d03c      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0xfa>
 8003130:	2b50      	cmp	r3, #80	; 0x50
 8003132:	d873      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d058      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x13a>
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d86f      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b30      	cmp	r3, #48	; 0x30
 800313e:	d064      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003140:	2b30      	cmp	r3, #48	; 0x30
 8003142:	d86b      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b20      	cmp	r3, #32
 8003146:	d060      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d867      	bhi.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d05c      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	2b10      	cmp	r3, #16
 8003152:	d05a      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	e062      	b.n	800321c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f000 fb5d 	bl	8003824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	609a      	str	r2, [r3, #8]
      break;
 8003182:	e04f      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f000 fb46 	bl	8003824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a6:	609a      	str	r2, [r3, #8]
      break;
 80031a8:	e03c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f000 faba 	bl	8003730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2150      	movs	r1, #80	; 0x50
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fb13 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 80031c8:	e02c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	461a      	mov	r2, r3
 80031d8:	f000 fad9 	bl	800378e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2160      	movs	r1, #96	; 0x60
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fb03 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 80031e8:	e01c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f000 fa9a 	bl	8003730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2140      	movs	r1, #64	; 0x40
 8003202:	4618      	mov	r0, r3
 8003204:	f000 faf3 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 8003208:	e00c      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f000 faea 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 800321a:	e003      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e000      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d00f      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3d      	ldr	r2, [pc, #244]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3c      	ldr	r2, [pc, #240]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d027      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d023      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d017      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <TIM_Base_SetConfig+0x128>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a27      	ldr	r2, [pc, #156]	; (80033bc <TIM_Base_SetConfig+0x12c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <TIM_Base_SetConfig+0x130>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <TIM_Base_SetConfig+0x134>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <TIM_Base_SetConfig+0x138>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a23      	ldr	r2, [pc, #140]	; (80033cc <TIM_Base_SetConfig+0x13c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0xf8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40010400 	.word	0x40010400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800
 80033c4:	40001800 	.word	0x40001800
 80033c8:	40001c00 	.word	0x40001c00
 80033cc:	40002000 	.word	0x40002000

080033d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f023 0302 	bic.w	r3, r3, #2
 8003418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <TIM_OC1_SetConfig+0xd8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_OC1_SetConfig+0x64>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <TIM_OC1_SetConfig+0xdc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10c      	bne.n	800344e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0308 	bic.w	r3, r3, #8
 800343a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <TIM_OC1_SetConfig+0xd8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d003      	beq.n	800345e <TIM_OC1_SetConfig+0x8e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <TIM_OC1_SetConfig+0xdc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d111      	bne.n	8003482 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800346c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	621a      	str	r2, [r3, #32]
}
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40010400 	.word	0x40010400

080034b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0210 	bic.w	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0320 	bic.w	r3, r3, #32
 80034fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <TIM_OC2_SetConfig+0xe4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_OC2_SetConfig+0x68>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a21      	ldr	r2, [pc, #132]	; (8003598 <TIM_OC2_SetConfig+0xe8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d10d      	bne.n	8003534 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <TIM_OC2_SetConfig+0xe4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_OC2_SetConfig+0x94>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a16      	ldr	r2, [pc, #88]	; (8003598 <TIM_OC2_SetConfig+0xe8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d113      	bne.n	800356c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800354a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40010400 	.word	0x40010400

0800359c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a21      	ldr	r2, [pc, #132]	; (800367c <TIM_OC3_SetConfig+0xe0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d003      	beq.n	8003602 <TIM_OC3_SetConfig+0x66>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a20      	ldr	r2, [pc, #128]	; (8003680 <TIM_OC3_SetConfig+0xe4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10d      	bne.n	800361e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800361c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a16      	ldr	r2, [pc, #88]	; (800367c <TIM_OC3_SetConfig+0xe0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_OC3_SetConfig+0x92>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a15      	ldr	r2, [pc, #84]	; (8003680 <TIM_OC3_SetConfig+0xe4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d113      	bne.n	8003656 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	621a      	str	r2, [r3, #32]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40010000 	.word	0x40010000
 8003680:	40010400 	.word	0x40010400

08003684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	031b      	lsls	r3, r3, #12
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <TIM_OC4_SetConfig+0xa4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_OC4_SetConfig+0x68>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a11      	ldr	r2, [pc, #68]	; (800372c <TIM_OC4_SetConfig+0xa8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d109      	bne.n	8003700 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40010400 	.word	0x40010400

08003730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f023 030a 	bic.w	r3, r3, #10
 800376c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800378e:	b480      	push	{r7}
 8003790:	b087      	sub	sp, #28
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f023 0210 	bic.w	r2, r3, #16
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	031b      	lsls	r3, r3, #12
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	621a      	str	r2, [r3, #32]
}
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b085      	sub	sp, #20
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	f043 0307 	orr.w	r3, r3, #7
 8003810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	609a      	str	r2, [r3, #8]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800383e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	021a      	lsls	r2, r3, #8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	431a      	orrs	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4313      	orrs	r3, r2
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	609a      	str	r2, [r3, #8]
}
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2201      	movs	r2, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	43db      	mvns	r3, r3
 8003886:	401a      	ands	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a1a      	ldr	r2, [r3, #32]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	431a      	orrs	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e05a      	b.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a21      	ldr	r2, [pc, #132]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d022      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003914:	d01d      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d018      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1a      	ldr	r2, [pc, #104]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a18      	ldr	r2, [pc, #96]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d009      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a17      	ldr	r2, [pc, #92]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d10c      	bne.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40010000 	.word	0x40010000
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40010400 	.word	0x40010400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40001800 	.word	0x40001800

080039a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e03d      	b.n	8003a40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <__NVIC_SetPriority>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	db0a      	blt.n	8003a9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	490c      	ldr	r1, [pc, #48]	; (8003ac0 <__NVIC_SetPriority+0x4c>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	440b      	add	r3, r1
 8003a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a9c:	e00a      	b.n	8003ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <__NVIC_SetPriority+0x50>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	3b04      	subs	r3, #4
 8003aac:	0112      	lsls	r2, r2, #4
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	761a      	strb	r2, [r3, #24]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000e100 	.word	0xe000e100
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <SysTick_Handler+0x1c>)
 8003ace:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ad0:	f001 fdf6 	bl	80056c0 <xTaskGetSchedulerState>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ada:	f002 fddd 	bl	8006698 <xPortSysTickHandler>
  }
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	e000e010 	.word	0xe000e010

08003ae8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003aec:	2100      	movs	r1, #0
 8003aee:	f06f 0004 	mvn.w	r0, #4
 8003af2:	f7ff ffbf 	bl	8003a74 <__NVIC_SetPriority>
#endif
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b02:	f3ef 8305 	mrs	r3, IPSR
 8003b06:	603b      	str	r3, [r7, #0]
  return(result);
 8003b08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b0e:	f06f 0305 	mvn.w	r3, #5
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	e00c      	b.n	8003b30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <osKernelInitialize+0x44>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <osKernelInitialize+0x44>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	e002      	b.n	8003b30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b30:	687b      	ldr	r3, [r7, #4]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	200000a4 	.word	0x200000a4

08003b44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b4a:	f3ef 8305 	mrs	r3, IPSR
 8003b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b56:	f06f 0305 	mvn.w	r3, #5
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	e010      	b.n	8003b80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <osKernelStart+0x48>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d109      	bne.n	8003b7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b66:	f7ff ffbf 	bl	8003ae8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <osKernelStart+0x48>)
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b70:	f001 f94a 	bl	8004e08 <vTaskStartScheduler>
      stat = osOK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	e002      	b.n	8003b80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b80:	687b      	ldr	r3, [r7, #4]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200000a4 	.word	0x200000a4

08003b90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08e      	sub	sp, #56	; 0x38
 8003b94:	af04      	add	r7, sp, #16
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ba0:	f3ef 8305 	mrs	r3, IPSR
 8003ba4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ba6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d17e      	bne.n	8003caa <osThreadNew+0x11a>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d07b      	beq.n	8003caa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003bb6:	2318      	movs	r3, #24
 8003bb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d045      	beq.n	8003c56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <osThreadNew+0x48>
        name = attr->name;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <osThreadNew+0x6e>
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b38      	cmp	r3, #56	; 0x38
 8003bf0:	d805      	bhi.n	8003bfe <osThreadNew+0x6e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <osThreadNew+0x72>
        return (NULL);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e054      	b.n	8003cac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00e      	beq.n	8003c38 <osThreadNew+0xa8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2bbb      	cmp	r3, #187	; 0xbb
 8003c20:	d90a      	bls.n	8003c38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d006      	beq.n	8003c38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <osThreadNew+0xa8>
        mem = 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e010      	b.n	8003c5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10c      	bne.n	8003c5a <osThreadNew+0xca>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d108      	bne.n	8003c5a <osThreadNew+0xca>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <osThreadNew+0xca>
          mem = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	e001      	b.n	8003c5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d110      	bne.n	8003c82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c68:	9202      	str	r2, [sp, #8]
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	6a3a      	ldr	r2, [r7, #32]
 8003c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 feda 	bl	8004a30 <xTaskCreateStatic>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	e013      	b.n	8003caa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d110      	bne.n	8003caa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	f107 0310 	add.w	r3, r7, #16
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 ff25 	bl	8004aea <xTaskCreate>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d001      	beq.n	8003caa <osThreadNew+0x11a>
            hTask = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003caa:	693b      	ldr	r3, [r7, #16]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3728      	adds	r7, #40	; 0x28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <osThreadFlagsSet+0x1a>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da03      	bge.n	8003cd6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8003cce:	f06f 0303 	mvn.w	r3, #3
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e035      	b.n	8003d42 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cdc:	f3ef 8305 	mrs	r3, IPSR
 8003ce0:	613b      	str	r3, [r7, #16]
  return(result);
 8003ce2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01f      	beq.n	8003d28 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	6839      	ldr	r1, [r7, #0]
 8003cf8:	6978      	ldr	r0, [r7, #20]
 8003cfa:	f001 fe8b 	bl	8005a14 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8003cfe:	f107 030c 	add.w	r3, r7, #12
 8003d02:	2200      	movs	r2, #0
 8003d04:	9200      	str	r2, [sp, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	2100      	movs	r1, #0
 8003d0a:	6978      	ldr	r0, [r7, #20]
 8003d0c:	f001 fe82 	bl	8005a14 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d015      	beq.n	8003d42 <osThreadFlagsSet+0x8e>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <osThreadFlagsSet+0x98>)
 8003d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	e00c      	b.n	8003d42 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f001 fdb2 	bl	8005898 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003d34:	f107 030c 	add.w	r3, r7, #12
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	6978      	ldr	r0, [r7, #20]
 8003d3e:	f001 fdab 	bl	8005898 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08c      	sub	sp, #48	; 0x30
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d5c:	f3ef 8305 	mrs	r3, IPSR
 8003d60:	617b      	str	r3, [r7, #20]
  return(result);
 8003d62:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8003d68:	f06f 0305 	mvn.w	r3, #5
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6e:	e06b      	b.n	8003e48 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da03      	bge.n	8003d7e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8003d76:	f06f 0303 	mvn.w	r3, #3
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7c:	e064      	b.n	8003e48 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8c:	e001      	b.n	8003d92 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8003d9a:	f001 f951 	bl	8005040 <xTaskGetTickCount>
 8003d9e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8003da0:	f107 0210 	add.w	r2, r7, #16
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da8:	2000      	movs	r0, #0
 8003daa:	f001 fd15 	bl	80057d8 <xTaskNotifyWait>
 8003dae:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d137      	bne.n	8003e26 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8003db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00c      	beq.n	8003dea <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d032      	beq.n	8003e42 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003de2:	f06f 0302 	mvn.w	r3, #2
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003de8:	e02e      	b.n	8003e48 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d128      	bne.n	8003e46 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d103      	bne.n	8003e02 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003dfa:	f06f 0302 	mvn.w	r3, #2
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003e00:	e022      	b.n	8003e48 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8003e02:	f001 f91d 	bl	8005040 <xTaskGetTickCount>
 8003e06:	4602      	mov	r2, r0
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d902      	bls.n	8003e1c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	e00e      	b.n	8003e3a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
 8003e24:	e009      	b.n	8003e3a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d103      	bne.n	8003e34 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8003e2c:	f06f 0302 	mvn.w	r3, #2
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e32:	e002      	b.n	8003e3a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003e34:	f06f 0301 	mvn.w	r3, #1
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1af      	bne.n	8003da0 <osThreadFlagsWait+0x50>
 8003e40:	e002      	b.n	8003e48 <osThreadFlagsWait+0xf8>
            break;
 8003e42:	bf00      	nop
 8003e44:	e000      	b.n	8003e48 <osThreadFlagsWait+0xf8>
            break;
 8003e46:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3730      	adds	r7, #48	; 0x30
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e5a:	f3ef 8305 	mrs	r3, IPSR
 8003e5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <osDelay+0x1c>
    stat = osErrorISR;
 8003e66:	f06f 0305 	mvn.w	r3, #5
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e007      	b.n	8003e7e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 ff91 	bl	8004da0 <vTaskDelay>
    }
  }

  return (stat);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4a06      	ldr	r2, [pc, #24]	; (8003eb8 <vApplicationGetIdleTaskMemory+0x30>)
 8003e9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2280      	movs	r2, #128	; 0x80
 8003ea4:	601a      	str	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	200000a8 	.word	0x200000a8
 8003eb8:	20000164 	.word	0x20000164

08003ebc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ecc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4a06      	ldr	r2, [pc, #24]	; (8003eec <vApplicationGetTimerTaskMemory+0x30>)
 8003ed2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eda:	601a      	str	r2, [r3, #0]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000364 	.word	0x20000364
 8003eec:	20000420 	.word	0x20000420

08003ef0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f103 0208 	add.w	r2, r3, #8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f103 0208 	add.w	r2, r3, #8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f103 0208 	add.w	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f92:	b480      	push	{r7}
 8003f94:	b085      	sub	sp, #20
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fa8:	d103      	bne.n	8003fb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e00c      	b.n	8003fcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e002      	b.n	8003fc0 <vListInsert+0x2e>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d2f6      	bcs.n	8003fba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6892      	ldr	r2, [r2, #8]
 800401a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6852      	ldr	r2, [r2, #4]
 8004024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d103      	bne.n	8004038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	1e5a      	subs	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004082:	f002 fa77 	bl	8006574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	68f9      	ldr	r1, [r7, #12]
 8004090:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	3b01      	subs	r3, #1
 80040b4:	68f9      	ldr	r1, [r7, #12]
 80040b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	441a      	add	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	22ff      	movs	r2, #255	; 0xff
 80040c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	22ff      	movs	r2, #255	; 0xff
 80040ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d114      	bne.n	8004102 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01a      	beq.n	8004116 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3310      	adds	r3, #16
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 f929 	bl	800533c <xTaskRemoveFromEventList>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <xQueueGenericReset+0xcc>)
 80040f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	e009      	b.n	8004116 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3310      	adds	r3, #16
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fef2 	bl	8003ef0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3324      	adds	r3, #36	; 0x24
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff feed 	bl	8003ef0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004116:	f002 fa5d 	bl	80065d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800411a:	2301      	movs	r3, #1
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08e      	sub	sp, #56	; 0x38
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <xQueueGenericCreateStatic+0x52>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <xQueueGenericCreateStatic+0x56>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueGenericCreateStatic+0x58>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	623b      	str	r3, [r7, #32]
}
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <xQueueGenericCreateStatic+0x7e>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <xQueueGenericCreateStatic+0x82>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xQueueGenericCreateStatic+0x84>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	61fb      	str	r3, [r7, #28]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041c6:	2350      	movs	r3, #80	; 0x50
 80041c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b50      	cmp	r3, #80	; 0x50
 80041ce:	d00a      	beq.n	80041e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	61bb      	str	r3, [r7, #24]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	4613      	mov	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f805 	bl	8004218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004210:	4618      	mov	r0, r3
 8004212:	3730      	adds	r7, #48	; 0x30
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e002      	b.n	800423a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004246:	2101      	movs	r1, #1
 8004248:	69b8      	ldr	r0, [r7, #24]
 800424a:	f7ff ff05 	bl	8004058 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	; 0x38
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800426e:	2300      	movs	r3, #0
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <xQueueGenericSend+0x32>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d103      	bne.n	80042a0 <xQueueGenericSend+0x40>
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <xQueueGenericSend+0x44>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <xQueueGenericSend+0x46>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <xQueueGenericSend+0x60>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d103      	bne.n	80042ce <xQueueGenericSend+0x6e>
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <xQueueGenericSend+0x72>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <xQueueGenericSend+0x74>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <xQueueGenericSend+0x8e>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	623b      	str	r3, [r7, #32]
}
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ee:	f001 f9e7 	bl	80056c0 <xTaskGetSchedulerState>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <xQueueGenericSend+0x9e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <xQueueGenericSend+0xa2>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <xQueueGenericSend+0xa4>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <xQueueGenericSend+0xbe>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	61fb      	str	r3, [r7, #28]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800431e:	f002 f929 	bl	8006574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <xQueueGenericSend+0xd4>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d129      	bne.n	8004388 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800433a:	f000 fa0b 	bl	8004754 <prvCopyDataToQueue>
 800433e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d010      	beq.n	800436a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	3324      	adds	r3, #36	; 0x24
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fff5 	bl	800533c <xTaskRemoveFromEventList>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d013      	beq.n	8004380 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004358:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <xQueueGenericSend+0x1f8>)
 800435a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	e00a      	b.n	8004380 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004370:	4b39      	ldr	r3, [pc, #228]	; (8004458 <xQueueGenericSend+0x1f8>)
 8004372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004380:	f002 f928 	bl	80065d4 <vPortExitCritical>
				return pdPASS;
 8004384:	2301      	movs	r3, #1
 8004386:	e063      	b.n	8004450 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800438e:	f002 f921 	bl	80065d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004392:	2300      	movs	r3, #0
 8004394:	e05c      	b.n	8004450 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800439c:	f107 0314 	add.w	r3, r7, #20
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 f82f 	bl	8005404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043a6:	2301      	movs	r3, #1
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043aa:	f002 f913 	bl	80065d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ae:	f000 fd9b 	bl	8004ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043b2:	f002 f8df 	bl	8006574 <vPortEnterCritical>
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043bc:	b25b      	sxtb	r3, r3
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c2:	d103      	bne.n	80043cc <xQueueGenericSend+0x16c>
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d2:	b25b      	sxtb	r3, r3
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d8:	d103      	bne.n	80043e2 <xQueueGenericSend+0x182>
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e2:	f002 f8f7 	bl	80065d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043e6:	1d3a      	adds	r2, r7, #4
 80043e8:	f107 0314 	add.w	r3, r7, #20
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 f81e 	bl	8005430 <xTaskCheckForTimeOut>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d124      	bne.n	8004444 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043fc:	f000 faa2 	bl	8004944 <prvIsQueueFull>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d018      	beq.n	8004438 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	3310      	adds	r3, #16
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4611      	mov	r1, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f000 ff44 	bl	800529c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004416:	f000 fa2d 	bl	8004874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800441a:	f000 fd73 	bl	8004f04 <xTaskResumeAll>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f47f af7c 	bne.w	800431e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <xQueueGenericSend+0x1f8>)
 8004428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	e772      	b.n	800431e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800443a:	f000 fa1b 	bl	8004874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800443e:	f000 fd61 	bl	8004f04 <xTaskResumeAll>
 8004442:	e76c      	b.n	800431e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004446:	f000 fa15 	bl	8004874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800444a:	f000 fd5b 	bl	8004f04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800444e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004450:	4618      	mov	r0, r3
 8004452:	3738      	adds	r7, #56	; 0x38
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b090      	sub	sp, #64	; 0x40
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d103      	bne.n	8004498 <xQueueGenericSendFromISR+0x3c>
 8004490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <xQueueGenericSendFromISR+0x40>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <xQueueGenericSendFromISR+0x42>
 800449c:	2300      	movs	r3, #0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044b4:	bf00      	nop
 80044b6:	e7fe      	b.n	80044b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d103      	bne.n	80044c6 <xQueueGenericSendFromISR+0x6a>
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <xQueueGenericSendFromISR+0x6e>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <xQueueGenericSendFromISR+0x70>
 80044ca:	2300      	movs	r3, #0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	623b      	str	r3, [r7, #32]
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044e6:	f002 f927 	bl	8006738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044ea:	f3ef 8211 	mrs	r2, BASEPRI
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	61fa      	str	r2, [r7, #28]
 8004500:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004502:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <xQueueGenericSendFromISR+0xbc>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d12f      	bne.n	8004578 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800451e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800452e:	f000 f911 	bl	8004754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004532:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800453a:	d112      	bne.n	8004562 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	2b00      	cmp	r3, #0
 8004542:	d016      	beq.n	8004572 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	3324      	adds	r3, #36	; 0x24
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fef7 	bl	800533c <xTaskRemoveFromEventList>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00e      	beq.n	8004572 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00b      	beq.n	8004572 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	e007      	b.n	8004572 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004566:	3301      	adds	r3, #1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	b25a      	sxtb	r2, r3
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004572:	2301      	movs	r3, #1
 8004574:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004576:	e001      	b.n	800457c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004578:	2300      	movs	r3, #0
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004586:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800458a:	4618      	mov	r0, r3
 800458c:	3740      	adds	r7, #64	; 0x40
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	; 0x30
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10a      	bne.n	80045c4 <xQueueReceive+0x30>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	623b      	str	r3, [r7, #32]
}
 80045c0:	bf00      	nop
 80045c2:	e7fe      	b.n	80045c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <xQueueReceive+0x3e>
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <xQueueReceive+0x42>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <xQueueReceive+0x44>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <xQueueReceive+0x5e>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	61fb      	str	r3, [r7, #28]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045f2:	f001 f865 	bl	80056c0 <xTaskGetSchedulerState>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <xQueueReceive+0x6e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <xQueueReceive+0x72>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <xQueueReceive+0x74>
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <xQueueReceive+0x8e>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	61bb      	str	r3, [r7, #24]
}
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004622:	f001 ffa7 	bl	8006574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01f      	beq.n	8004672 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004636:	f000 f8f7 	bl	8004828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	1e5a      	subs	r2, r3, #1
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00f      	beq.n	800466a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	3310      	adds	r3, #16
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fe74 	bl	800533c <xTaskRemoveFromEventList>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800465a:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <xQueueReceive+0x1bc>)
 800465c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800466a:	f001 ffb3 	bl	80065d4 <vPortExitCritical>
				return pdPASS;
 800466e:	2301      	movs	r3, #1
 8004670:	e069      	b.n	8004746 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004678:	f001 ffac 	bl	80065d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800467c:	2300      	movs	r3, #0
 800467e:	e062      	b.n	8004746 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004686:	f107 0310 	add.w	r3, r7, #16
 800468a:	4618      	mov	r0, r3
 800468c:	f000 feba 	bl	8005404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004690:	2301      	movs	r3, #1
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004694:	f001 ff9e 	bl	80065d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004698:	f000 fc26 	bl	8004ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800469c:	f001 ff6a 	bl	8006574 <vPortEnterCritical>
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ac:	d103      	bne.n	80046b6 <xQueueReceive+0x122>
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046bc:	b25b      	sxtb	r3, r3
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c2:	d103      	bne.n	80046cc <xQueueReceive+0x138>
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046cc:	f001 ff82 	bl	80065d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046d0:	1d3a      	adds	r2, r7, #4
 80046d2:	f107 0310 	add.w	r3, r7, #16
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fea9 	bl	8005430 <xTaskCheckForTimeOut>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d123      	bne.n	800472c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e6:	f000 f917 	bl	8004918 <prvIsQueueEmpty>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d017      	beq.n	8004720 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	3324      	adds	r3, #36	; 0x24
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fdcf 	bl	800529c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004700:	f000 f8b8 	bl	8004874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004704:	f000 fbfe 	bl	8004f04 <xTaskResumeAll>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d189      	bne.n	8004622 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <xQueueReceive+0x1bc>)
 8004710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	e780      	b.n	8004622 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004722:	f000 f8a7 	bl	8004874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004726:	f000 fbed 	bl	8004f04 <xTaskResumeAll>
 800472a:	e77a      	b.n	8004622 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800472c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472e:	f000 f8a1 	bl	8004874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004732:	f000 fbe7 	bl	8004f04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004738:	f000 f8ee 	bl	8004918 <prvIsQueueEmpty>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	f43f af6f 	beq.w	8004622 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004744:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004746:	4618      	mov	r0, r3
 8004748:	3730      	adds	r7, #48	; 0x30
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10d      	bne.n	800478e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d14d      	bne.n	8004816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 ffbc 	bl	80056fc <xTaskPriorityDisinherit>
 8004784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	e043      	b.n	8004816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d119      	bne.n	80047c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6858      	ldr	r0, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	461a      	mov	r2, r3
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	f002 fa1a 	bl	8006bd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	441a      	add	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d32b      	bcc.n	8004816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	e026      	b.n	8004816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68d8      	ldr	r0, [r3, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	461a      	mov	r2, r3
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	f002 fa00 	bl	8006bd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	425b      	negs	r3, r3
 80047e2:	441a      	add	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d207      	bcs.n	8004804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	425b      	negs	r3, r3
 80047fe:	441a      	add	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d105      	bne.n	8004816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	3b01      	subs	r3, #1
 8004814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800481e:	697b      	ldr	r3, [r7, #20]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d018      	beq.n	800486c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	441a      	add	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	d303      	bcc.n	800485c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68d9      	ldr	r1, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	461a      	mov	r2, r3
 8004866:	6838      	ldr	r0, [r7, #0]
 8004868:	f002 f9b6 	bl	8006bd8 <memcpy>
	}
}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800487c:	f001 fe7a 	bl	8006574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004888:	e011      	b.n	80048ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3324      	adds	r3, #36	; 0x24
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fd50 	bl	800533c <xTaskRemoveFromEventList>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048a2:	f000 fe27 	bl	80054f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	dce9      	bgt.n	800488a <prvUnlockQueue+0x16>
 80048b6:	e000      	b.n	80048ba <prvUnlockQueue+0x46>
					break;
 80048b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	22ff      	movs	r2, #255	; 0xff
 80048be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048c2:	f001 fe87 	bl	80065d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048c6:	f001 fe55 	bl	8006574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048d2:	e011      	b.n	80048f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d012      	beq.n	8004902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3310      	adds	r3, #16
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fd2b 	bl	800533c <xTaskRemoveFromEventList>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048ec:	f000 fe02 	bl	80054f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048f0:	7bbb      	ldrb	r3, [r7, #14]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dce9      	bgt.n	80048d4 <prvUnlockQueue+0x60>
 8004900:	e000      	b.n	8004904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	22ff      	movs	r2, #255	; 0xff
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800490c:	f001 fe62 	bl	80065d4 <vPortExitCritical>
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004920:	f001 fe28 	bl	8006574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e001      	b.n	8004936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004936:	f001 fe4d 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 800493a:	68fb      	ldr	r3, [r7, #12]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800494c:	f001 fe12 	bl	8006574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	429a      	cmp	r2, r3
 800495a:	d102      	bne.n	8004962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e001      	b.n	8004966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004966:	f001 fe35 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	e014      	b.n	80049ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004984:	4a0f      	ldr	r2, [pc, #60]	; (80049c4 <vQueueAddToRegistry+0x50>)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004990:	490c      	ldr	r1, [pc, #48]	; (80049c4 <vQueueAddToRegistry+0x50>)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <vQueueAddToRegistry+0x50>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4413      	add	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049a6:	e006      	b.n	80049b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b07      	cmp	r3, #7
 80049b2:	d9e7      	bls.n	8004984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20004b7c 	.word	0x20004b7c

080049c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049d8:	f001 fdcc 	bl	8006574 <vPortEnterCritical>
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e2:	b25b      	sxtb	r3, r3
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e8:	d103      	bne.n	80049f2 <vQueueWaitForMessageRestricted+0x2a>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f8:	b25b      	sxtb	r3, r3
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049fe:	d103      	bne.n	8004a08 <vQueueWaitForMessageRestricted+0x40>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a08:	f001 fde4 	bl	80065d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	3324      	adds	r3, #36	; 0x24
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fc61 	bl	80052e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a22:	6978      	ldr	r0, [r7, #20]
 8004a24:	f7ff ff26 	bl	8004874 <prvUnlockQueue>
	}
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08e      	sub	sp, #56	; 0x38
 8004a34:	af04      	add	r7, sp, #16
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	623b      	str	r3, [r7, #32]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	61fb      	str	r3, [r7, #28]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a76:	23bc      	movs	r3, #188	; 0xbc
 8004a78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2bbc      	cmp	r3, #188	; 0xbc
 8004a7e:	d00a      	beq.n	8004a96 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61bb      	str	r3, [r7, #24]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01e      	beq.n	8004adc <xTaskCreateStatic+0xac>
 8004a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9303      	str	r3, [sp, #12]
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	9302      	str	r3, [sp, #8]
 8004abe:	f107 0314 	add.w	r3, r7, #20
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f850 	bl	8004b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ad6:	f000 f8f3 	bl	8004cc0 <prvAddNewTaskToReadyList>
 8004ada:	e001      	b.n	8004ae0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ae0:	697b      	ldr	r3, [r7, #20]
	}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3728      	adds	r7, #40	; 0x28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b08c      	sub	sp, #48	; 0x30
 8004aee:	af04      	add	r7, sp, #16
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 fe5a 	bl	80067b8 <pvPortMalloc>
 8004b04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b0c:	20bc      	movs	r0, #188	; 0xbc
 8004b0e:	f001 fe53 	bl	80067b8 <pvPortMalloc>
 8004b12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b20:	e005      	b.n	8004b2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b22:	6978      	ldr	r0, [r7, #20]
 8004b24:	f001 ff14 	bl	8006950 <vPortFree>
 8004b28:	e001      	b.n	8004b2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d017      	beq.n	8004b64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b3c:	88fa      	ldrh	r2, [r7, #6]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9303      	str	r3, [sp, #12]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	9302      	str	r3, [sp, #8]
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f80e 	bl	8004b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b58:	69f8      	ldr	r0, [r7, #28]
 8004b5a:	f000 f8b1 	bl	8004cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e002      	b.n	8004b6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	21a5      	movs	r1, #165	; 0xa5
 8004b8e:	f002 f831 	bl	8006bf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f023 0307 	bic.w	r3, r3, #7
 8004baa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <prvInitialiseNewTask+0x58>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	617b      	str	r3, [r7, #20]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01f      	beq.n	8004c12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	e012      	b.n	8004bfe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	7819      	ldrb	r1, [r3, #0]
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	3334      	adds	r3, #52	; 0x34
 8004be8:	460a      	mov	r2, r1
 8004bea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d006      	beq.n	8004c06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b0f      	cmp	r3, #15
 8004c02:	d9e9      	bls.n	8004bd8 <prvInitialiseNewTask+0x64>
 8004c04:	e000      	b.n	8004c08 <prvInitialiseNewTask+0x94>
			{
				break;
 8004c06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c10:	e003      	b.n	8004c1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	2b37      	cmp	r3, #55	; 0x37
 8004c1e:	d901      	bls.n	8004c24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c20:	2337      	movs	r3, #55	; 0x37
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	2200      	movs	r2, #0
 8004c34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f978 	bl	8003f30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	3318      	adds	r3, #24
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff f973 	bl	8003f30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	3354      	adds	r3, #84	; 0x54
 8004c74:	2260      	movs	r2, #96	; 0x60
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 ffbb 	bl	8006bf4 <memset>
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <prvInitialiseNewTask+0x140>)
 8004c82:	659a      	str	r2, [r3, #88]	; 0x58
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	4a0c      	ldr	r2, [pc, #48]	; (8004cb8 <prvInitialiseNewTask+0x144>)
 8004c88:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	4a0b      	ldr	r2, [pc, #44]	; (8004cbc <prvInitialiseNewTask+0x148>)
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	69b8      	ldr	r0, [r7, #24]
 8004c96:	f001 fb43 	bl	8006320 <pxPortInitialiseStack>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004caa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cac:	bf00      	nop
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	08006e60 	.word	0x08006e60
 8004cb8:	08006e80 	.word	0x08006e80
 8004cbc:	08006e40 	.word	0x08006e40

08004cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cc8:	f001 fc54 	bl	8006574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ccc:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	4a2c      	ldr	r2, [pc, #176]	; (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cd6:	4b2c      	ldr	r3, [pc, #176]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cde:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <prvAddNewTaskToReadyList+0xc4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d110      	bne.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cec:	f000 fc26 	bl	800553c <prvInitialiseTaskLists>
 8004cf0:	e00d      	b.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cf2:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <prvAddNewTaskToReadyList+0xcc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cfa:	4b23      	ldr	r3, [pc, #140]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d802      	bhi.n	8004d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d08:	4a1f      	ldr	r2, [pc, #124]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <prvAddNewTaskToReadyList+0xd0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <prvAddNewTaskToReadyList+0xd0>)
 8004d16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d18:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <prvAddNewTaskToReadyList+0xd0>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <prvAddNewTaskToReadyList+0xd4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d903      	bls.n	8004d34 <prvAddNewTaskToReadyList+0x74>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <prvAddNewTaskToReadyList+0xd4>)
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <prvAddNewTaskToReadyList+0xd8>)
 8004d42:	441a      	add	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7ff f8fd 	bl	8003f4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d50:	f001 fc40 	bl	80065d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d54:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <prvAddNewTaskToReadyList+0xcc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <prvAddNewTaskToReadyList+0xc8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d207      	bcs.n	8004d7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <prvAddNewTaskToReadyList+0xdc>)
 8004d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000cf4 	.word	0x20000cf4
 8004d88:	20000820 	.word	0x20000820
 8004d8c:	20000d00 	.word	0x20000d00
 8004d90:	20000d10 	.word	0x20000d10
 8004d94:	20000cfc 	.word	0x20000cfc
 8004d98:	20000824 	.word	0x20000824
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d017      	beq.n	8004de2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004db2:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <vTaskDelay+0x60>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <vTaskDelay+0x30>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	60bb      	str	r3, [r7, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	e7fe      	b.n	8004dce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004dd0:	f000 f88a 	bl	8004ee8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 ff00 	bl	8005bdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ddc:	f000 f892 	bl	8004f04 <xTaskResumeAll>
 8004de0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <vTaskDelay+0x64>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000d1c 	.word	0x20000d1c
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e16:	463a      	mov	r2, r7
 8004e18:	1d39      	adds	r1, r7, #4
 8004e1a:	f107 0308 	add.w	r3, r7, #8
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff f832 	bl	8003e88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	9202      	str	r2, [sp, #8]
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	460a      	mov	r2, r1
 8004e36:	4924      	ldr	r1, [pc, #144]	; (8004ec8 <vTaskStartScheduler+0xc0>)
 8004e38:	4824      	ldr	r0, [pc, #144]	; (8004ecc <vTaskStartScheduler+0xc4>)
 8004e3a:	f7ff fdf9 	bl	8004a30 <xTaskCreateStatic>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4a23      	ldr	r2, [pc, #140]	; (8004ed0 <vTaskStartScheduler+0xc8>)
 8004e42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e44:	4b22      	ldr	r3, [pc, #136]	; (8004ed0 <vTaskStartScheduler+0xc8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e001      	b.n	8004e56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d102      	bne.n	8004e62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e5c:	f000 ff12 	bl	8005c84 <xTimerCreateTimerTask>
 8004e60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d11b      	bne.n	8004ea0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	613b      	str	r3, [r7, #16]
}
 8004e7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e7c:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <vTaskStartScheduler+0xcc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3354      	adds	r3, #84	; 0x54
 8004e82:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <vTaskStartScheduler+0xd0>)
 8004e84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <vTaskStartScheduler+0xd4>)
 8004e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <vTaskStartScheduler+0xd8>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e94:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <vTaskStartScheduler+0xdc>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e9a:	f001 fac9 	bl	8006430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e9e:	e00e      	b.n	8004ebe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea6:	d10a      	bne.n	8004ebe <vTaskStartScheduler+0xb6>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60fb      	str	r3, [r7, #12]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <vTaskStartScheduler+0xb4>
}
 8004ebe:	bf00      	nop
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	08006dc8 	.word	0x08006dc8
 8004ecc:	0800550d 	.word	0x0800550d
 8004ed0:	20000d18 	.word	0x20000d18
 8004ed4:	20000820 	.word	0x20000820
 8004ed8:	20000014 	.word	0x20000014
 8004edc:	20000d14 	.word	0x20000d14
 8004ee0:	20000d00 	.word	0x20000d00
 8004ee4:	20000cf8 	.word	0x20000cf8

08004ee8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004eec:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <vTaskSuspendAll+0x18>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	4a03      	ldr	r2, [pc, #12]	; (8004f00 <vTaskSuspendAll+0x18>)
 8004ef4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ef6:	bf00      	nop
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	20000d1c 	.word	0x20000d1c

08004f04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f12:	4b42      	ldr	r3, [pc, #264]	; (800501c <xTaskResumeAll+0x118>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	603b      	str	r3, [r7, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f30:	f001 fb20 	bl	8006574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f34:	4b39      	ldr	r3, [pc, #228]	; (800501c <xTaskResumeAll+0x118>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	4a38      	ldr	r2, [pc, #224]	; (800501c <xTaskResumeAll+0x118>)
 8004f3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f3e:	4b37      	ldr	r3, [pc, #220]	; (800501c <xTaskResumeAll+0x118>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d162      	bne.n	800500c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f46:	4b36      	ldr	r3, [pc, #216]	; (8005020 <xTaskResumeAll+0x11c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d05e      	beq.n	800500c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f4e:	e02f      	b.n	8004fb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f50:	4b34      	ldr	r3, [pc, #208]	; (8005024 <xTaskResumeAll+0x120>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3318      	adds	r3, #24
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff f851 	bl	8004004 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff f84c 	bl	8004004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f70:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <xTaskResumeAll+0x124>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d903      	bls.n	8004f80 <xTaskResumeAll+0x7c>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <xTaskResumeAll+0x124>)
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4a27      	ldr	r2, [pc, #156]	; (800502c <xTaskResumeAll+0x128>)
 8004f8e:	441a      	add	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7fe ffd7 	bl	8003f4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	4b23      	ldr	r3, [pc, #140]	; (8005030 <xTaskResumeAll+0x12c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d302      	bcc.n	8004fb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004faa:	4b22      	ldr	r3, [pc, #136]	; (8005034 <xTaskResumeAll+0x130>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <xTaskResumeAll+0x120>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1cb      	bne.n	8004f50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fbe:	f000 fb5f 	bl	8005680 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <xTaskResumeAll+0x134>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d010      	beq.n	8004ff0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fce:	f000 f847 	bl	8005060 <xTaskIncrementTick>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004fd8:	4b16      	ldr	r3, [pc, #88]	; (8005034 <xTaskResumeAll+0x130>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f1      	bne.n	8004fce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <xTaskResumeAll+0x134>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ff0:	4b10      	ldr	r3, [pc, #64]	; (8005034 <xTaskResumeAll+0x130>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <xTaskResumeAll+0x138>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800500c:	f001 fae2 	bl	80065d4 <vPortExitCritical>

	return xAlreadyYielded;
 8005010:	68bb      	ldr	r3, [r7, #8]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000d1c 	.word	0x20000d1c
 8005020:	20000cf4 	.word	0x20000cf4
 8005024:	20000cb4 	.word	0x20000cb4
 8005028:	20000cfc 	.word	0x20000cfc
 800502c:	20000824 	.word	0x20000824
 8005030:	20000820 	.word	0x20000820
 8005034:	20000d08 	.word	0x20000d08
 8005038:	20000d04 	.word	0x20000d04
 800503c:	e000ed04 	.word	0xe000ed04

08005040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <xTaskGetTickCount+0x1c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800504c:	687b      	ldr	r3, [r7, #4]
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000cf8 	.word	0x20000cf8

08005060 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800506a:	4b4f      	ldr	r3, [pc, #316]	; (80051a8 <xTaskIncrementTick+0x148>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 808f 	bne.w	8005192 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005074:	4b4d      	ldr	r3, [pc, #308]	; (80051ac <xTaskIncrementTick+0x14c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800507c:	4a4b      	ldr	r2, [pc, #300]	; (80051ac <xTaskIncrementTick+0x14c>)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d120      	bne.n	80050ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005088:	4b49      	ldr	r3, [pc, #292]	; (80051b0 <xTaskIncrementTick+0x150>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	603b      	str	r3, [r7, #0]
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <xTaskIncrementTick+0x46>
 80050a8:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <xTaskIncrementTick+0x150>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	4b41      	ldr	r3, [pc, #260]	; (80051b4 <xTaskIncrementTick+0x154>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3f      	ldr	r2, [pc, #252]	; (80051b0 <xTaskIncrementTick+0x150>)
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4a3f      	ldr	r2, [pc, #252]	; (80051b4 <xTaskIncrementTick+0x154>)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b3e      	ldr	r3, [pc, #248]	; (80051b8 <xTaskIncrementTick+0x158>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	4a3d      	ldr	r2, [pc, #244]	; (80051b8 <xTaskIncrementTick+0x158>)
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	f000 fadb 	bl	8005680 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050ca:	4b3c      	ldr	r3, [pc, #240]	; (80051bc <xTaskIncrementTick+0x15c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d349      	bcc.n	8005168 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050d4:	4b36      	ldr	r3, [pc, #216]	; (80051b0 <xTaskIncrementTick+0x150>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050de:	4b37      	ldr	r3, [pc, #220]	; (80051bc <xTaskIncrementTick+0x15c>)
 80050e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050e4:	601a      	str	r2, [r3, #0]
					break;
 80050e6:	e03f      	b.n	8005168 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e8:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <xTaskIncrementTick+0x150>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d203      	bcs.n	8005108 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005100:	4a2e      	ldr	r2, [pc, #184]	; (80051bc <xTaskIncrementTick+0x15c>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005106:	e02f      	b.n	8005168 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	3304      	adds	r3, #4
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe ff79 	bl	8004004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3318      	adds	r3, #24
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe ff70 	bl	8004004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <xTaskIncrementTick+0x160>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d903      	bls.n	8005138 <xTaskIncrementTick+0xd8>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <xTaskIncrementTick+0x160>)
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <xTaskIncrementTick+0x164>)
 8005146:	441a      	add	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f7fe fefb 	bl	8003f4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005158:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <xTaskIncrementTick+0x168>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	429a      	cmp	r2, r3
 8005160:	d3b8      	bcc.n	80050d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005162:	2301      	movs	r3, #1
 8005164:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005166:	e7b5      	b.n	80050d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005168:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <xTaskIncrementTick+0x168>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516e:	4915      	ldr	r1, [pc, #84]	; (80051c4 <xTaskIncrementTick+0x164>)
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d901      	bls.n	8005184 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <xTaskIncrementTick+0x16c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800518c:	2301      	movs	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e004      	b.n	800519c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <xTaskIncrementTick+0x170>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <xTaskIncrementTick+0x170>)
 800519a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800519c:	697b      	ldr	r3, [r7, #20]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20000d1c 	.word	0x20000d1c
 80051ac:	20000cf8 	.word	0x20000cf8
 80051b0:	20000cac 	.word	0x20000cac
 80051b4:	20000cb0 	.word	0x20000cb0
 80051b8:	20000d0c 	.word	0x20000d0c
 80051bc:	20000d14 	.word	0x20000d14
 80051c0:	20000cfc 	.word	0x20000cfc
 80051c4:	20000824 	.word	0x20000824
 80051c8:	20000820 	.word	0x20000820
 80051cc:	20000d08 	.word	0x20000d08
 80051d0:	20000d04 	.word	0x20000d04

080051d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051da:	4b2a      	ldr	r3, [pc, #168]	; (8005284 <vTaskSwitchContext+0xb0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051e2:	4b29      	ldr	r3, [pc, #164]	; (8005288 <vTaskSwitchContext+0xb4>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051e8:	e046      	b.n	8005278 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80051ea:	4b27      	ldr	r3, [pc, #156]	; (8005288 <vTaskSwitchContext+0xb4>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f0:	4b26      	ldr	r3, [pc, #152]	; (800528c <vTaskSwitchContext+0xb8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	e010      	b.n	800521a <vTaskSwitchContext+0x46>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <vTaskSwitchContext+0x40>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <vTaskSwitchContext+0x3e>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3b01      	subs	r3, #1
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	491d      	ldr	r1, [pc, #116]	; (8005290 <vTaskSwitchContext+0xbc>)
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0e4      	beq.n	80051f8 <vTaskSwitchContext+0x24>
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4a15      	ldr	r2, [pc, #84]	; (8005290 <vTaskSwitchContext+0xbc>)
 800523a:	4413      	add	r3, r2
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	605a      	str	r2, [r3, #4]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	3308      	adds	r3, #8
 8005250:	429a      	cmp	r2, r3
 8005252:	d104      	bne.n	800525e <vTaskSwitchContext+0x8a>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4a0b      	ldr	r2, [pc, #44]	; (8005294 <vTaskSwitchContext+0xc0>)
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	4a08      	ldr	r2, [pc, #32]	; (800528c <vTaskSwitchContext+0xb8>)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <vTaskSwitchContext+0xc0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3354      	adds	r3, #84	; 0x54
 8005274:	4a08      	ldr	r2, [pc, #32]	; (8005298 <vTaskSwitchContext+0xc4>)
 8005276:	6013      	str	r3, [r2, #0]
}
 8005278:	bf00      	nop
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	20000d1c 	.word	0x20000d1c
 8005288:	20000d08 	.word	0x20000d08
 800528c:	20000cfc 	.word	0x20000cfc
 8005290:	20000824 	.word	0x20000824
 8005294:	20000820 	.word	0x20000820
 8005298:	20000014 	.word	0x20000014

0800529c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	60fb      	str	r3, [r7, #12]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <vTaskPlaceOnEventList+0x44>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3318      	adds	r3, #24
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fe fe61 	bl	8003f92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052d0:	2101      	movs	r1, #1
 80052d2:	6838      	ldr	r0, [r7, #0]
 80052d4:	f000 fc82 	bl	8005bdc <prvAddCurrentTaskToDelayedList>
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20000820 	.word	0x20000820

080052e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	617b      	str	r3, [r7, #20]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <vTaskPlaceOnEventListRestricted+0x54>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3318      	adds	r3, #24
 8005312:	4619      	mov	r1, r3
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7fe fe18 	bl	8003f4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005324:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	68b8      	ldr	r0, [r7, #8]
 800532a:	f000 fc57 	bl	8005bdc <prvAddCurrentTaskToDelayedList>
	}
 800532e:	bf00      	nop
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000820 	.word	0x20000820

0800533c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60fb      	str	r3, [r7, #12]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	3318      	adds	r3, #24
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe fe49 	bl	8004004 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <xTaskRemoveFromEventList+0xb0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d11d      	bne.n	80053b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3304      	adds	r3, #4
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fe40 	bl	8004004 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <xTaskRemoveFromEventList+0xb4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d903      	bls.n	8005398 <xTaskRemoveFromEventList+0x5c>
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	4a16      	ldr	r2, [pc, #88]	; (80053f0 <xTaskRemoveFromEventList+0xb4>)
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <xTaskRemoveFromEventList+0xb8>)
 80053a6:	441a      	add	r2, r3
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f7fe fdcb 	bl	8003f4a <vListInsertEnd>
 80053b4:	e005      	b.n	80053c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	3318      	adds	r3, #24
 80053ba:	4619      	mov	r1, r3
 80053bc:	480e      	ldr	r0, [pc, #56]	; (80053f8 <xTaskRemoveFromEventList+0xbc>)
 80053be:	f7fe fdc4 	bl	8003f4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <xTaskRemoveFromEventList+0xc0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d905      	bls.n	80053dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <xTaskRemoveFromEventList+0xc4>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e001      	b.n	80053e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053e0:	697b      	ldr	r3, [r7, #20]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000d1c 	.word	0x20000d1c
 80053f0:	20000cfc 	.word	0x20000cfc
 80053f4:	20000824 	.word	0x20000824
 80053f8:	20000cb4 	.word	0x20000cb4
 80053fc:	20000820 	.word	0x20000820
 8005400:	20000d08 	.word	0x20000d08

08005404 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <vTaskInternalSetTimeOutState+0x24>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <vTaskInternalSetTimeOutState+0x28>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	605a      	str	r2, [r3, #4]
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	20000d0c 	.word	0x20000d0c
 800542c:	20000cf8 	.word	0x20000cf8

08005430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	613b      	str	r3, [r7, #16]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60fb      	str	r3, [r7, #12]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005472:	f001 f87f 	bl	8006574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005476:	4b1d      	ldr	r3, [pc, #116]	; (80054ec <xTaskCheckForTimeOut+0xbc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800548e:	d102      	bne.n	8005496 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]
 8005494:	e023      	b.n	80054de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <xTaskCheckForTimeOut+0xc0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d007      	beq.n	80054b2 <xTaskCheckForTimeOut+0x82>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d302      	bcc.n	80054b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	e015      	b.n	80054de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d20b      	bcs.n	80054d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ff9b 	bl	8005404 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e004      	b.n	80054de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054da:	2301      	movs	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054de:	f001 f879 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 80054e2:	69fb      	ldr	r3, [r7, #28]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000cf8 	.word	0x20000cf8
 80054f0:	20000d0c 	.word	0x20000d0c

080054f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054f8:	4b03      	ldr	r3, [pc, #12]	; (8005508 <vTaskMissedYield+0x14>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	601a      	str	r2, [r3, #0]
}
 80054fe:	bf00      	nop
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	20000d08 	.word	0x20000d08

0800550c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005514:	f000 f852 	bl	80055bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <prvIdleTask+0x28>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d9f9      	bls.n	8005514 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <prvIdleTask+0x2c>)
 8005522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005530:	e7f0      	b.n	8005514 <prvIdleTask+0x8>
 8005532:	bf00      	nop
 8005534:	20000824 	.word	0x20000824
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005542:	2300      	movs	r3, #0
 8005544:	607b      	str	r3, [r7, #4]
 8005546:	e00c      	b.n	8005562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4a12      	ldr	r2, [pc, #72]	; (800559c <prvInitialiseTaskLists+0x60>)
 8005554:	4413      	add	r3, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fcca 	bl	8003ef0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3301      	adds	r3, #1
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b37      	cmp	r3, #55	; 0x37
 8005566:	d9ef      	bls.n	8005548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005568:	480d      	ldr	r0, [pc, #52]	; (80055a0 <prvInitialiseTaskLists+0x64>)
 800556a:	f7fe fcc1 	bl	8003ef0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800556e:	480d      	ldr	r0, [pc, #52]	; (80055a4 <prvInitialiseTaskLists+0x68>)
 8005570:	f7fe fcbe 	bl	8003ef0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005574:	480c      	ldr	r0, [pc, #48]	; (80055a8 <prvInitialiseTaskLists+0x6c>)
 8005576:	f7fe fcbb 	bl	8003ef0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800557a:	480c      	ldr	r0, [pc, #48]	; (80055ac <prvInitialiseTaskLists+0x70>)
 800557c:	f7fe fcb8 	bl	8003ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005580:	480b      	ldr	r0, [pc, #44]	; (80055b0 <prvInitialiseTaskLists+0x74>)
 8005582:	f7fe fcb5 	bl	8003ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005586:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <prvInitialiseTaskLists+0x78>)
 8005588:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <prvInitialiseTaskLists+0x64>)
 800558a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <prvInitialiseTaskLists+0x7c>)
 800558e:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <prvInitialiseTaskLists+0x68>)
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000824 	.word	0x20000824
 80055a0:	20000c84 	.word	0x20000c84
 80055a4:	20000c98 	.word	0x20000c98
 80055a8:	20000cb4 	.word	0x20000cb4
 80055ac:	20000cc8 	.word	0x20000cc8
 80055b0:	20000ce0 	.word	0x20000ce0
 80055b4:	20000cac 	.word	0x20000cac
 80055b8:	20000cb0 	.word	0x20000cb0

080055bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055c2:	e019      	b.n	80055f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055c4:	f000 ffd6 	bl	8006574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c8:	4b10      	ldr	r3, [pc, #64]	; (800560c <prvCheckTasksWaitingTermination+0x50>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe fd15 	bl	8004004 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <prvCheckTasksWaitingTermination+0x54>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3b01      	subs	r3, #1
 80055e0:	4a0b      	ldr	r2, [pc, #44]	; (8005610 <prvCheckTasksWaitingTermination+0x54>)
 80055e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <prvCheckTasksWaitingTermination+0x58>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	4a0a      	ldr	r2, [pc, #40]	; (8005614 <prvCheckTasksWaitingTermination+0x58>)
 80055ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055ee:	f000 fff1 	bl	80065d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f810 	bl	8005618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <prvCheckTasksWaitingTermination+0x58>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e1      	bne.n	80055c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000cc8 	.word	0x20000cc8
 8005610:	20000cf4 	.word	0x20000cf4
 8005614:	20000cdc 	.word	0x20000cdc

08005618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3354      	adds	r3, #84	; 0x54
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fafb 	bl	8006c20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005630:	2b00      	cmp	r3, #0
 8005632:	d108      	bne.n	8005646 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	4618      	mov	r0, r3
 800563a:	f001 f989 	bl	8006950 <vPortFree>
				vPortFree( pxTCB );
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f001 f986 	bl	8006950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005644:	e018      	b.n	8005678 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800564c:	2b01      	cmp	r3, #1
 800564e:	d103      	bne.n	8005658 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 f97d 	bl	8006950 <vPortFree>
	}
 8005656:	e00f      	b.n	8005678 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800565e:	2b02      	cmp	r3, #2
 8005660:	d00a      	beq.n	8005678 <prvDeleteTCB+0x60>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60fb      	str	r3, [r7, #12]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <prvDeleteTCB+0x5e>
	}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <prvResetNextTaskUnblockTime+0x38>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d104      	bne.n	800569a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <prvResetNextTaskUnblockTime+0x3c>)
 8005692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005696:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005698:	e008      	b.n	80056ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800569a:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <prvResetNextTaskUnblockTime+0x38>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4a04      	ldr	r2, [pc, #16]	; (80056bc <prvResetNextTaskUnblockTime+0x3c>)
 80056aa:	6013      	str	r3, [r2, #0]
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	20000cac 	.word	0x20000cac
 80056bc:	20000d14 	.word	0x20000d14

080056c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <xTaskGetSchedulerState+0x34>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ce:	2301      	movs	r3, #1
 80056d0:	607b      	str	r3, [r7, #4]
 80056d2:	e008      	b.n	80056e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d4:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <xTaskGetSchedulerState+0x38>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056dc:	2302      	movs	r3, #2
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	e001      	b.n	80056e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056e6:	687b      	ldr	r3, [r7, #4]
	}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	20000d00 	.word	0x20000d00
 80056f8:	20000d1c 	.word	0x20000d1c

080056fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d056      	beq.n	80057c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <xTaskPriorityDisinherit+0xd0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	429a      	cmp	r2, r3
 800571a:	d00a      	beq.n	8005732 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	60fb      	str	r3, [r7, #12]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	60bb      	str	r3, [r7, #8]
}
 800574c:	bf00      	nop
 800574e:	e7fe      	b.n	800574e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005754:	1e5a      	subs	r2, r3, #1
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005762:	429a      	cmp	r2, r3
 8005764:	d02c      	beq.n	80057c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576a:	2b00      	cmp	r3, #0
 800576c:	d128      	bne.n	80057c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	3304      	adds	r3, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fc46 	bl	8004004 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <xTaskPriorityDisinherit+0xd4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d903      	bls.n	80057a0 <xTaskPriorityDisinherit+0xa4>
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <xTaskPriorityDisinherit+0xd4>)
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <xTaskPriorityDisinherit+0xd8>)
 80057ae:	441a      	add	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f7fe fbc7 	bl	8003f4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057bc:	2301      	movs	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057c0:	697b      	ldr	r3, [r7, #20]
	}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000820 	.word	0x20000820
 80057d0:	20000cfc 	.word	0x20000cfc
 80057d4:	20000824 	.word	0x20000824

080057d8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80057e6:	f000 fec5 	bl	8006574 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80057ea:	4b29      	ldr	r3, [pc, #164]	; (8005890 <xTaskNotifyWait+0xb8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d01c      	beq.n	8005832 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <xTaskNotifyWait+0xb8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	43d2      	mvns	r2, r2
 8005804:	400a      	ands	r2, r1
 8005806:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800580a:	4b21      	ldr	r3, [pc, #132]	; (8005890 <xTaskNotifyWait+0xb8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800581a:	2101      	movs	r1, #1
 800581c:	6838      	ldr	r0, [r7, #0]
 800581e:	f000 f9dd 	bl	8005bdc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005822:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <xTaskNotifyWait+0xbc>)
 8005824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005832:	f000 fecf 	bl	80065d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005836:	f000 fe9d 	bl	8006574 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005840:	4b13      	ldr	r3, [pc, #76]	; (8005890 <xTaskNotifyWait+0xb8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800584c:	4b10      	ldr	r3, [pc, #64]	; (8005890 <xTaskNotifyWait+0xb8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d002      	beq.n	8005860 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	e00a      	b.n	8005876 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <xTaskNotifyWait+0xb8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	43d2      	mvns	r2, r2
 800586c:	400a      	ands	r2, r1
 800586e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8005872:	2301      	movs	r3, #1
 8005874:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005876:	4b06      	ldr	r3, [pc, #24]	; (8005890 <xTaskNotifyWait+0xb8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8005880:	f000 fea8 	bl	80065d4 <vPortExitCritical>

		return xReturn;
 8005884:	697b      	ldr	r3, [r7, #20]
	}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000820 	.word	0x20000820
 8005894:	e000ed04 	.word	0xe000ed04

08005898 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	4613      	mov	r3, r2
 80058a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80058a8:	2301      	movs	r3, #1
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <xTaskGenericNotify+0x30>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	61bb      	str	r3, [r7, #24]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80058cc:	f000 fe52 	bl	8006574 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80058e6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d82d      	bhi.n	8005952 <xTaskGenericNotify+0xba>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <xTaskGenericNotify+0x64>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005975 	.word	0x08005975
 8005900:	08005911 	.word	0x08005911
 8005904:	08005923 	.word	0x08005923
 8005908:	08005933 	.word	0x08005933
 800590c:	0800593d 	.word	0x0800593d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	431a      	orrs	r2, r3
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005920:	e02b      	b.n	800597a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005930:	e023      	b.n	800597a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800593a:	e01e      	b.n	800597a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800593c:	7ffb      	ldrb	r3, [r7, #31]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d004      	beq.n	800594c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800594a:	e016      	b.n	800597a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800594c:	2300      	movs	r3, #0
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005950:	e013      	b.n	800597a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800595c:	d00c      	beq.n	8005978 <xTaskGenericNotify+0xe0>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	617b      	str	r3, [r7, #20]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <xTaskGenericNotify+0xda>
					break;
 8005974:	bf00      	nop
 8005976:	e000      	b.n	800597a <xTaskGenericNotify+0xe2>

					break;
 8005978:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800597a:	7ffb      	ldrb	r3, [r7, #31]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d13a      	bne.n	80059f6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	3304      	adds	r3, #4
 8005984:	4618      	mov	r0, r3
 8005986:	f7fe fb3d 	bl	8004004 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	4b1d      	ldr	r3, [pc, #116]	; (8005a04 <xTaskGenericNotify+0x16c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d903      	bls.n	800599e <xTaskGenericNotify+0x106>
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <xTaskGenericNotify+0x16c>)
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <xTaskGenericNotify+0x170>)
 80059ac:	441a      	add	r2, r3
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fe fac8 	bl	8003f4a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <xTaskGenericNotify+0x140>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	613b      	str	r3, [r7, #16]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059dc:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <xTaskGenericNotify+0x174>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d907      	bls.n	80059f6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80059e6:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <xTaskGenericNotify+0x178>)
 80059e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80059f6:	f000 fded 	bl	80065d4 <vPortExitCritical>

		return xReturn;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3728      	adds	r7, #40	; 0x28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000cfc 	.word	0x20000cfc
 8005a08:	20000824 	.word	0x20000824
 8005a0c:	20000820 	.word	0x20000820
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08e      	sub	sp, #56	; 0x38
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005a24:	2301      	movs	r3, #1
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a40:	bf00      	nop
 8005a42:	e7fe      	b.n	8005a42 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a44:	f000 fe78 	bl	8006738 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005a4c:	f3ef 8211 	mrs	r2, BASEPRI
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	623a      	str	r2, [r7, #32]
 8005a62:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005a64:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d004      	beq.n	8005a78 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d82f      	bhi.n	8005af0 <xTaskGenericNotifyFromISR+0xdc>
 8005a90:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <xTaskGenericNotifyFromISR+0x84>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005b13 	.word	0x08005b13
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005abf 	.word	0x08005abf
 8005aa4:	08005acf 	.word	0x08005acf
 8005aa8:	08005ad9 	.word	0x08005ad9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005abc:	e02c      	b.n	8005b18 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005acc:	e024      	b.n	8005b18 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8005ad6:	e01f      	b.n	8005b18 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d004      	beq.n	8005aea <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005ae8:	e016      	b.n	8005b18 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005aee:	e013      	b.n	8005b18 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005afa:	d00c      	beq.n	8005b16 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	61bb      	str	r3, [r7, #24]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <xTaskGenericNotifyFromISR+0x104>
					break;
 8005b16:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005b18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d146      	bne.n	8005bae <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	617b      	str	r3, [r7, #20]
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b3e:	4b21      	ldr	r3, [pc, #132]	; (8005bc4 <xTaskGenericNotifyFromISR+0x1b0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d11d      	bne.n	8005b82 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fa5a 	bl	8004004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <xTaskGenericNotifyFromISR+0x1b4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d903      	bls.n	8005b64 <xTaskGenericNotifyFromISR+0x150>
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <xTaskGenericNotifyFromISR+0x1b4>)
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <xTaskGenericNotifyFromISR+0x1b8>)
 8005b72:	441a      	add	r2, r3
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	3304      	adds	r3, #4
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f7fe f9e5 	bl	8003f4a <vListInsertEnd>
 8005b80:	e005      	b.n	8005b8e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	3318      	adds	r3, #24
 8005b86:	4619      	mov	r1, r3
 8005b88:	4811      	ldr	r0, [pc, #68]	; (8005bd0 <xTaskGenericNotifyFromISR+0x1bc>)
 8005b8a:	f7fe f9de 	bl	8003f4a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b92:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <xTaskGenericNotifyFromISR+0x1c0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d908      	bls.n	8005bae <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <xTaskGenericNotifyFromISR+0x1c4>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f383 8811 	msr	BASEPRI, r3
}
 8005bb8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3738      	adds	r7, #56	; 0x38
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000d1c 	.word	0x20000d1c
 8005bc8:	20000cfc 	.word	0x20000cfc
 8005bcc:	20000824 	.word	0x20000824
 8005bd0:	20000cb4 	.word	0x20000cb4
 8005bd4:	20000820 	.word	0x20000820
 8005bd8:	20000d08 	.word	0x20000d08

08005bdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005be6:	4b21      	ldr	r3, [pc, #132]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x90>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bec:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fa06 	bl	8004004 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bfe:	d10a      	bne.n	8005c16 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d007      	beq.n	8005c16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c06:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4819      	ldr	r0, [pc, #100]	; (8005c74 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c10:	f7fe f99b 	bl	8003f4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c14:	e026      	b.n	8005c64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c1e:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d209      	bcs.n	8005c42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c2e:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f7fe f9a9 	bl	8003f92 <vListInsert>
}
 8005c40:	e010      	b.n	8005c64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c42:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7fe f99f 	bl	8003f92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d202      	bcs.n	8005c64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c5e:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6013      	str	r3, [r2, #0]
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20000cf8 	.word	0x20000cf8
 8005c70:	20000820 	.word	0x20000820
 8005c74:	20000ce0 	.word	0x20000ce0
 8005c78:	20000cb0 	.word	0x20000cb0
 8005c7c:	20000cac 	.word	0x20000cac
 8005c80:	20000d14 	.word	0x20000d14

08005c84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c8e:	f000 fb07 	bl	80062a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <xTimerCreateTimerTask+0x80>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d021      	beq.n	8005cde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ca2:	1d3a      	adds	r2, r7, #4
 8005ca4:	f107 0108 	add.w	r1, r7, #8
 8005ca8:	f107 030c 	add.w	r3, r7, #12
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe f905 	bl	8003ebc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	9202      	str	r2, [sp, #8]
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	4910      	ldr	r1, [pc, #64]	; (8005d08 <xTimerCreateTimerTask+0x84>)
 8005cc6:	4811      	ldr	r0, [pc, #68]	; (8005d0c <xTimerCreateTimerTask+0x88>)
 8005cc8:	f7fe feb2 	bl	8004a30 <xTaskCreateStatic>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4a10      	ldr	r2, [pc, #64]	; (8005d10 <xTimerCreateTimerTask+0x8c>)
 8005cd0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <xTimerCreateTimerTask+0x8c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	613b      	str	r3, [r7, #16]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005cfa:	697b      	ldr	r3, [r7, #20]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000d50 	.word	0x20000d50
 8005d08:	08006dd0 	.word	0x08006dd0
 8005d0c:	08005e49 	.word	0x08005e49
 8005d10:	20000d54 	.word	0x20000d54

08005d14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08a      	sub	sp, #40	; 0x28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	623b      	str	r3, [r7, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d42:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <xTimerGenericCommand+0x98>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d02a      	beq.n	8005da0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b05      	cmp	r3, #5
 8005d5a:	dc18      	bgt.n	8005d8e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d5c:	f7ff fcb0 	bl	80056c0 <xTaskGetSchedulerState>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d109      	bne.n	8005d7a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d66:	4b11      	ldr	r3, [pc, #68]	; (8005dac <xTimerGenericCommand+0x98>)
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	f107 0110 	add.w	r1, r7, #16
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d72:	f7fe fa75 	bl	8004260 <xQueueGenericSend>
 8005d76:	6278      	str	r0, [r7, #36]	; 0x24
 8005d78:	e012      	b.n	8005da0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <xTimerGenericCommand+0x98>)
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	f107 0110 	add.w	r1, r7, #16
 8005d82:	2300      	movs	r3, #0
 8005d84:	2200      	movs	r2, #0
 8005d86:	f7fe fa6b 	bl	8004260 <xQueueGenericSend>
 8005d8a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d8c:	e008      	b.n	8005da0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <xTimerGenericCommand+0x98>)
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	f107 0110 	add.w	r1, r7, #16
 8005d96:	2300      	movs	r3, #0
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	f7fe fb5f 	bl	800445c <xQueueGenericSendFromISR>
 8005d9e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3728      	adds	r7, #40	; 0x28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000d50 	.word	0x20000d50

08005db0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dba:	4b22      	ldr	r3, [pc, #136]	; (8005e44 <prvProcessExpiredTimer+0x94>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe f91b 	bl	8004004 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d022      	beq.n	8005e22 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	18d1      	adds	r1, r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	6978      	ldr	r0, [r7, #20]
 8005dea:	f000 f8d1 	bl	8005f90 <prvInsertTimerInActiveList>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01f      	beq.n	8005e34 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005df4:	2300      	movs	r3, #0
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	6978      	ldr	r0, [r7, #20]
 8005e00:	f7ff ff88 	bl	8005d14 <xTimerGenericCommand>
 8005e04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d113      	bne.n	8005e34 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60fb      	str	r3, [r7, #12]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	6978      	ldr	r0, [r7, #20]
 8005e3a:	4798      	blx	r3
}
 8005e3c:	bf00      	nop
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20000d48 	.word	0x20000d48

08005e48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e50:	f107 0308 	add.w	r3, r7, #8
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 f857 	bl	8005f08 <prvGetNextExpireTime>
 8005e5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f803 	bl	8005e6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e66:	f000 f8d5 	bl	8006014 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e6a:	e7f1      	b.n	8005e50 <prvTimerTask+0x8>

08005e6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e76:	f7ff f837 	bl	8004ee8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e7a:	f107 0308 	add.w	r3, r7, #8
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 f866 	bl	8005f50 <prvSampleTimeNow>
 8005e84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d130      	bne.n	8005eee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <prvProcessTimerOrBlockTask+0x3c>
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d806      	bhi.n	8005ea8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e9a:	f7ff f833 	bl	8004f04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff85 	bl	8005db0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ea6:	e024      	b.n	8005ef2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005eae:	4b13      	ldr	r3, [pc, #76]	; (8005efc <prvProcessTimerOrBlockTask+0x90>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <prvProcessTimerOrBlockTask+0x50>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <prvProcessTimerOrBlockTask+0x52>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <prvProcessTimerOrBlockTask+0x94>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f7fe fd7b 	bl	80049c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ed2:	f7ff f817 	bl	8004f04 <xTaskResumeAll>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005edc:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <prvProcessTimerOrBlockTask+0x98>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
}
 8005eec:	e001      	b.n	8005ef2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005eee:	f7ff f809 	bl	8004f04 <xTaskResumeAll>
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000d4c 	.word	0x20000d4c
 8005f00:	20000d50 	.word	0x20000d50
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f10:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <prvGetNextExpireTime+0x44>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <prvGetNextExpireTime+0x16>
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	e000      	b.n	8005f20 <prvGetNextExpireTime+0x18>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f2c:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <prvGetNextExpireTime+0x44>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e001      	b.n	8005f3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	20000d48 	.word	0x20000d48

08005f50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f58:	f7ff f872 	bl	8005040 <xTaskGetTickCount>
 8005f5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <prvSampleTimeNow+0x3c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d205      	bcs.n	8005f74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f68:	f000 f936 	bl	80061d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e002      	b.n	8005f7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f7a:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <prvSampleTimeNow+0x3c>)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f80:	68fb      	ldr	r3, [r7, #12]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000d58 	.word	0x20000d58

08005f90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d812      	bhi.n	8005fdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d302      	bcc.n	8005fca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e01b      	b.n	8006002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fca:	4b10      	ldr	r3, [pc, #64]	; (800600c <prvInsertTimerInActiveList+0x7c>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f7fd ffdc 	bl	8003f92 <vListInsert>
 8005fda:	e012      	b.n	8006002 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d206      	bcs.n	8005ff2 <prvInsertTimerInActiveList+0x62>
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d302      	bcc.n	8005ff2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fec:	2301      	movs	r3, #1
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	e007      	b.n	8006002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ff2:	4b07      	ldr	r3, [pc, #28]	; (8006010 <prvInsertTimerInActiveList+0x80>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	f7fd ffc8 	bl	8003f92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006002:	697b      	ldr	r3, [r7, #20]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20000d4c 	.word	0x20000d4c
 8006010:	20000d48 	.word	0x20000d48

08006014 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08e      	sub	sp, #56	; 0x38
 8006018:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800601a:	e0ca      	b.n	80061b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	da18      	bge.n	8006054 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006022:	1d3b      	adds	r3, r7, #4
 8006024:	3304      	adds	r3, #4
 8006026:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	61fb      	str	r3, [r7, #28]
}
 8006040:	bf00      	nop
 8006042:	e7fe      	b.n	8006042 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800604a:	6850      	ldr	r0, [r2, #4]
 800604c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800604e:	6892      	ldr	r2, [r2, #8]
 8006050:	4611      	mov	r1, r2
 8006052:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f2c0 80aa 	blt.w	80061b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	3304      	adds	r3, #4
 800606c:	4618      	mov	r0, r3
 800606e:	f7fd ffc9 	bl	8004004 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006072:	463b      	mov	r3, r7
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff ff6b 	bl	8005f50 <prvSampleTimeNow>
 800607a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b09      	cmp	r3, #9
 8006080:	f200 8097 	bhi.w	80061b2 <prvProcessReceivedCommands+0x19e>
 8006084:	a201      	add	r2, pc, #4	; (adr r2, 800608c <prvProcessReceivedCommands+0x78>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	080060b5 	.word	0x080060b5
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060b5 	.word	0x080060b5
 8006098:	08006129 	.word	0x08006129
 800609c:	0800613d 	.word	0x0800613d
 80060a0:	08006187 	.word	0x08006187
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060b5 	.word	0x080060b5
 80060ac:	08006129 	.word	0x08006129
 80060b0:	0800613d 	.word	0x0800613d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	18d1      	adds	r1, r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d4:	f7ff ff5c 	bl	8005f90 <prvInsertTimerInActiveList>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d069      	beq.n	80061b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d05e      	beq.n	80061b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	441a      	add	r2, r3
 80060fc:	2300      	movs	r3, #0
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	2300      	movs	r3, #0
 8006102:	2100      	movs	r1, #0
 8006104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006106:	f7ff fe05 	bl	8005d14 <xTimerGenericCommand>
 800610a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d14f      	bne.n	80061b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	61bb      	str	r3, [r7, #24]
}
 8006124:	bf00      	nop
 8006126:	e7fe      	b.n	8006126 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	b2da      	uxtb	r2, r3
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800613a:	e03a      	b.n	80061b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006142:	f043 0301 	orr.w	r3, r3, #1
 8006146:	b2da      	uxtb	r2, r3
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	617b      	str	r3, [r7, #20]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	18d1      	adds	r1, r2, r3
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006180:	f7ff ff06 	bl	8005f90 <prvInsertTimerInActiveList>
					break;
 8006184:	e015      	b.n	80061b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006196:	f000 fbdb 	bl	8006950 <vPortFree>
 800619a:	e00a      	b.n	80061b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061ae:	e000      	b.n	80061b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061b2:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <prvProcessReceivedCommands+0x1c0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	1d39      	adds	r1, r7, #4
 80061b8:	2200      	movs	r2, #0
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe f9ea 	bl	8004594 <xQueueReceive>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f47f af2a 	bne.w	800601c <prvProcessReceivedCommands+0x8>
	}
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	3730      	adds	r7, #48	; 0x30
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000d50 	.word	0x20000d50

080061d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061de:	e048      	b.n	8006272 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061e0:	4b2d      	ldr	r3, [pc, #180]	; (8006298 <prvSwitchTimerLists+0xc0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ea:	4b2b      	ldr	r3, [pc, #172]	; (8006298 <prvSwitchTimerLists+0xc0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3304      	adds	r3, #4
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fd ff03 	bl	8004004 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d02e      	beq.n	8006272 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	429a      	cmp	r2, r3
 8006224:	d90e      	bls.n	8006244 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006232:	4b19      	ldr	r3, [pc, #100]	; (8006298 <prvSwitchTimerLists+0xc0>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f7fd fea8 	bl	8003f92 <vListInsert>
 8006242:	e016      	b.n	8006272 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006244:	2300      	movs	r3, #0
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	2300      	movs	r3, #0
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	2100      	movs	r1, #0
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff fd60 	bl	8005d14 <xTimerGenericCommand>
 8006254:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	603b      	str	r3, [r7, #0]
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006272:	4b09      	ldr	r3, [pc, #36]	; (8006298 <prvSwitchTimerLists+0xc0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1b1      	bne.n	80061e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <prvSwitchTimerLists+0xc0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006282:	4b06      	ldr	r3, [pc, #24]	; (800629c <prvSwitchTimerLists+0xc4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a04      	ldr	r2, [pc, #16]	; (8006298 <prvSwitchTimerLists+0xc0>)
 8006288:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800628a:	4a04      	ldr	r2, [pc, #16]	; (800629c <prvSwitchTimerLists+0xc4>)
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6013      	str	r3, [r2, #0]
}
 8006290:	bf00      	nop
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20000d48 	.word	0x20000d48
 800629c:	20000d4c 	.word	0x20000d4c

080062a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062a6:	f000 f965 	bl	8006574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062aa:	4b15      	ldr	r3, [pc, #84]	; (8006300 <prvCheckForValidListAndQueue+0x60>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d120      	bne.n	80062f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062b2:	4814      	ldr	r0, [pc, #80]	; (8006304 <prvCheckForValidListAndQueue+0x64>)
 80062b4:	f7fd fe1c 	bl	8003ef0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062b8:	4813      	ldr	r0, [pc, #76]	; (8006308 <prvCheckForValidListAndQueue+0x68>)
 80062ba:	f7fd fe19 	bl	8003ef0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <prvCheckForValidListAndQueue+0x6c>)
 80062c0:	4a10      	ldr	r2, [pc, #64]	; (8006304 <prvCheckForValidListAndQueue+0x64>)
 80062c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062c4:	4b12      	ldr	r3, [pc, #72]	; (8006310 <prvCheckForValidListAndQueue+0x70>)
 80062c6:	4a10      	ldr	r2, [pc, #64]	; (8006308 <prvCheckForValidListAndQueue+0x68>)
 80062c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062ca:	2300      	movs	r3, #0
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <prvCheckForValidListAndQueue+0x74>)
 80062d0:	4a11      	ldr	r2, [pc, #68]	; (8006318 <prvCheckForValidListAndQueue+0x78>)
 80062d2:	2110      	movs	r1, #16
 80062d4:	200a      	movs	r0, #10
 80062d6:	f7fd ff27 	bl	8004128 <xQueueGenericCreateStatic>
 80062da:	4603      	mov	r3, r0
 80062dc:	4a08      	ldr	r2, [pc, #32]	; (8006300 <prvCheckForValidListAndQueue+0x60>)
 80062de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062e0:	4b07      	ldr	r3, [pc, #28]	; (8006300 <prvCheckForValidListAndQueue+0x60>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062e8:	4b05      	ldr	r3, [pc, #20]	; (8006300 <prvCheckForValidListAndQueue+0x60>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	490b      	ldr	r1, [pc, #44]	; (800631c <prvCheckForValidListAndQueue+0x7c>)
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fb40 	bl	8004974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062f4:	f000 f96e 	bl	80065d4 <vPortExitCritical>
}
 80062f8:	bf00      	nop
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000d50 	.word	0x20000d50
 8006304:	20000d20 	.word	0x20000d20
 8006308:	20000d34 	.word	0x20000d34
 800630c:	20000d48 	.word	0x20000d48
 8006310:	20000d4c 	.word	0x20000d4c
 8006314:	20000dfc 	.word	0x20000dfc
 8006318:	20000d5c 	.word	0x20000d5c
 800631c:	08006dd8 	.word	0x08006dd8

08006320 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3b04      	subs	r3, #4
 8006330:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3b04      	subs	r3, #4
 800633e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f023 0201 	bic.w	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3b04      	subs	r3, #4
 800634e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006350:	4a0c      	ldr	r2, [pc, #48]	; (8006384 <pxPortInitialiseStack+0x64>)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3b14      	subs	r3, #20
 800635a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3b04      	subs	r3, #4
 8006366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f06f 0202 	mvn.w	r2, #2
 800636e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3b20      	subs	r3, #32
 8006374:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006376:	68fb      	ldr	r3, [r7, #12]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	08006389 	.word	0x08006389

08006388 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006392:	4b12      	ldr	r3, [pc, #72]	; (80063dc <prvTaskExitError+0x54>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800639a:	d00a      	beq.n	80063b2 <prvTaskExitError+0x2a>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	60fb      	str	r3, [r7, #12]
}
 80063ae:	bf00      	nop
 80063b0:	e7fe      	b.n	80063b0 <prvTaskExitError+0x28>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	60bb      	str	r3, [r7, #8]
}
 80063c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063c6:	bf00      	nop
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0fc      	beq.n	80063c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	20000010 	.word	0x20000010

080063e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <pxCurrentTCBConst2>)
 80063e2:	6819      	ldr	r1, [r3, #0]
 80063e4:	6808      	ldr	r0, [r1, #0]
 80063e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ea:	f380 8809 	msr	PSP, r0
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f380 8811 	msr	BASEPRI, r0
 80063fa:	4770      	bx	lr
 80063fc:	f3af 8000 	nop.w

08006400 <pxCurrentTCBConst2>:
 8006400:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop

08006408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006408:	4808      	ldr	r0, [pc, #32]	; (800642c <prvPortStartFirstTask+0x24>)
 800640a:	6800      	ldr	r0, [r0, #0]
 800640c:	6800      	ldr	r0, [r0, #0]
 800640e:	f380 8808 	msr	MSP, r0
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8814 	msr	CONTROL, r0
 800641a:	b662      	cpsie	i
 800641c:	b661      	cpsie	f
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	df00      	svc	0
 8006428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800642a:	bf00      	nop
 800642c:	e000ed08 	.word	0xe000ed08

08006430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006436:	4b46      	ldr	r3, [pc, #280]	; (8006550 <xPortStartScheduler+0x120>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a46      	ldr	r2, [pc, #280]	; (8006554 <xPortStartScheduler+0x124>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d10a      	bne.n	8006456 <xPortStartScheduler+0x26>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	613b      	str	r3, [r7, #16]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006456:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <xPortStartScheduler+0x120>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a3f      	ldr	r2, [pc, #252]	; (8006558 <xPortStartScheduler+0x128>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10a      	bne.n	8006476 <xPortStartScheduler+0x46>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60fb      	str	r3, [r7, #12]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006476:	4b39      	ldr	r3, [pc, #228]	; (800655c <xPortStartScheduler+0x12c>)
 8006478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	22ff      	movs	r2, #255	; 0xff
 8006486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006498:	b2da      	uxtb	r2, r3
 800649a:	4b31      	ldr	r3, [pc, #196]	; (8006560 <xPortStartScheduler+0x130>)
 800649c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800649e:	4b31      	ldr	r3, [pc, #196]	; (8006564 <xPortStartScheduler+0x134>)
 80064a0:	2207      	movs	r2, #7
 80064a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064a4:	e009      	b.n	80064ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064a6:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <xPortStartScheduler+0x134>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	4a2d      	ldr	r2, [pc, #180]	; (8006564 <xPortStartScheduler+0x134>)
 80064ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d0ef      	beq.n	80064a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064c6:	4b27      	ldr	r3, [pc, #156]	; (8006564 <xPortStartScheduler+0x134>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f1c3 0307 	rsb	r3, r3, #7
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d00a      	beq.n	80064e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60bb      	str	r3, [r7, #8]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064e8:	4b1e      	ldr	r3, [pc, #120]	; (8006564 <xPortStartScheduler+0x134>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <xPortStartScheduler+0x134>)
 80064f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064f2:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <xPortStartScheduler+0x134>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064fa:	4a1a      	ldr	r2, [pc, #104]	; (8006564 <xPortStartScheduler+0x134>)
 80064fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006506:	4b18      	ldr	r3, [pc, #96]	; (8006568 <xPortStartScheduler+0x138>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a17      	ldr	r2, [pc, #92]	; (8006568 <xPortStartScheduler+0x138>)
 800650c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <xPortStartScheduler+0x138>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a14      	ldr	r2, [pc, #80]	; (8006568 <xPortStartScheduler+0x138>)
 8006518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800651c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800651e:	f000 f8dd 	bl	80066dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <xPortStartScheduler+0x13c>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006528:	f000 f8fc 	bl	8006724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <xPortStartScheduler+0x140>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a0f      	ldr	r2, [pc, #60]	; (8006570 <xPortStartScheduler+0x140>)
 8006532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006538:	f7ff ff66 	bl	8006408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800653c:	f7fe fe4a 	bl	80051d4 <vTaskSwitchContext>
	prvTaskExitError();
 8006540:	f7ff ff22 	bl	8006388 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	e000ed00 	.word	0xe000ed00
 8006554:	410fc271 	.word	0x410fc271
 8006558:	410fc270 	.word	0x410fc270
 800655c:	e000e400 	.word	0xe000e400
 8006560:	20000e4c 	.word	0x20000e4c
 8006564:	20000e50 	.word	0x20000e50
 8006568:	e000ed20 	.word	0xe000ed20
 800656c:	20000010 	.word	0x20000010
 8006570:	e000ef34 	.word	0xe000ef34

08006574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	607b      	str	r3, [r7, #4]
}
 800658c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800658e:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <vPortEnterCritical+0x58>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a0d      	ldr	r2, [pc, #52]	; (80065cc <vPortEnterCritical+0x58>)
 8006596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006598:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <vPortEnterCritical+0x58>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d10f      	bne.n	80065c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <vPortEnterCritical+0x5c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	603b      	str	r3, [r7, #0]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <vPortEnterCritical+0x4a>
	}
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	20000010 	.word	0x20000010
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <vPortExitCritical+0x50>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <vPortExitCritical+0x24>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	607b      	str	r3, [r7, #4]
}
 80065f4:	bf00      	nop
 80065f6:	e7fe      	b.n	80065f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <vPortExitCritical+0x50>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <vPortExitCritical+0x50>)
 8006600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <vPortExitCritical+0x50>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d105      	bne.n	8006616 <vPortExitCritical+0x42>
 800660a:	2300      	movs	r3, #0
 800660c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f383 8811 	msr	BASEPRI, r3
}
 8006614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20000010 	.word	0x20000010
	...

08006630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006630:	f3ef 8009 	mrs	r0, PSP
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	4b15      	ldr	r3, [pc, #84]	; (8006690 <pxCurrentTCBConst>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	f01e 0f10 	tst.w	lr, #16
 8006640:	bf08      	it	eq
 8006642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664a:	6010      	str	r0, [r2, #0]
 800664c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006654:	f380 8811 	msr	BASEPRI, r0
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f7fe fdb8 	bl	80051d4 <vTaskSwitchContext>
 8006664:	f04f 0000 	mov.w	r0, #0
 8006668:	f380 8811 	msr	BASEPRI, r0
 800666c:	bc09      	pop	{r0, r3}
 800666e:	6819      	ldr	r1, [r3, #0]
 8006670:	6808      	ldr	r0, [r1, #0]
 8006672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006676:	f01e 0f10 	tst.w	lr, #16
 800667a:	bf08      	it	eq
 800667c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006680:	f380 8809 	msr	PSP, r0
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst>:
 8006690:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	607b      	str	r3, [r7, #4]
}
 80066b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066b2:	f7fe fcd5 	bl	8005060 <xTaskIncrementTick>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <xPortSysTickHandler+0x40>)
 80066be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	2300      	movs	r3, #0
 80066c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	f383 8811 	msr	BASEPRI, r3
}
 80066ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <vPortSetupTimerInterrupt+0x34>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <vPortSetupTimerInterrupt+0x38>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <vPortSetupTimerInterrupt+0x3c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a0a      	ldr	r2, [pc, #40]	; (800671c <vPortSetupTimerInterrupt+0x40>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	4a09      	ldr	r2, [pc, #36]	; (8006720 <vPortSetupTimerInterrupt+0x44>)
 80066fa:	3b01      	subs	r3, #1
 80066fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066fe:	4b04      	ldr	r3, [pc, #16]	; (8006710 <vPortSetupTimerInterrupt+0x34>)
 8006700:	2207      	movs	r2, #7
 8006702:	601a      	str	r2, [r3, #0]
}
 8006704:	bf00      	nop
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	e000e010 	.word	0xe000e010
 8006714:	e000e018 	.word	0xe000e018
 8006718:	20000004 	.word	0x20000004
 800671c:	10624dd3 	.word	0x10624dd3
 8006720:	e000e014 	.word	0xe000e014

08006724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006734 <vPortEnableVFP+0x10>
 8006728:	6801      	ldr	r1, [r0, #0]
 800672a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800672e:	6001      	str	r1, [r0, #0]
 8006730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006732:	bf00      	nop
 8006734:	e000ed88 	.word	0xe000ed88

08006738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800673e:	f3ef 8305 	mrs	r3, IPSR
 8006742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b0f      	cmp	r3, #15
 8006748:	d914      	bls.n	8006774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800674a:	4a17      	ldr	r2, [pc, #92]	; (80067a8 <vPortValidateInterruptPriority+0x70>)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006754:	4b15      	ldr	r3, [pc, #84]	; (80067ac <vPortValidateInterruptPriority+0x74>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	7afa      	ldrb	r2, [r7, #11]
 800675a:	429a      	cmp	r2, r3
 800675c:	d20a      	bcs.n	8006774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	607b      	str	r3, [r7, #4]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <vPortValidateInterruptPriority+0x78>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800677c:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <vPortValidateInterruptPriority+0x7c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d90a      	bls.n	800679a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	603b      	str	r3, [r7, #0]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <vPortValidateInterruptPriority+0x60>
	}
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	e000e3f0 	.word	0xe000e3f0
 80067ac:	20000e4c 	.word	0x20000e4c
 80067b0:	e000ed0c 	.word	0xe000ed0c
 80067b4:	20000e50 	.word	0x20000e50

080067b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	; 0x28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067c4:	f7fe fb90 	bl	8004ee8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067c8:	4b5b      	ldr	r3, [pc, #364]	; (8006938 <pvPortMalloc+0x180>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067d0:	f000 f920 	bl	8006a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067d4:	4b59      	ldr	r3, [pc, #356]	; (800693c <pvPortMalloc+0x184>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4013      	ands	r3, r2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 8093 	bne.w	8006908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01d      	beq.n	8006824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067e8:	2208      	movs	r2, #8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4413      	add	r3, r2
 80067ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f023 0307 	bic.w	r3, r3, #7
 8006800:	3308      	adds	r3, #8
 8006802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <pvPortMalloc+0x6c>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	617b      	str	r3, [r7, #20]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d06e      	beq.n	8006908 <pvPortMalloc+0x150>
 800682a:	4b45      	ldr	r3, [pc, #276]	; (8006940 <pvPortMalloc+0x188>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d869      	bhi.n	8006908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006834:	4b43      	ldr	r3, [pc, #268]	; (8006944 <pvPortMalloc+0x18c>)
 8006836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006838:	4b42      	ldr	r3, [pc, #264]	; (8006944 <pvPortMalloc+0x18c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800683e:	e004      	b.n	800684a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d903      	bls.n	800685c <pvPortMalloc+0xa4>
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f1      	bne.n	8006840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800685c:	4b36      	ldr	r3, [pc, #216]	; (8006938 <pvPortMalloc+0x180>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	429a      	cmp	r2, r3
 8006864:	d050      	beq.n	8006908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2208      	movs	r2, #8
 800686c:	4413      	add	r3, r2
 800686e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	2308      	movs	r3, #8
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	429a      	cmp	r2, r3
 8006886:	d91f      	bls.n	80068c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <pvPortMalloc+0xf8>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	613b      	str	r3, [r7, #16]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	1ad2      	subs	r2, r2, r3
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068c2:	69b8      	ldr	r0, [r7, #24]
 80068c4:	f000 f908 	bl	8006ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <pvPortMalloc+0x188>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <pvPortMalloc+0x188>)
 80068d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068d6:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <pvPortMalloc+0x188>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <pvPortMalloc+0x190>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d203      	bcs.n	80068ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068e2:	4b17      	ldr	r3, [pc, #92]	; (8006940 <pvPortMalloc+0x188>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a18      	ldr	r2, [pc, #96]	; (8006948 <pvPortMalloc+0x190>)
 80068e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	4b13      	ldr	r3, [pc, #76]	; (800693c <pvPortMalloc+0x184>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <pvPortMalloc+0x194>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	4a11      	ldr	r2, [pc, #68]	; (800694c <pvPortMalloc+0x194>)
 8006906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006908:	f7fe fafc 	bl	8004f04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <pvPortMalloc+0x174>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <pvPortMalloc+0x172>
	return pvReturn;
 800692c:	69fb      	ldr	r3, [r7, #28]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3728      	adds	r7, #40	; 0x28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20004a5c 	.word	0x20004a5c
 800693c:	20004a70 	.word	0x20004a70
 8006940:	20004a60 	.word	0x20004a60
 8006944:	20004a54 	.word	0x20004a54
 8006948:	20004a64 	.word	0x20004a64
 800694c:	20004a68 	.word	0x20004a68

08006950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d04d      	beq.n	80069fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006962:	2308      	movs	r3, #8
 8006964:	425b      	negs	r3, r3
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4413      	add	r3, r2
 800696a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	4b24      	ldr	r3, [pc, #144]	; (8006a08 <vPortFree+0xb8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4013      	ands	r3, r2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <vPortFree+0x44>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	60fb      	str	r3, [r7, #12]
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <vPortFree+0x62>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	60bb      	str	r3, [r7, #8]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <vPortFree+0xb8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01e      	beq.n	80069fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11a      	bne.n	80069fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <vPortFree+0xb8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	43db      	mvns	r3, r3
 80069d2:	401a      	ands	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069d8:	f7fe fa86 	bl	8004ee8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <vPortFree+0xbc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4413      	add	r3, r2
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <vPortFree+0xbc>)
 80069e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f000 f874 	bl	8006ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <vPortFree+0xc0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	4a06      	ldr	r2, [pc, #24]	; (8006a10 <vPortFree+0xc0>)
 80069f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069fa:	f7fe fa83 	bl	8004f04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069fe:	bf00      	nop
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20004a70 	.word	0x20004a70
 8006a0c:	20004a60 	.word	0x20004a60
 8006a10:	20004a6c 	.word	0x20004a6c

08006a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <prvHeapInit+0xac>)
 8006a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3307      	adds	r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0307 	bic.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	4a1f      	ldr	r2, [pc, #124]	; (8006ac0 <prvHeapInit+0xac>)
 8006a44:	4413      	add	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <prvHeapInit+0xb0>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a52:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <prvHeapInit+0xb0>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a60:	2208      	movs	r2, #8
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a7e:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a94:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <prvHeapInit+0xb8>)
 8006aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <prvHeapInit+0xbc>)
 8006aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <prvHeapInit+0xc0>)
 8006aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	20000e54 	.word	0x20000e54
 8006ac4:	20004a54 	.word	0x20004a54
 8006ac8:	20004a5c 	.word	0x20004a5c
 8006acc:	20004a64 	.word	0x20004a64
 8006ad0:	20004a60 	.word	0x20004a60
 8006ad4:	20004a70 	.word	0x20004a70

08006ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ae0:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <prvInsertBlockIntoFreeList+0xac>)
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e002      	b.n	8006aec <prvInsertBlockIntoFreeList+0x14>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d8f7      	bhi.n	8006ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d108      	bne.n	8006b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	441a      	add	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	441a      	add	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d118      	bne.n	8006b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <prvInsertBlockIntoFreeList+0xb0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d00d      	beq.n	8006b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	441a      	add	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e008      	b.n	8006b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <prvInsertBlockIntoFreeList+0xb0>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e003      	b.n	8006b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d002      	beq.n	8006b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20004a54 	.word	0x20004a54
 8006b88:	20004a5c 	.word	0x20004a5c

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4d0d      	ldr	r5, [pc, #52]	; (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	; (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1b64      	subs	r4, r4, r5
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2600      	movs	r6, #0
 8006b98:	42a6      	cmp	r6, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4d0b      	ldr	r5, [pc, #44]	; (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	; (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 f8f6 	bl	8006d90 <_init>
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2600      	movs	r6, #0
 8006baa:	42a6      	cmp	r6, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb4:	4798      	blx	r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbe:	4798      	blx	r3
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	08006ea8 	.word	0x08006ea8
 8006bc8:	08006ea8 	.word	0x08006ea8
 8006bcc:	08006ea8 	.word	0x08006ea8
 8006bd0:	08006eac 	.word	0x08006eac

08006bd4 <__retarget_lock_acquire_recursive>:
 8006bd4:	4770      	bx	lr

08006bd6 <__retarget_lock_release_recursive>:
 8006bd6:	4770      	bx	lr

08006bd8 <memcpy>:
 8006bd8:	440a      	add	r2, r1
 8006bda:	4291      	cmp	r1, r2
 8006bdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006be0:	d100      	bne.n	8006be4 <memcpy+0xc>
 8006be2:	4770      	bx	lr
 8006be4:	b510      	push	{r4, lr}
 8006be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bee:	4291      	cmp	r1, r2
 8006bf0:	d1f9      	bne.n	8006be6 <memcpy+0xe>
 8006bf2:	bd10      	pop	{r4, pc}

08006bf4 <memset>:
 8006bf4:	4402      	add	r2, r0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d100      	bne.n	8006bfe <memset+0xa>
 8006bfc:	4770      	bx	lr
 8006bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006c02:	e7f9      	b.n	8006bf8 <memset+0x4>

08006c04 <cleanup_glue>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	460c      	mov	r4, r1
 8006c08:	6809      	ldr	r1, [r1, #0]
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	b109      	cbz	r1, 8006c12 <cleanup_glue+0xe>
 8006c0e:	f7ff fff9 	bl	8006c04 <cleanup_glue>
 8006c12:	4621      	mov	r1, r4
 8006c14:	4628      	mov	r0, r5
 8006c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c1a:	f000 b869 	b.w	8006cf0 <_free_r>
	...

08006c20 <_reclaim_reent>:
 8006c20:	4b2c      	ldr	r3, [pc, #176]	; (8006cd4 <_reclaim_reent+0xb4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4283      	cmp	r3, r0
 8006c26:	b570      	push	{r4, r5, r6, lr}
 8006c28:	4604      	mov	r4, r0
 8006c2a:	d051      	beq.n	8006cd0 <_reclaim_reent+0xb0>
 8006c2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c2e:	b143      	cbz	r3, 8006c42 <_reclaim_reent+0x22>
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d14a      	bne.n	8006ccc <_reclaim_reent+0xac>
 8006c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c38:	6819      	ldr	r1, [r3, #0]
 8006c3a:	b111      	cbz	r1, 8006c42 <_reclaim_reent+0x22>
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 f857 	bl	8006cf0 <_free_r>
 8006c42:	6961      	ldr	r1, [r4, #20]
 8006c44:	b111      	cbz	r1, 8006c4c <_reclaim_reent+0x2c>
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 f852 	bl	8006cf0 <_free_r>
 8006c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c4e:	b111      	cbz	r1, 8006c56 <_reclaim_reent+0x36>
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 f84d 	bl	8006cf0 <_free_r>
 8006c56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c58:	b111      	cbz	r1, 8006c60 <_reclaim_reent+0x40>
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 f848 	bl	8006cf0 <_free_r>
 8006c60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c62:	b111      	cbz	r1, 8006c6a <_reclaim_reent+0x4a>
 8006c64:	4620      	mov	r0, r4
 8006c66:	f000 f843 	bl	8006cf0 <_free_r>
 8006c6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c6c:	b111      	cbz	r1, 8006c74 <_reclaim_reent+0x54>
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 f83e 	bl	8006cf0 <_free_r>
 8006c74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c76:	b111      	cbz	r1, 8006c7e <_reclaim_reent+0x5e>
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 f839 	bl	8006cf0 <_free_r>
 8006c7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c80:	b111      	cbz	r1, 8006c88 <_reclaim_reent+0x68>
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 f834 	bl	8006cf0 <_free_r>
 8006c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c8a:	b111      	cbz	r1, 8006c92 <_reclaim_reent+0x72>
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 f82f 	bl	8006cf0 <_free_r>
 8006c92:	69a3      	ldr	r3, [r4, #24]
 8006c94:	b1e3      	cbz	r3, 8006cd0 <_reclaim_reent+0xb0>
 8006c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c98:	4620      	mov	r0, r4
 8006c9a:	4798      	blx	r3
 8006c9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c9e:	b1b9      	cbz	r1, 8006cd0 <_reclaim_reent+0xb0>
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ca6:	f7ff bfad 	b.w	8006c04 <cleanup_glue>
 8006caa:	5949      	ldr	r1, [r1, r5]
 8006cac:	b941      	cbnz	r1, 8006cc0 <_reclaim_reent+0xa0>
 8006cae:	3504      	adds	r5, #4
 8006cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cb2:	2d80      	cmp	r5, #128	; 0x80
 8006cb4:	68d9      	ldr	r1, [r3, #12]
 8006cb6:	d1f8      	bne.n	8006caa <_reclaim_reent+0x8a>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 f819 	bl	8006cf0 <_free_r>
 8006cbe:	e7ba      	b.n	8006c36 <_reclaim_reent+0x16>
 8006cc0:	680e      	ldr	r6, [r1, #0]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f814 	bl	8006cf0 <_free_r>
 8006cc8:	4631      	mov	r1, r6
 8006cca:	e7ef      	b.n	8006cac <_reclaim_reent+0x8c>
 8006ccc:	2500      	movs	r5, #0
 8006cce:	e7ef      	b.n	8006cb0 <_reclaim_reent+0x90>
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000014 	.word	0x20000014

08006cd8 <__malloc_lock>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__malloc_lock+0x8>)
 8006cda:	f7ff bf7b 	b.w	8006bd4 <__retarget_lock_acquire_recursive>
 8006cde:	bf00      	nop
 8006ce0:	20004bc0 	.word	0x20004bc0

08006ce4 <__malloc_unlock>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__malloc_unlock+0x8>)
 8006ce6:	f7ff bf76 	b.w	8006bd6 <__retarget_lock_release_recursive>
 8006cea:	bf00      	nop
 8006cec:	20004bc0 	.word	0x20004bc0

08006cf0 <_free_r>:
 8006cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cf2:	2900      	cmp	r1, #0
 8006cf4:	d048      	beq.n	8006d88 <_free_r+0x98>
 8006cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cfa:	9001      	str	r0, [sp, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8006d02:	bfb8      	it	lt
 8006d04:	18e4      	addlt	r4, r4, r3
 8006d06:	f7ff ffe7 	bl	8006cd8 <__malloc_lock>
 8006d0a:	4a20      	ldr	r2, [pc, #128]	; (8006d8c <_free_r+0x9c>)
 8006d0c:	9801      	ldr	r0, [sp, #4]
 8006d0e:	6813      	ldr	r3, [r2, #0]
 8006d10:	4615      	mov	r5, r2
 8006d12:	b933      	cbnz	r3, 8006d22 <_free_r+0x32>
 8006d14:	6063      	str	r3, [r4, #4]
 8006d16:	6014      	str	r4, [r2, #0]
 8006d18:	b003      	add	sp, #12
 8006d1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d1e:	f7ff bfe1 	b.w	8006ce4 <__malloc_unlock>
 8006d22:	42a3      	cmp	r3, r4
 8006d24:	d90b      	bls.n	8006d3e <_free_r+0x4e>
 8006d26:	6821      	ldr	r1, [r4, #0]
 8006d28:	1862      	adds	r2, r4, r1
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	bf04      	itt	eq
 8006d2e:	681a      	ldreq	r2, [r3, #0]
 8006d30:	685b      	ldreq	r3, [r3, #4]
 8006d32:	6063      	str	r3, [r4, #4]
 8006d34:	bf04      	itt	eq
 8006d36:	1852      	addeq	r2, r2, r1
 8006d38:	6022      	streq	r2, [r4, #0]
 8006d3a:	602c      	str	r4, [r5, #0]
 8006d3c:	e7ec      	b.n	8006d18 <_free_r+0x28>
 8006d3e:	461a      	mov	r2, r3
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	b10b      	cbz	r3, 8006d48 <_free_r+0x58>
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	d9fa      	bls.n	8006d3e <_free_r+0x4e>
 8006d48:	6811      	ldr	r1, [r2, #0]
 8006d4a:	1855      	adds	r5, r2, r1
 8006d4c:	42a5      	cmp	r5, r4
 8006d4e:	d10b      	bne.n	8006d68 <_free_r+0x78>
 8006d50:	6824      	ldr	r4, [r4, #0]
 8006d52:	4421      	add	r1, r4
 8006d54:	1854      	adds	r4, r2, r1
 8006d56:	42a3      	cmp	r3, r4
 8006d58:	6011      	str	r1, [r2, #0]
 8006d5a:	d1dd      	bne.n	8006d18 <_free_r+0x28>
 8006d5c:	681c      	ldr	r4, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	6053      	str	r3, [r2, #4]
 8006d62:	4421      	add	r1, r4
 8006d64:	6011      	str	r1, [r2, #0]
 8006d66:	e7d7      	b.n	8006d18 <_free_r+0x28>
 8006d68:	d902      	bls.n	8006d70 <_free_r+0x80>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	6003      	str	r3, [r0, #0]
 8006d6e:	e7d3      	b.n	8006d18 <_free_r+0x28>
 8006d70:	6825      	ldr	r5, [r4, #0]
 8006d72:	1961      	adds	r1, r4, r5
 8006d74:	428b      	cmp	r3, r1
 8006d76:	bf04      	itt	eq
 8006d78:	6819      	ldreq	r1, [r3, #0]
 8006d7a:	685b      	ldreq	r3, [r3, #4]
 8006d7c:	6063      	str	r3, [r4, #4]
 8006d7e:	bf04      	itt	eq
 8006d80:	1949      	addeq	r1, r1, r5
 8006d82:	6021      	streq	r1, [r4, #0]
 8006d84:	6054      	str	r4, [r2, #4]
 8006d86:	e7c7      	b.n	8006d18 <_free_r+0x28>
 8006d88:	b003      	add	sp, #12
 8006d8a:	bd30      	pop	{r4, r5, pc}
 8006d8c:	20004a74 	.word	0x20004a74

08006d90 <_init>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	bf00      	nop
 8006d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d96:	bc08      	pop	{r3}
 8006d98:	469e      	mov	lr, r3
 8006d9a:	4770      	bx	lr

08006d9c <_fini>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr
