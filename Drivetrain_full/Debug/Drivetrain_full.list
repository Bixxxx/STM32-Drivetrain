
Drivetrain_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800a698  0800a698  0001a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a82c  0800a82c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a82c  0800a82c  0001a82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a834  0800a834  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a834  0800a834  0001a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a838  0800a838  0001a838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a83c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00004cf0  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d88  20004d88  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021106  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b5e  00000000  00000000  000411ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e8  00000000  00000000  00044d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a0  00000000  00000000  00046518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e7b  00000000  00000000  00047bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019975  00000000  00000000  0004ca33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea960  00000000  00000000  000663a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00150d08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fdc  00000000  00000000  00150d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a680 	.word	0x0800a680

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	0800a680 	.word	0x0800a680

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f001 fbb6 	bl	8002674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f868 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 fa90 	bl	8001430 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f10:	f000 f922 	bl	8001158 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f14:	f000 f98c 	bl	8001230 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000f18:	f000 f8cc 	bl	80010b4 <MX_CAN1_Init>
  MX_SPI2_Init();
 8000f1c:	f000 f952 	bl	80011c4 <MX_SPI2_Init>
  MX_UART4_Init();
 8000f20:	f000 fa32 	bl	8001388 <MX_UART4_Init>
  MX_UART5_Init();
 8000f24:	f000 fa5a 	bl	80013dc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f28:	2104      	movs	r1, #4
 8000f2a:	481f      	ldr	r0, [pc, #124]	; (8000fa8 <main+0xa8>)
 8000f2c:	f003 ffa0 	bl	8004e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f30:	2108      	movs	r1, #8
 8000f32:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <main+0xa8>)
 8000f34:	f003 ff9c 	bl	8004e70 <HAL_TIM_PWM_Start>

  HAL_CAN_Start(&hcan1);
 8000f38:	481c      	ldr	r0, [pc, #112]	; (8000fac <main+0xac>)
 8000f3a:	f001 fddd 	bl	8002af8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f3e:	2102      	movs	r1, #2
 8000f40:	481a      	ldr	r0, [pc, #104]	; (8000fac <main+0xac>)
 8000f42:	f001 ff2f 	bl	8002da4 <HAL_CAN_ActivateNotification>

  HAL_Delay(10);
 8000f46:	200a      	movs	r0, #10
 8000f48:	f001 fbd6 	bl	80026f8 <HAL_Delay>

  // INITIALIZE PIN STATE AS HIGH FOR ENCODER 1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2110      	movs	r1, #16
 8000f50:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <main+0xb0>)
 8000f52:	f002 fc0b 	bl	800376c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000f56:	200a      	movs	r0, #10
 8000f58:	f001 fbce 	bl	80026f8 <HAL_Delay>

  // INITIALIZE PIN STATE AS HIGH FOR ENCODER 2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <main+0xb4>)
 8000f64:	f002 fc02 	bl	800376c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f001 fbc5 	bl	80026f8 <HAL_Delay>
  INITIAL_ANGLE_2 = (SPI_rx2[0] << 8 | SPI_rx2[1])&clearbits;
*/
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f6e:	f005 fa55 	bl	800641c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartEncoder */
  StartEncoderHandle = osThreadNew(ReadEncoder, NULL, &StartEncoder_attributes);
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <main+0xb8>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	4811      	ldr	r0, [pc, #68]	; (8000fbc <main+0xbc>)
 8000f78:	f005 fa9a 	bl	80064b0 <osThreadNew>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <main+0xc0>)
 8000f80:	6013      	str	r3, [r2, #0]

  /* creation of StartStepper */
  StartStepperHandle = osThreadNew(ControlStepper, NULL, &StartStepper_attributes);
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <main+0xc4>)
 8000f84:	2100      	movs	r1, #0
 8000f86:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <main+0xc8>)
 8000f88:	f005 fa92 	bl	80064b0 <osThreadNew>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <main+0xcc>)
 8000f90:	6013      	str	r3, [r2, #0]

  /* creation of startThrust */
  startThrustHandle = osThreadNew(ControlThrust, NULL, &startThrust_attributes);
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <main+0xd0>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <main+0xd4>)
 8000f98:	f005 fa8a 	bl	80064b0 <osThreadNew>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <main+0xd8>)
 8000fa0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fa2:	f005 fa5f 	bl	8006464 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <main+0xa6>
 8000fa8:	20004b9c 	.word	0x20004b9c
 8000fac:	20004c90 	.word	0x20004c90
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	0800a710 	.word	0x0800a710
 8000fbc:	08001715 	.word	0x08001715
 8000fc0:	20004bec 	.word	0x20004bec
 8000fc4:	0800a734 	.word	0x0800a734
 8000fc8:	08001965 	.word	0x08001965
 8000fcc:	20004b4c 	.word	0x20004b4c
 8000fd0:	0800a758 	.word	0x0800a758
 8000fd4:	08001b99 	.word	0x08001b99
 8000fd8:	20004be4 	.word	0x20004be4

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	; 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	; 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f008 fb8f 	bl	800970e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <SystemClock_Config+0xd0>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a28      	ldr	r2, [pc, #160]	; (80010ac <SystemClock_Config+0xd0>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <SystemClock_Config+0xd0>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <SystemClock_Config+0xd4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001028:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <SystemClock_Config+0xd4>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <SystemClock_Config+0xd4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001044:	2310      	movs	r3, #16
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001050:	2308      	movs	r3, #8
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001054:	2350      	movs	r3, #80	; 0x50
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800105c:	2307      	movs	r3, #7
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fb9b 	bl	80037a0 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001070:	f000 ffa4 	bl	8001fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2302      	movs	r3, #2
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2102      	movs	r1, #2
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fdfc 	bl	8003c90 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800109e:	f000 ff8d 	bl	8001fbc <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	; 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010bc:	4a25      	ldr	r2, [pc, #148]	; (8001154 <MX_CAN1_Init+0xa0>)
 80010be:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010c2:	2210      	movs	r2, #16
 80010c4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010e0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_CAN1_Init+0x9c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_CAN1_Init+0x9c>)
 8001102:	2200      	movs	r2, #0
 8001104:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001106:	4812      	ldr	r0, [pc, #72]	; (8001150 <MX_CAN1_Init+0x9c>)
 8001108:	f001 fb1a 	bl	8002740 <HAL_CAN_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001112:	f000 ff53 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  //CAN FILTER CONFIGURATION
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001116:	2301      	movs	r3, #1
 8001118:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x5<<5;
 8001122:	23a0      	movs	r3, #160	; 0xa0
 8001124:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0<<5;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001136:	2301      	movs	r3, #1
 8001138:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;
 800113a:	2314      	movs	r3, #20
 800113c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800113e:	463b      	mov	r3, r7
 8001140:	4619      	mov	r1, r3
 8001142:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_CAN1_Init+0x9c>)
 8001144:	f001 fbf8 	bl	8002938 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20004c90 	.word	0x20004c90
 8001154:	40006400 	.word	0x40006400

08001158 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_SPI1_Init+0x64>)
 800115e:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <MX_SPI1_Init+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_SPI1_Init+0x64>)
 8001164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001168:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_SPI1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_SPI1_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_SPI1_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_SPI1_Init+0x64>)
 800117e:	2201      	movs	r2, #1
 8001180:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_SPI1_Init+0x64>)
 8001184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001188:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_SPI1_Init+0x64>)
 800118c:	2218      	movs	r2, #24
 800118e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_SPI1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_SPI1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_SPI1_Init+0x64>)
 80011a4:	220a      	movs	r2, #10
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_SPI1_Init+0x64>)
 80011aa:	f002 ff9f 	bl	80040ec <HAL_SPI_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011b4:	f000 ff02 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20004c34 	.word	0x20004c34
 80011c0:	40013000 	.word	0x40013000

080011c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_SPI2_Init+0x64>)
 80011ca:	4a18      	ldr	r2, [pc, #96]	; (800122c <MX_SPI2_Init+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_SPI2_Init+0x64>)
 80011d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_SPI2_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_SPI2_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_SPI2_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_SPI2_Init+0x64>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_SPI2_Init+0x64>)
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_SPI2_Init+0x64>)
 80011f8:	2218      	movs	r2, #24
 80011fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MX_SPI2_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_SPI2_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <MX_SPI2_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_SPI2_Init+0x64>)
 8001210:	220a      	movs	r2, #10
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_SPI2_Init+0x64>)
 8001216:	f002 ff69 	bl	80040ec <HAL_SPI_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001220:	f000 fecc 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20004ad8 	.word	0x20004ad8
 800122c:	40003800 	.word	0x40003800

08001230 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b096      	sub	sp, #88	; 0x58
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2220      	movs	r2, #32
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f008 fa50 	bl	800970e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800126e:	4b44      	ldr	r3, [pc, #272]	; (8001380 <MX_TIM1_Init+0x150>)
 8001270:	4a44      	ldr	r2, [pc, #272]	; (8001384 <MX_TIM1_Init+0x154>)
 8001272:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <MX_TIM1_Init+0x150>)
 8001276:	2201      	movs	r2, #1
 8001278:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <MX_TIM1_Init+0x150>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <MX_TIM1_Init+0x150>)
 8001282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001286:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <MX_TIM1_Init+0x150>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <MX_TIM1_Init+0x150>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <MX_TIM1_Init+0x150>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800129a:	4839      	ldr	r0, [pc, #228]	; (8001380 <MX_TIM1_Init+0x150>)
 800129c:	f003 fcce 	bl	8004c3c <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012a6:	f000 fe89 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b4:	4619      	mov	r1, r3
 80012b6:	4832      	ldr	r0, [pc, #200]	; (8001380 <MX_TIM1_Init+0x150>)
 80012b8:	f004 f86c 	bl	8005394 <HAL_TIM_ConfigClockSource>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012c2:	f000 fe7b 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c6:	482e      	ldr	r0, [pc, #184]	; (8001380 <MX_TIM1_Init+0x150>)
 80012c8:	f003 fd78 	bl	8004dbc <HAL_TIM_PWM_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012d2:	f000 fe73 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e2:	4619      	mov	r1, r3
 80012e4:	4826      	ldr	r0, [pc, #152]	; (8001380 <MX_TIM1_Init+0x150>)
 80012e6:	f004 fc55 	bl	8005b94 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012f0:	f000 fe64 	bl	8001fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	2360      	movs	r3, #96	; 0x60
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	2204      	movs	r2, #4
 8001316:	4619      	mov	r1, r3
 8001318:	4819      	ldr	r0, [pc, #100]	; (8001380 <MX_TIM1_Init+0x150>)
 800131a:	f003 ff79 	bl	8005210 <HAL_TIM_PWM_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001324:	f000 fe4a 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	2208      	movs	r2, #8
 800132e:	4619      	mov	r1, r3
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <MX_TIM1_Init+0x150>)
 8001332:	f003 ff6d 	bl	8005210 <HAL_TIM_PWM_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800133c:	f000 fe3e 	bl	8001fbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_TIM1_Init+0x150>)
 8001364:	f004 fc92 	bl	8005c8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800136e:	f000 fe25 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_TIM1_Init+0x150>)
 8001374:	f000 ff62 	bl	800223c <HAL_TIM_MspPostInit>

}
 8001378:	bf00      	nop
 800137a:	3758      	adds	r7, #88	; 0x58
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20004b9c 	.word	0x20004b9c
 8001384:	40010000 	.word	0x40010000

08001388 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_UART4_Init+0x4c>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_UART4_Init+0x50>)
 8001390:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_UART4_Init+0x4c>)
 8001394:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001398:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_UART4_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_UART4_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_UART4_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_UART4_Init+0x4c>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_UART4_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_UART4_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_UART4_Init+0x4c>)
 80013c0:	f004 fcca 	bl	8005d58 <HAL_HalfDuplex_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80013ca:	f000 fdf7 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20004bf0 	.word	0x20004bf0
 80013d8:	40004c00 	.word	0x40004c00

080013dc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_UART5_Init+0x4c>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_UART5_Init+0x50>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_UART5_Init+0x4c>)
 80013e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_UART5_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_UART5_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_UART5_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_UART5_Init+0x4c>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_UART5_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_UART5_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_UART5_Init+0x4c>)
 8001414:	f004 fca0 	bl	8005d58 <HAL_HalfDuplex_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800141e:	f000 fdcd 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20004b54 	.word	0x20004b54
 800142c:	40005000 	.word	0x40005000

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <MX_GPIO_Init+0x18c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a5b      	ldr	r2, [pc, #364]	; (80015bc <MX_GPIO_Init+0x18c>)
 8001450:	f043 0320 	orr.w	r3, r3, #32
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b59      	ldr	r3, [pc, #356]	; (80015bc <MX_GPIO_Init+0x18c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	4b55      	ldr	r3, [pc, #340]	; (80015bc <MX_GPIO_Init+0x18c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a54      	ldr	r2, [pc, #336]	; (80015bc <MX_GPIO_Init+0x18c>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b52      	ldr	r3, [pc, #328]	; (80015bc <MX_GPIO_Init+0x18c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b4e      	ldr	r3, [pc, #312]	; (80015bc <MX_GPIO_Init+0x18c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a4d      	ldr	r2, [pc, #308]	; (80015bc <MX_GPIO_Init+0x18c>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <MX_GPIO_Init+0x18c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a46      	ldr	r2, [pc, #280]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b44      	ldr	r3, [pc, #272]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b40      	ldr	r3, [pc, #256]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a3f      	ldr	r2, [pc, #252]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b39      	ldr	r3, [pc, #228]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a38      	ldr	r2, [pc, #224]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b32      	ldr	r3, [pc, #200]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a31      	ldr	r2, [pc, #196]	; (80015bc <MX_GPIO_Init+0x18c>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <MX_GPIO_Init+0x18c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_14, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f244 0110 	movw	r1, #16400	; 0x4010
 8001510:	482b      	ldr	r0, [pc, #172]	; (80015c0 <MX_GPIO_Init+0x190>)
 8001512:	f002 f92b 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f248 0110 	movw	r1, #32784	; 0x8010
 800151c:	4829      	ldr	r0, [pc, #164]	; (80015c4 <MX_GPIO_Init+0x194>)
 800151e:	f002 f925 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001528:	4827      	ldr	r0, [pc, #156]	; (80015c8 <MX_GPIO_Init+0x198>)
 800152a:	f002 f91f 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001534:	4825      	ldr	r0, [pc, #148]	; (80015cc <MX_GPIO_Init+0x19c>)
 8001536:	f002 f919 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF4 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14;
 800153a:	f244 0310 	movw	r3, #16400	; 0x4010
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	481b      	ldr	r0, [pc, #108]	; (80015c0 <MX_GPIO_Init+0x190>)
 8001554:	f001 ff5e 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8001558:	f248 0310 	movw	r3, #32784	; 0x8010
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4814      	ldr	r0, [pc, #80]	; (80015c4 <MX_GPIO_Init+0x194>)
 8001572:	f001 ff4f 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	480e      	ldr	r0, [pc, #56]	; (80015c8 <MX_GPIO_Init+0x198>)
 8001590:	f001 ff40 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <MX_GPIO_Init+0x19c>)
 80015ae:	f001 ff31 	bl	8003414 <HAL_GPIO_Init>

}
 80015b2:	bf00      	nop
 80015b4:	3730      	adds	r7, #48	; 0x30
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40021400 	.word	0x40021400
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40020400 	.word	0x40020400

080015d0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

/* CAN RX0 CALLBACK FUNCTION */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_rx);
 80015d8:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80015da:	4a43      	ldr	r2, [pc, #268]	; (80016e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80015dc:	2100      	movs	r1, #0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f001 face 	bl	8002b80 <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 8){
 80015e4:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d177      	bne.n	80016dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
		if(RxHeader.StdId == 0x01){
 80015ec:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d133      	bne.n	800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
			THRUST_1_CAN[0] = CAN_rx[0];
 80015f4:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80015fc:	701a      	strb	r2, [r3, #0]
			THRUST_1_CAN[1] = CAN_rx[1];
 80015fe:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8001600:	785b      	ldrb	r3, [r3, #1]
 8001602:	b25a      	sxtb	r2, r3
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8001606:	705a      	strb	r2, [r3, #1]
			THRUST_1_CAN[2] = CAN_rx[2];
 8001608:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800160a:	789b      	ldrb	r3, [r3, #2]
 800160c:	b25a      	sxtb	r2, r3
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8001610:	709a      	strb	r2, [r3, #2]
			THRUST_1_CAN[3] = CAN_rx[3];	//need to change the correct bits for each motor thrust
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	b25a      	sxtb	r2, r3
 8001618:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800161a:	70da      	strb	r2, [r3, #3]

			//combining bytes into float (Left motor thrust)
			THRUST_1_REF = *(float*)&THRUST_1_CAN; // max = 160, min = -40 N
 800161c:	4b33      	ldr	r3, [pc, #204]	; (80016ec <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a33      	ldr	r2, [pc, #204]	; (80016f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8001622:	6013      	str	r3, [r2, #0]

			THRUST_2_CAN[0] = CAN_rx[4];
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	b25a      	sxtb	r2, r3
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 800162c:	701a      	strb	r2, [r3, #0]
			THRUST_2_CAN[1] = CAN_rx[5];
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8001630:	795b      	ldrb	r3, [r3, #5]
 8001632:	b25a      	sxtb	r2, r3
 8001634:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8001636:	705a      	strb	r2, [r3, #1]
			THRUST_2_CAN[2] = CAN_rx[6];
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800163a:	799b      	ldrb	r3, [r3, #6]
 800163c:	b25a      	sxtb	r2, r3
 800163e:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8001640:	709a      	strb	r2, [r3, #2]
			THRUST_2_CAN[3] = CAN_rx[7];
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8001644:	79db      	ldrb	r3, [r3, #7]
 8001646:	b25a      	sxtb	r2, r3
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 800164a:	70da      	strb	r2, [r3, #3]

			//combining bytes into float (Left motor thrust)
			THRUST_2_REF = *(float*)&THRUST_2_CAN; // max = 160, min = -40 N
 800164c:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a29      	ldr	r2, [pc, #164]	; (80016f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001652:	6013      	str	r3, [r2, #0]
			thread3=0;
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
		else{
			printf("Wrong message ID, motor thrust and angle unchanged");
		}

	}
}
 800165a:	e03f      	b.n	80016dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
		else if(RxHeader.StdId == 0x02){
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d138      	bne.n	80016d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x106>
			ANGLE_REF_1_CAN[0] = CAN_rx[0];
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b25a      	sxtb	r2, r3
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 800166c:	701a      	strb	r2, [r3, #0]
			ANGLE_REF_1_CAN[1] = CAN_rx[1];
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8001670:	785b      	ldrb	r3, [r3, #1]
 8001672:	b25a      	sxtb	r2, r3
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8001676:	705a      	strb	r2, [r3, #1]
			ANGLE_REF_1_CAN[2] = CAN_rx[2];
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	b25a      	sxtb	r2, r3
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8001680:	709a      	strb	r2, [r3, #2]
			ANGLE_REF_1_CAN[3] = CAN_rx[3];
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8001684:	78db      	ldrb	r3, [r3, #3]
 8001686:	b25a      	sxtb	r2, r3
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 800168a:	70da      	strb	r2, [r3, #3]
			ANGLE_REF_1 = (*(float*)&ANGLE_REF_1_CAN)*2; // max = 30, min = -30 degree --> +/- 60 degree (stepper gear ratio)
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001698:	edc3 7a00 	vstr	s15, [r3]
			ANGLE_REF_2_CAN[0] = CAN_rx[4];
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800169e:	791b      	ldrb	r3, [r3, #4]
 80016a0:	b25a      	sxtb	r2, r3
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80016a4:	701a      	strb	r2, [r3, #0]
			ANGLE_REF_2_CAN[1] = CAN_rx[5];
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80016a8:	795b      	ldrb	r3, [r3, #5]
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80016ae:	705a      	strb	r2, [r3, #1]
			ANGLE_REF_2_CAN[2] = CAN_rx[6];
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80016b2:	799b      	ldrb	r3, [r3, #6]
 80016b4:	b25a      	sxtb	r2, r3
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80016b8:	709a      	strb	r2, [r3, #2]
			ANGLE_REF_2_CAN[3] = CAN_rx[7];
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80016bc:	79db      	ldrb	r3, [r3, #7]
 80016be:	b25a      	sxtb	r2, r3
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80016c2:	70da      	strb	r2, [r3, #3]
			ANGLE_REF_2 = (*(float*)&ANGLE_REF_2_CAN)*2; // max = 30, min = -30 degree --> +/- 60 degree (stepper gear ratio)
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
}
 80016d4:	e002      	b.n	80016dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			printf("Wrong message ID, motor thrust and angle unchanged");
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80016d8:	f008 f87c 	bl	80097d4 <iprintf>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20004b40 	.word	0x20004b40
 80016e8:	20004cd0 	.word	0x20004cd0
 80016ec:	200000dc 	.word	0x200000dc
 80016f0:	200000d4 	.word	0x200000d4
 80016f4:	200000e0 	.word	0x200000e0
 80016f8:	200000d8 	.word	0x200000d8
 80016fc:	200000f4 	.word	0x200000f4
 8001700:	200000e4 	.word	0x200000e4
 8001704:	200000bc 	.word	0x200000bc
 8001708:	200000e8 	.word	0x200000e8
 800170c:	200000c4 	.word	0x200000c4
 8001710:	0800a6c4 	.word	0x0800a6c4

08001714 <ReadEncoder>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadEncoder */
void ReadEncoder(void *argument)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	  	  	  	  	  /************************
	  	  	  	  	   * ---- ENCODER 1 ----- *
	  	  	  	  	   ************************/

	// READ ENCODER 1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //PULL CSn LOW
 800171c:	2200      	movs	r2, #0
 800171e:	2110      	movs	r1, #16
 8001720:	4879      	ldr	r0, [pc, #484]	; (8001908 <ReadEncoder+0x1f4>)
 8001722:	f002 f823 	bl	800376c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPI_tx1[0], 2, 1); //TRANSMIT READ COMMAND(0xFFFF)
 8001726:	2301      	movs	r3, #1
 8001728:	2202      	movs	r2, #2
 800172a:	4978      	ldr	r1, [pc, #480]	; (800190c <ReadEncoder+0x1f8>)
 800172c:	4878      	ldr	r0, [pc, #480]	; (8001910 <ReadEncoder+0x1fc>)
 800172e:	f002 fd66 	bl	80041fe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //PULL CSn HIGH
 8001732:	2201      	movs	r2, #1
 8001734:	2110      	movs	r1, #16
 8001736:	4874      	ldr	r0, [pc, #464]	; (8001908 <ReadEncoder+0x1f4>)
 8001738:	f002 f818 	bl	800376c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800173c:	2001      	movs	r0, #1
 800173e:	f000 ffdb 	bl	80026f8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //PULL CSn LOW
 8001742:	2200      	movs	r2, #0
 8001744:	2110      	movs	r1, #16
 8001746:	4870      	ldr	r0, [pc, #448]	; (8001908 <ReadEncoder+0x1f4>)
 8001748:	f002 f810 	bl	800376c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, &SPI_rx1[0], 2, 1); //RECEIVE ANGLE READING
 800174c:	2301      	movs	r3, #1
 800174e:	2202      	movs	r2, #2
 8001750:	4970      	ldr	r1, [pc, #448]	; (8001914 <ReadEncoder+0x200>)
 8001752:	486f      	ldr	r0, [pc, #444]	; (8001910 <ReadEncoder+0x1fc>)
 8001754:	f002 fe8f 	bl	8004476 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //PULL CSn HIGH
 8001758:	2201      	movs	r2, #1
 800175a:	2110      	movs	r1, #16
 800175c:	486a      	ldr	r0, [pc, #424]	; (8001908 <ReadEncoder+0x1f4>)
 800175e:	f002 f805 	bl	800376c <HAL_GPIO_WritePin>

	//CLEAR NON-DATA BITS ENCODER 1
	ENCODER_ANGLE_1 = (SPI_rx1[0] << 8 | SPI_rx1[1])&clearbits; //FILTER OUT BIT 14&15
 8001762:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <ReadEncoder+0x200>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <ReadEncoder+0x200>)
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21a      	sxth	r2, r3
 8001774:	4b68      	ldr	r3, [pc, #416]	; (8001918 <ReadEncoder+0x204>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b21b      	sxth	r3, r3
 800177a:	4013      	ands	r3, r2
 800177c:	b21b      	sxth	r3, r3
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b66      	ldr	r3, [pc, #408]	; (800191c <ReadEncoder+0x208>)
 8001782:	801a      	strh	r2, [r3, #0]
	ENCODER_ANGLE_1 = (ENCODER_ANGLE_1 - INITIAL_ANGLE_1)&clearbits; //REMOVE INITIAL ANGLE OFFSET
 8001784:	4b65      	ldr	r3, [pc, #404]	; (800191c <ReadEncoder+0x208>)
 8001786:	881a      	ldrh	r2, [r3, #0]
 8001788:	4b65      	ldr	r3, [pc, #404]	; (8001920 <ReadEncoder+0x20c>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	b29b      	uxth	r3, r3
 8001790:	b21a      	sxth	r2, r3
 8001792:	4b61      	ldr	r3, [pc, #388]	; (8001918 <ReadEncoder+0x204>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4013      	ands	r3, r2
 800179a:	b21b      	sxth	r3, r3
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <ReadEncoder+0x208>)
 80017a0:	801a      	strh	r2, [r3, #0]

	//RECOMPUTE ANGLE FROM 14-BIT DATA TO -180 TO 180 DEGREE ANGLE FOR ENCODER 1
	ANGLE_DEGREE_1 = ENCODER_ANGLE_1*ConvertToDegree; //CONVERTS 14-bit number to 360 degree
 80017a2:	4b5e      	ldr	r3, [pc, #376]	; (800191c <ReadEncoder+0x208>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ae:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001924 <ReadEncoder+0x210>
 80017b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b6:	4b5c      	ldr	r3, [pc, #368]	; (8001928 <ReadEncoder+0x214>)
 80017b8:	edc3 7a00 	vstr	s15, [r3]
	if(ANGLE_DEGREE_1 > 180){
 80017bc:	4b5a      	ldr	r3, [pc, #360]	; (8001928 <ReadEncoder+0x214>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800192c <ReadEncoder+0x218>
 80017c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	dd09      	ble.n	80017e4 <ReadEncoder+0xd0>
			ANGLE_DEGREE_1 = ANGLE_DEGREE_1 - 360;
 80017d0:	4b55      	ldr	r3, [pc, #340]	; (8001928 <ReadEncoder+0x214>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001930 <ReadEncoder+0x21c>
 80017da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017de:	4b52      	ldr	r3, [pc, #328]	; (8001928 <ReadEncoder+0x214>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]
	}
			//TODO:REMOVE COMMENTS
			ANGLE_ERROR_1 = ANGLE_REF_1 - ANGLE_DEGREE_1; //CALCULATE ANGLE ERROR
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <ReadEncoder+0x220>)
 80017e6:	ed93 7a00 	vldr	s14, [r3]
 80017ea:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <ReadEncoder+0x214>)
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f8:	ee17 3a90 	vmov	r3, s15
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <ReadEncoder+0x224>)
 8001800:	801a      	strh	r2, [r3, #0]
		 	 	   	   /************************
		 	 	   	    * ---- ENCODER 2 ----- *
		 	 	   	    ************************/

	//READ ENCODER 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //PULL CSn LOW
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001808:	484c      	ldr	r0, [pc, #304]	; (800193c <ReadEncoder+0x228>)
 800180a:	f001 ffaf 	bl	800376c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &SPI_tx2[0], 2, 1); //TRANSMIT READ COMMAND(0xFF)
 800180e:	2301      	movs	r3, #1
 8001810:	2202      	movs	r2, #2
 8001812:	494b      	ldr	r1, [pc, #300]	; (8001940 <ReadEncoder+0x22c>)
 8001814:	484b      	ldr	r0, [pc, #300]	; (8001944 <ReadEncoder+0x230>)
 8001816:	f002 fcf2 	bl	80041fe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); //PULL CSn HIGH
 800181a:	2201      	movs	r2, #1
 800181c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001820:	4846      	ldr	r0, [pc, #280]	; (800193c <ReadEncoder+0x228>)
 8001822:	f001 ffa3 	bl	800376c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f000 ff66 	bl	80026f8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //PULL CSn LOW
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001832:	4842      	ldr	r0, [pc, #264]	; (800193c <ReadEncoder+0x228>)
 8001834:	f001 ff9a 	bl	800376c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, &SPI_rx2[0], 2, 1); //RECEIVE ANGLE READING
 8001838:	2301      	movs	r3, #1
 800183a:	2202      	movs	r2, #2
 800183c:	4942      	ldr	r1, [pc, #264]	; (8001948 <ReadEncoder+0x234>)
 800183e:	4841      	ldr	r0, [pc, #260]	; (8001944 <ReadEncoder+0x230>)
 8001840:	f002 fe19 	bl	8004476 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); //PULL CSn HIGH
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184a:	483c      	ldr	r0, [pc, #240]	; (800193c <ReadEncoder+0x228>)
 800184c:	f001 ff8e 	bl	800376c <HAL_GPIO_WritePin>

	//CLEAR NON-DATA BITS ENCODER 2
	ENCODER_ANGLE_2 = (SPI_rx2[0] << 8 | SPI_rx2[1])&clearbits; //FILTER OUT BIT 14&15
 8001850:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <ReadEncoder+0x234>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <ReadEncoder+0x234>)
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <ReadEncoder+0x204>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4013      	ands	r3, r2
 800186a:	b21b      	sxth	r3, r3
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <ReadEncoder+0x238>)
 8001870:	801a      	strh	r2, [r3, #0]
	ENCODER_ANGLE_2 = (ENCODER_ANGLE_2 - INITIAL_ANGLE_2)&clearbits; //REMOVE INITIAL ANGLE OFFSET
 8001872:	4b36      	ldr	r3, [pc, #216]	; (800194c <ReadEncoder+0x238>)
 8001874:	881a      	ldrh	r2, [r3, #0]
 8001876:	4b36      	ldr	r3, [pc, #216]	; (8001950 <ReadEncoder+0x23c>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	b29b      	uxth	r3, r3
 800187e:	b21a      	sxth	r2, r3
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <ReadEncoder+0x204>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b21b      	sxth	r3, r3
 8001886:	4013      	ands	r3, r2
 8001888:	b21b      	sxth	r3, r3
 800188a:	b29a      	uxth	r2, r3
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <ReadEncoder+0x238>)
 800188e:	801a      	strh	r2, [r3, #0]

	//RECOMPUTE ANGLE FROM 14-BIT DATA TO -180 TO 180 DEGREE ANGLE FOR ENCODER 2
	ANGLE_DEGREE_2 = ENCODER_ANGLE_2*ConvertToDegree; //CONVERTS 14-bit number to 360 degree
 8001890:	4b2e      	ldr	r3, [pc, #184]	; (800194c <ReadEncoder+0x238>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001924 <ReadEncoder+0x210>
 80018a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <ReadEncoder+0x240>)
 80018a6:	edc3 7a00 	vstr	s15, [r3]
	if(ANGLE_DEGREE_2 > 180){
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <ReadEncoder+0x240>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800192c <ReadEncoder+0x218>
 80018b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	dd09      	ble.n	80018d2 <ReadEncoder+0x1be>
			ANGLE_DEGREE_2 = ANGLE_DEGREE_2 - 360;
 80018be:	4b25      	ldr	r3, [pc, #148]	; (8001954 <ReadEncoder+0x240>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001930 <ReadEncoder+0x21c>
 80018c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <ReadEncoder+0x240>)
 80018ce:	edc3 7a00 	vstr	s15, [r3]
	}
			//TODO: REMOVE COMMENTS
			ANGLE_ERROR_2 = ANGLE_REF_2 - ANGLE_DEGREE_2; //CALCULATE ANGLE ERROR
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <ReadEncoder+0x244>)
 80018d4:	ed93 7a00 	vldr	s14, [r3]
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <ReadEncoder+0x240>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e6:	ee17 3a90 	vmov	r3, s15
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <ReadEncoder+0x248>)
 80018ee:	801a      	strh	r2, [r3, #0]

	thread1++;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <ReadEncoder+0x24c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	4a1a      	ldr	r2, [pc, #104]	; (8001960 <ReadEncoder+0x24c>)
 80018f8:	6013      	str	r3, [r2, #0]
    osThreadFlagsWait(0x01,osFlagsWaitAny, osWaitForever); // START ControlStepper thread
 80018fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018fe:	2100      	movs	r1, #0
 8001900:	2001      	movs	r0, #1
 8001902:	f004 feb5 	bl	8006670 <osThreadFlagsWait>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //PULL CSn LOW
 8001906:	e709      	b.n	800171c <ReadEncoder+0x8>
 8001908:	40020000 	.word	0x40020000
 800190c:	20000004 	.word	0x20000004
 8001910:	20004c34 	.word	0x20004c34
 8001914:	20004b50 	.word	0x20004b50
 8001918:	2000001a 	.word	0x2000001a
 800191c:	200000ba 	.word	0x200000ba
 8001920:	2000000a 	.word	0x2000000a
 8001924:	3cb402d0 	.word	0x3cb402d0
 8001928:	20004b34 	.word	0x20004b34
 800192c:	43340000 	.word	0x43340000
 8001930:	43b40000 	.word	0x43b40000
 8001934:	200000bc 	.word	0x200000bc
 8001938:	200000c0 	.word	0x200000c0
 800193c:	40020400 	.word	0x40020400
 8001940:	20000008 	.word	0x20000008
 8001944:	20004ad8 	.word	0x20004ad8
 8001948:	20004b98 	.word	0x20004b98
 800194c:	200000c2 	.word	0x200000c2
 8001950:	2000000c 	.word	0x2000000c
 8001954:	20004b48 	.word	0x20004b48
 8001958:	200000c4 	.word	0x200000c4
 800195c:	200000c8 	.word	0x200000c8
 8001960:	200000ec 	.word	0x200000ec

08001964 <ControlStepper>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlStepper */
void ControlStepper(void *argument)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlStepper */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1U);
 800196c:	2001      	movs	r0, #1
 800196e:	f004 ff00 	bl	8006772 <osDelay>
	if(MANUAL == 1){
 8001972:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <ControlStepper+0x1e4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d126      	bne.n	80019c8 <ControlStepper+0x64>
		ANGLE_ERROR_1 = MANUAL_ANGLE_REF - ANGLE_DEGREE_1;
 800197a:	4b74      	ldr	r3, [pc, #464]	; (8001b4c <ControlStepper+0x1e8>)
 800197c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001988:	4b71      	ldr	r3, [pc, #452]	; (8001b50 <ControlStepper+0x1ec>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001996:	ee17 3a90 	vmov	r3, s15
 800199a:	b21a      	sxth	r2, r3
 800199c:	4b6d      	ldr	r3, [pc, #436]	; (8001b54 <ControlStepper+0x1f0>)
 800199e:	801a      	strh	r2, [r3, #0]
		ANGLE_ERROR_2 = MANUAL_ANGLE_REF - ANGLE_DEGREE_2;
 80019a0:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <ControlStepper+0x1e8>)
 80019a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ae:	4b6a      	ldr	r3, [pc, #424]	; (8001b58 <ControlStepper+0x1f4>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019bc:	ee17 3a90 	vmov	r3, s15
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	4b66      	ldr	r3, [pc, #408]	; (8001b5c <ControlStepper+0x1f8>)
 80019c4:	801a      	strh	r2, [r3, #0]
 80019c6:	e035      	b.n	8001a34 <ControlStepper+0xd0>
	}else{
	  	  	  	  	  /************************
	 	  	  	  	   * ---- STEPPER 1 ----- *
	 	  	  	  	   ************************/
	//saturation of reference angles to their maximum/minimum
	if (ANGLE_REF_1>60){ANGLE_REF_1=60;}
 80019c8:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <ControlStepper+0x1fc>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001b64 <ControlStepper+0x200>
 80019d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	dd03      	ble.n	80019e4 <ControlStepper+0x80>
 80019dc:	4b60      	ldr	r3, [pc, #384]	; (8001b60 <ControlStepper+0x1fc>)
 80019de:	4a62      	ldr	r2, [pc, #392]	; (8001b68 <ControlStepper+0x204>)
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e00c      	b.n	80019fe <ControlStepper+0x9a>
	else if(ANGLE_REF_1<-60){ANGLE_REF_1=-60;}
 80019e4:	4b5e      	ldr	r3, [pc, #376]	; (8001b60 <ControlStepper+0x1fc>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001b6c <ControlStepper+0x208>
 80019ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	d502      	bpl.n	80019fe <ControlStepper+0x9a>
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <ControlStepper+0x1fc>)
 80019fa:	4a5d      	ldr	r2, [pc, #372]	; (8001b70 <ControlStepper+0x20c>)
 80019fc:	601a      	str	r2, [r3, #0]
	if (ANGLE_REF_2>60){ANGLE_REF_2=60;}
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <ControlStepper+0x210>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001b64 <ControlStepper+0x200>
 8001a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	dd03      	ble.n	8001a1a <ControlStepper+0xb6>
 8001a12:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <ControlStepper+0x210>)
 8001a14:	4a54      	ldr	r2, [pc, #336]	; (8001b68 <ControlStepper+0x204>)
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e00c      	b.n	8001a34 <ControlStepper+0xd0>
	else if(ANGLE_REF_2<-60){ANGLE_REF_2=-60;}
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <ControlStepper+0x210>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001b6c <ControlStepper+0x208>
 8001a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2c:	d502      	bpl.n	8001a34 <ControlStepper+0xd0>
 8001a2e:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <ControlStepper+0x210>)
 8001a30:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <ControlStepper+0x20c>)
 8001a32:	601a      	str	r2, [r3, #0]
	}
	//CHANGE DIRECTION FOR STEPPER 1 DEPENDING ON ERROR SIGN
	if (ANGLE_ERROR_1 > 0){
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <ControlStepper+0x1f0>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	dd06      	ble.n	8001a4c <ControlStepper+0xe8>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a44:	484c      	ldr	r0, [pc, #304]	; (8001b78 <ControlStepper+0x214>)
 8001a46:	f001 fe91 	bl	800376c <HAL_GPIO_WritePin>
 8001a4a:	e005      	b.n	8001a58 <ControlStepper+0xf4>
	}
	else{
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a52:	4849      	ldr	r0, [pc, #292]	; (8001b78 <ControlStepper+0x214>)
 8001a54:	f001 fe8a 	bl	800376c <HAL_GPIO_WritePin>
	}

	ANGLE_ERROR_1 = abs(ANGLE_ERROR_1);
 8001a58:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <ControlStepper+0x1f0>)
 8001a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bfb8      	it	lt
 8001a62:	425b      	neglt	r3, r3
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <ControlStepper+0x1f0>)
 8001a6a:	801a      	strh	r2, [r3, #0]
	//UPDATE CCR REGISTER FOR STEPPER 1
	if(ANGLE_ERROR_1 > 0.9){
 8001a6c:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <ControlStepper+0x1f0>)
 8001a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	dd0a      	ble.n	8001a8c <ControlStepper+0x128>
		TIM1->ARR  = PWM_PERIOD;
 8001a76:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <ControlStepper+0x218>)
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <ControlStepper+0x21c>)
 8001a7c:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM1->CCR3 = PWM_PERIOD/2;
 8001a7e:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <ControlStepper+0x218>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	085b      	lsrs	r3, r3, #1
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <ControlStepper+0x21c>)
 8001a88:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a8a:	e007      	b.n	8001a9c <ControlStepper+0x138>
	}
	else{
		TIM1->ARR = PWM_PERIOD;
 8001a8c:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <ControlStepper+0x218>)
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <ControlStepper+0x21c>)
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM1->CCR3 = PWM_PERIOD;
 8001a94:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <ControlStepper+0x218>)
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <ControlStepper+0x21c>)
 8001a9a:	63da      	str	r2, [r3, #60]	; 0x3c
			  	  	  	   * ---- STEPPER 2 ----- *
			  	  	  	   ************************/

	//CHANGE DIRECTION FOR STEPPER 1 DEPENDING ON ERROR SIGN

	if (ANGLE_ERROR_2 > 0){
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <ControlStepper+0x1f8>)
 8001a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dd06      	ble.n	8001ab4 <ControlStepper+0x150>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aac:	4835      	ldr	r0, [pc, #212]	; (8001b84 <ControlStepper+0x220>)
 8001aae:	f001 fe5d 	bl	800376c <HAL_GPIO_WritePin>
 8001ab2:	e005      	b.n	8001ac0 <ControlStepper+0x15c>
		}
		else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aba:	4832      	ldr	r0, [pc, #200]	; (8001b84 <ControlStepper+0x220>)
 8001abc:	f001 fe56 	bl	800376c <HAL_GPIO_WritePin>
		}
	//UPDATE CCR REGISTER FOR STEPPER 1
	ANGLE_ERROR_2 = abs(ANGLE_ERROR_2);
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <ControlStepper+0x1f8>)
 8001ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bfb8      	it	lt
 8001aca:	425b      	neglt	r3, r3
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <ControlStepper+0x1f8>)
 8001ad2:	801a      	strh	r2, [r3, #0]
	if(ANGLE_ERROR_2 > 0.9){
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <ControlStepper+0x1f8>)
 8001ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	dd0a      	ble.n	8001af4 <ControlStepper+0x190>
		TIM1->ARR  = PWM_PERIOD;
 8001ade:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <ControlStepper+0x218>)
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <ControlStepper+0x21c>)
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM1->CCR2 = PWM_PERIOD/2;
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <ControlStepper+0x218>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <ControlStepper+0x21c>)
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
 8001af2:	e007      	b.n	8001b04 <ControlStepper+0x1a0>
		}
		else{
			TIM1->ARR = PWM_PERIOD;
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <ControlStepper+0x218>)
 8001af6:	881a      	ldrh	r2, [r3, #0]
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <ControlStepper+0x21c>)
 8001afa:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->CCR2 = PWM_PERIOD;
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <ControlStepper+0x218>)
 8001afe:	881a      	ldrh	r2, [r3, #0]
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <ControlStepper+0x21c>)
 8001b02:	639a      	str	r2, [r3, #56]	; 0x38
		}



	if( (ANGLE_ERROR_1 <= 2) && (ANGLE_ERROR_2 <= 2) ){
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <ControlStepper+0x1f0>)
 8001b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	dc10      	bgt.n	8001b30 <ControlStepper+0x1cc>
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <ControlStepper+0x1f8>)
 8001b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	dc0b      	bgt.n	8001b30 <ControlStepper+0x1cc>
		osThreadFlagsSet(startThrustHandle, 0x03); //FLAG THRUST THREAD
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <ControlStepper+0x224>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2103      	movs	r1, #3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fd58 	bl	80065d4 <osThreadFlagsSet>
		osThreadFlagsWait(0x02, osFlagsWaitAny, osWaitForever); //START THRUST THREAD
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f004 fda0 	bl	8006670 <osThreadFlagsWait>
	}


	//START ENCODER THREAD
	thread2++;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <ControlStepper+0x228>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <ControlStepper+0x228>)
 8001b38:	6013      	str	r3, [r2, #0]
	osThreadFlagsSet(StartEncoderHandle, 0x01);
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <ControlStepper+0x22c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4618      	mov	r0, r3
 8001b42:	f004 fd47 	bl	80065d4 <osThreadFlagsSet>
	osDelay(1U);
 8001b46:	e711      	b.n	800196c <ControlStepper+0x8>
 8001b48:	200000b4 	.word	0x200000b4
 8001b4c:	200000b8 	.word	0x200000b8
 8001b50:	20004b34 	.word	0x20004b34
 8001b54:	200000c0 	.word	0x200000c0
 8001b58:	20004b48 	.word	0x20004b48
 8001b5c:	200000c8 	.word	0x200000c8
 8001b60:	200000bc 	.word	0x200000bc
 8001b64:	42700000 	.word	0x42700000
 8001b68:	42700000 	.word	0x42700000
 8001b6c:	c2700000 	.word	0xc2700000
 8001b70:	c2700000 	.word	0xc2700000
 8001b74:	200000c4 	.word	0x200000c4
 8001b78:	40021400 	.word	0x40021400
 8001b7c:	2000001c 	.word	0x2000001c
 8001b80:	40010000 	.word	0x40010000
 8001b84:	40021000 	.word	0x40021000
 8001b88:	20004be4 	.word	0x20004be4
 8001b8c:	200000f0 	.word	0x200000f0
 8001b90:	20004bec 	.word	0x20004bec
 8001b94:	00000000 	.word	0x00000000

08001b98 <ControlThrust>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlThrust */
void ControlThrust(void *argument)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlThrust */
HAL_UART_Transmit(&huart4, THRUST_1, sizeof(THRUST_1), 2); //THRUST 1 (left)
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	49d0      	ldr	r1, [pc, #832]	; (8001ee8 <ControlThrust+0x350>)
 8001ba6:	48d1      	ldr	r0, [pc, #836]	; (8001eec <ControlThrust+0x354>)
 8001ba8:	f004 f92b 	bl	8005e02 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart5, THRUST_2, sizeof(THRUST_2), 2); //THRUST 2 (right)
 8001bac:	2302      	movs	r3, #2
 8001bae:	2201      	movs	r2, #1
 8001bb0:	49cf      	ldr	r1, [pc, #828]	; (8001ef0 <ControlThrust+0x358>)
 8001bb2:	48d0      	ldr	r0, [pc, #832]	; (8001ef4 <ControlThrust+0x35c>)
 8001bb4:	f004 f925 	bl	8005e02 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	//TIM3 ARR = 65535

	osThreadFlagsWait(0x03,osFlagsWaitAny, osWaitForever); // STOP THREAD
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	f004 fd56 	bl	8006670 <osThreadFlagsWait>

						   /************************
			  	  	  	    * ---- THRUST 1 ----- *
			  	  	  	    ************************/
	if(MANUAL == 1){
 8001bc4:	4bcc      	ldr	r3, [pc, #816]	; (8001ef8 <ControlThrust+0x360>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10c      	bne.n	8001be6 <ControlThrust+0x4e>
		HAL_UART_Transmit(&huart4, MANUAL_THRUST_REF, sizeof(MANUAL_THRUST_REF), 2); //THRUST 1 (left)
 8001bcc:	2302      	movs	r3, #2
 8001bce:	2201      	movs	r2, #1
 8001bd0:	49ca      	ldr	r1, [pc, #808]	; (8001efc <ControlThrust+0x364>)
 8001bd2:	48c6      	ldr	r0, [pc, #792]	; (8001eec <ControlThrust+0x354>)
 8001bd4:	f004 f915 	bl	8005e02 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, MANUAL_THRUST_REF, sizeof(MANUAL_THRUST_REF), 2); //THRUST 2 (right)
 8001bd8:	2302      	movs	r3, #2
 8001bda:	2201      	movs	r2, #1
 8001bdc:	49c7      	ldr	r1, [pc, #796]	; (8001efc <ControlThrust+0x364>)
 8001bde:	48c5      	ldr	r0, [pc, #788]	; (8001ef4 <ControlThrust+0x35c>)
 8001be0:	f004 f90f 	bl	8005e02 <HAL_UART_Transmit>
 8001be4:	e1b6      	b.n	8001f54 <ControlThrust+0x3bc>
	}
	else{

		if(THRUST_1_REF > 0){ //scaling from
 8001be6:	4bc6      	ldr	r3, [pc, #792]	; (8001f00 <ControlThrust+0x368>)
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	dd4e      	ble.n	8001c94 <ControlThrust+0xfc>
			VOLTAGE_1 = (-3.44+sqrt(3.44*3.44+4*1.003*THRUST_1_REF))/(2*1.002);
 8001bf6:	4bc2      	ldr	r3, [pc, #776]	; (8001f00 <ControlThrust+0x368>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fcac 	bl	8000558 <__aeabi_f2d>
 8001c00:	a3a9      	add	r3, pc, #676	; (adr r3, 8001ea8 <ControlThrust+0x310>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fcff 	bl	8000608 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	a3a7      	add	r3, pc, #668	; (adr r3, 8001eb0 <ControlThrust+0x318>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe fb40 	bl	800029c <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	ec43 2b17 	vmov	d7, r2, r3
 8001c24:	eeb0 0a47 	vmov.f32	s0, s14
 8001c28:	eef0 0a67 	vmov.f32	s1, s15
 8001c2c:	f008 fc40 	bl	800a4b0 <sqrt>
 8001c30:	ec51 0b10 	vmov	r0, r1, d0
 8001c34:	a3a0      	add	r3, pc, #640	; (adr r3, 8001eb8 <ControlThrust+0x320>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fb2d 	bl	8000298 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	a39e      	add	r3, pc, #632	; (adr r3, 8001ec0 <ControlThrust+0x328>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fe06 	bl	800085c <__aeabi_ddiv>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f7fe ff86 	bl	8000b68 <__aeabi_d2f>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4aa9      	ldr	r2, [pc, #676]	; (8001f04 <ControlThrust+0x36c>)
 8001c60:	6013      	str	r3, [r2, #0]
			THRUST_1[0] = 127*(VOLTAGE_1/MAX_VOLTAGE)+128;
 8001c62:	4ba8      	ldr	r3, [pc, #672]	; (8001f04 <ControlThrust+0x36c>)
 8001c64:	edd3 6a00 	vldr	s13, [r3]
 8001c68:	4ba7      	ldr	r3, [pc, #668]	; (8001f08 <ControlThrust+0x370>)
 8001c6a:	ed93 7a00 	vldr	s14, [r3]
 8001c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c72:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001f0c <ControlThrust+0x374>
 8001c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001f10 <ControlThrust+0x378>
 8001c7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c86:	edc7 7a00 	vstr	s15, [r7]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b96      	ldr	r3, [pc, #600]	; (8001ee8 <ControlThrust+0x350>)
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e059      	b.n	8001d48 <ControlThrust+0x1b0>
		}
		else if (THRUST_1_REF < 0){
 8001c94:	4b9a      	ldr	r3, [pc, #616]	; (8001f00 <ControlThrust+0x368>)
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	d54e      	bpl.n	8001d42 <ControlThrust+0x1aa>
			VOLTAGE_1 = (-0.17+sqrt(0.17*0.17+4*0.302*-1*THRUST_1_REF))/(2*0.302);
 8001ca4:	4b96      	ldr	r3, [pc, #600]	; (8001f00 <ControlThrust+0x368>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc55 	bl	8000558 <__aeabi_f2d>
 8001cae:	a386      	add	r3, pc, #536	; (adr r3, 8001ec8 <ControlThrust+0x330>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fca8 	bl	8000608 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	a383      	add	r3, pc, #524	; (adr r3, 8001ed0 <ControlThrust+0x338>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fae9 	bl	800029c <__adddf3>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	ec43 2b17 	vmov	d7, r2, r3
 8001cd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd6:	eef0 0a67 	vmov.f32	s1, s15
 8001cda:	f008 fbe9 	bl	800a4b0 <sqrt>
 8001cde:	ec51 0b10 	vmov	r0, r1, d0
 8001ce2:	a37d      	add	r3, pc, #500	; (adr r3, 8001ed8 <ControlThrust+0x340>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fad6 	bl	8000298 <__aeabi_dsub>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	a37a      	add	r3, pc, #488	; (adr r3, 8001ee0 <ControlThrust+0x348>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fdaf 	bl	800085c <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff2f 	bl	8000b68 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a7d      	ldr	r2, [pc, #500]	; (8001f04 <ControlThrust+0x36c>)
 8001d0e:	6013      	str	r3, [r2, #0]
			THRUST_1[0] = -127*(VOLTAGE_1/MAX_VOLTAGE) + 128;
 8001d10:	4b7c      	ldr	r3, [pc, #496]	; (8001f04 <ControlThrust+0x36c>)
 8001d12:	edd3 6a00 	vldr	s13, [r3]
 8001d16:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <ControlThrust+0x370>)
 8001d18:	ed93 7a00 	vldr	s14, [r3]
 8001d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d20:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001f14 <ControlThrust+0x37c>
 8001d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d28:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001f10 <ControlThrust+0x378>
 8001d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d34:	edc7 7a00 	vstr	s15, [r7]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <ControlThrust+0x350>)
 8001d3e:	701a      	strb	r2, [r3, #0]
 8001d40:	e002      	b.n	8001d48 <ControlThrust+0x1b0>
		}
		else{
			THRUST_1[0] = 128;
 8001d42:	4b69      	ldr	r3, [pc, #420]	; (8001ee8 <ControlThrust+0x350>)
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	701a      	strb	r2, [r3, #0]
		}
    					   /************************
    			  	  	  	* ---- THRUST 2 ----- *
    			  	  	  	************************/

		if(THRUST_2_REF > 0){ //scaling from
 8001d48:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <ControlThrust+0x380>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	dd4e      	ble.n	8001df6 <ControlThrust+0x25e>
			VOLTAGE_2 = (-3.44+sqrt(3.44*3.44+4*1.003*THRUST_2_REF))/(2*1.002);
 8001d58:	4b6f      	ldr	r3, [pc, #444]	; (8001f18 <ControlThrust+0x380>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbfb 	bl	8000558 <__aeabi_f2d>
 8001d62:	a351      	add	r3, pc, #324	; (adr r3, 8001ea8 <ControlThrust+0x310>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fc4e 	bl	8000608 <__aeabi_dmul>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	a34e      	add	r3, pc, #312	; (adr r3, 8001eb0 <ControlThrust+0x318>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fa8f 	bl	800029c <__adddf3>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	ec43 2b17 	vmov	d7, r2, r3
 8001d86:	eeb0 0a47 	vmov.f32	s0, s14
 8001d8a:	eef0 0a67 	vmov.f32	s1, s15
 8001d8e:	f008 fb8f 	bl	800a4b0 <sqrt>
 8001d92:	ec51 0b10 	vmov	r0, r1, d0
 8001d96:	a348      	add	r3, pc, #288	; (adr r3, 8001eb8 <ControlThrust+0x320>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fa7c 	bl	8000298 <__aeabi_dsub>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	a345      	add	r3, pc, #276	; (adr r3, 8001ec0 <ControlThrust+0x328>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fd55 	bl	800085c <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7fe fed5 	bl	8000b68 <__aeabi_d2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a56      	ldr	r2, [pc, #344]	; (8001f1c <ControlThrust+0x384>)
 8001dc2:	6013      	str	r3, [r2, #0]
			THRUST_2[0] = 127*(VOLTAGE_2/MAX_VOLTAGE)+128;
 8001dc4:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <ControlThrust+0x384>)
 8001dc6:	edd3 6a00 	vldr	s13, [r3]
 8001dca:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <ControlThrust+0x370>)
 8001dcc:	ed93 7a00 	vldr	s14, [r3]
 8001dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001f0c <ControlThrust+0x374>
 8001dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ddc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001f10 <ControlThrust+0x378>
 8001de0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de8:	edc7 7a00 	vstr	s15, [r7]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <ControlThrust+0x358>)
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e097      	b.n	8001f26 <ControlThrust+0x38e>
		}
		else if (THRUST_2_REF < 0){
 8001df6:	4b48      	ldr	r3, [pc, #288]	; (8001f18 <ControlThrust+0x380>)
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	f140 808c 	bpl.w	8001f20 <ControlThrust+0x388>
			VOLTAGE_2 = (-0.17+sqrt(0.17*0.17+4*0.302*-1*THRUST_2_REF))/(2*0.302);
 8001e08:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <ControlThrust+0x380>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fba3 	bl	8000558 <__aeabi_f2d>
 8001e12:	a32d      	add	r3, pc, #180	; (adr r3, 8001ec8 <ControlThrust+0x330>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fbf6 	bl	8000608 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	a32a      	add	r3, pc, #168	; (adr r3, 8001ed0 <ControlThrust+0x338>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fa37 	bl	800029c <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	ec43 2b17 	vmov	d7, r2, r3
 8001e36:	eeb0 0a47 	vmov.f32	s0, s14
 8001e3a:	eef0 0a67 	vmov.f32	s1, s15
 8001e3e:	f008 fb37 	bl	800a4b0 <sqrt>
 8001e42:	ec51 0b10 	vmov	r0, r1, d0
 8001e46:	a324      	add	r3, pc, #144	; (adr r3, 8001ed8 <ControlThrust+0x340>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fa24 	bl	8000298 <__aeabi_dsub>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	a321      	add	r3, pc, #132	; (adr r3, 8001ee0 <ControlThrust+0x348>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fcfd 	bl	800085c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fe7d 	bl	8000b68 <__aeabi_d2f>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a2a      	ldr	r2, [pc, #168]	; (8001f1c <ControlThrust+0x384>)
 8001e72:	6013      	str	r3, [r2, #0]
			THRUST_2[0] = -127*(VOLTAGE_2/MAX_VOLTAGE)+128;
 8001e74:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <ControlThrust+0x384>)
 8001e76:	edd3 6a00 	vldr	s13, [r3]
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <ControlThrust+0x370>)
 8001e7c:	ed93 7a00 	vldr	s14, [r3]
 8001e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e84:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001f14 <ControlThrust+0x37c>
 8001e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001f10 <ControlThrust+0x378>
 8001e90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e98:	edc7 7a00 	vstr	s15, [r7]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <ControlThrust+0x358>)
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e03f      	b.n	8001f26 <ControlThrust+0x38e>
 8001ea6:	bf00      	nop
 8001ea8:	ba5e353f 	.word	0xba5e353f
 8001eac:	40100c49 	.word	0x40100c49
 8001eb0:	9e83e425 	.word	0x9e83e425
 8001eb4:	4027aacd 	.word	0x4027aacd
 8001eb8:	b851eb85 	.word	0xb851eb85
 8001ebc:	400b851e 	.word	0x400b851e
 8001ec0:	26e978d5 	.word	0x26e978d5
 8001ec4:	40000831 	.word	0x40000831
 8001ec8:	ced91687 	.word	0xced91687
 8001ecc:	bff353f7 	.word	0xbff353f7
 8001ed0:	2b6ae7d7 	.word	0x2b6ae7d7
 8001ed4:	3f9d97f6 	.word	0x3f9d97f6
 8001ed8:	5c28f5c3 	.word	0x5c28f5c3
 8001edc:	3fc5c28f 	.word	0x3fc5c28f
 8001ee0:	ced91687 	.word	0xced91687
 8001ee4:	3fe353f7 	.word	0x3fe353f7
 8001ee8:	20000014 	.word	0x20000014
 8001eec:	20004bf0 	.word	0x20004bf0
 8001ef0:	20000018 	.word	0x20000018
 8001ef4:	20004b54 	.word	0x20004b54
 8001ef8:	200000b4 	.word	0x200000b4
 8001efc:	20000000 	.word	0x20000000
 8001f00:	200000d4 	.word	0x200000d4
 8001f04:	200000cc 	.word	0x200000cc
 8001f08:	20000010 	.word	0x20000010
 8001f0c:	42fe0000 	.word	0x42fe0000
 8001f10:	43000000 	.word	0x43000000
 8001f14:	c2fe0000 	.word	0xc2fe0000
 8001f18:	200000d8 	.word	0x200000d8
 8001f1c:	200000d0 	.word	0x200000d0
		}
		else{
			THRUST_2[0] = 128;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <ControlThrust+0x3e4>)
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	701a      	strb	r2, [r3, #0]
		}

		if (thread3 > 2000){ //IF CAN DOESNT SEND
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <ControlThrust+0x3e8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f2e:	dd05      	ble.n	8001f3c <ControlThrust+0x3a4>
			THRUST_1[0] = 128;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <ControlThrust+0x3ec>)
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	701a      	strb	r2, [r3, #0]
			THRUST_2[0] = 128;
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <ControlThrust+0x3e4>)
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Transmit(&huart4, THRUST_1, sizeof(THRUST_1), 2); //THRUST 1 (left)
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4910      	ldr	r1, [pc, #64]	; (8001f84 <ControlThrust+0x3ec>)
 8001f42:	4811      	ldr	r0, [pc, #68]	; (8001f88 <ControlThrust+0x3f0>)
 8001f44:	f003 ff5d 	bl	8005e02 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, THRUST_2, sizeof(THRUST_2), 2); //THRUST 2 (right)
 8001f48:	2302      	movs	r3, #2
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	490b      	ldr	r1, [pc, #44]	; (8001f7c <ControlThrust+0x3e4>)
 8001f4e:	480f      	ldr	r0, [pc, #60]	; (8001f8c <ControlThrust+0x3f4>)
 8001f50:	f003 ff57 	bl	8005e02 <HAL_UART_Transmit>
	}


	status++;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <ControlThrust+0x3f8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <ControlThrust+0x3f8>)
 8001f5c:	6013      	str	r3, [r2, #0]
	thread3++;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <ControlThrust+0x3e8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <ControlThrust+0x3e8>)
 8001f66:	6013      	str	r3, [r2, #0]
	osDelay(1);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f004 fc02 	bl	8006772 <osDelay>
	osThreadFlagsSet(StartStepperHandle, 0x02);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <ControlThrust+0x3fc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2102      	movs	r1, #2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 fb2d 	bl	80065d4 <osThreadFlagsSet>
	osThreadFlagsWait(0x03,osFlagsWaitAny, osWaitForever); // STOP THREAD
 8001f7a:	e61d      	b.n	8001bb8 <ControlThrust+0x20>
 8001f7c:	20000018 	.word	0x20000018
 8001f80:	200000f4 	.word	0x200000f4
 8001f84:	20000014 	.word	0x20000014
 8001f88:	20004bf0 	.word	0x20004bf0
 8001f8c:	20004b54 	.word	0x20004b54
 8001f90:	200000f8 	.word	0x200000f8
 8001f94:	20004b4c 	.word	0x20004b4c

08001f98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001faa:	f000 fb85 	bl	80026b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40001000 	.word	0x40001000

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <Error_Handler+0x8>
	...

08001fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_MspInit+0x54>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a11      	ldr	r2, [pc, #68]	; (800201c <HAL_MspInit+0x54>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_MspInit+0x54>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_MspInit+0x54>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <HAL_MspInit+0x54>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_MspInit+0x54>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	210f      	movs	r1, #15
 800200a:	f06f 0001 	mvn.w	r0, #1
 800200e:	f001 f9d7 	bl	80033c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800

08002020 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <HAL_CAN_MspInit+0x94>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d133      	bne.n	80020aa <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <HAL_CAN_MspInit+0x98>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <HAL_CAN_MspInit+0x98>)
 800204c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_CAN_MspInit+0x98>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_CAN_MspInit+0x98>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <HAL_CAN_MspInit+0x98>)
 8002068:	f043 0308 	orr.w	r3, r3, #8
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_CAN_MspInit+0x98>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800207a:	2303      	movs	r3, #3
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800208a:	2309      	movs	r3, #9
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <HAL_CAN_MspInit+0x9c>)
 8002096:	f001 f9bd 	bl	8003414 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2105      	movs	r1, #5
 800209e:	2014      	movs	r0, #20
 80020a0:	f001 f98e 	bl	80033c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80020a4:	2014      	movs	r0, #20
 80020a6:	f001 f9a7 	bl	80033f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	; 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40006400 	.word	0x40006400
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020c00 	.word	0x40020c00

080020c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	; 0x30
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a41      	ldr	r2, [pc, #260]	; (80021e4 <HAL_SPI_MspInit+0x124>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d12c      	bne.n	800213c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a3f      	ldr	r2, [pc, #252]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 80020ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a38      	ldr	r2, [pc, #224]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800211a:	2338      	movs	r3, #56	; 0x38
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800212a:	2305      	movs	r3, #5
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	482d      	ldr	r0, [pc, #180]	; (80021ec <HAL_SPI_MspInit+0x12c>)
 8002136:	f001 f96d 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800213a:	e04f      	b.n	80021dc <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <HAL_SPI_MspInit+0x130>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d14a      	bne.n	80021dc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a1f      	ldr	r2, [pc, #124]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_SPI_MspInit+0x128>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800219a:	2304      	movs	r3, #4
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021aa:	2305      	movs	r3, #5
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	480f      	ldr	r0, [pc, #60]	; (80021f4 <HAL_SPI_MspInit+0x134>)
 80021b6:	f001 f92d 	bl	8003414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80021ba:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021cc:	2305      	movs	r3, #5
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <HAL_SPI_MspInit+0x12c>)
 80021d8:	f001 f91c 	bl	8003414 <HAL_GPIO_Init>
}
 80021dc:	bf00      	nop
 80021de:	3730      	adds	r7, #48	; 0x30
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40013000 	.word	0x40013000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40003800 	.word	0x40003800
 80021f4:	40020800 	.word	0x40020800

080021f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <HAL_TIM_Base_MspInit+0x3c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10d      	bne.n	8002226 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_TIM_Base_MspInit+0x40>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <HAL_TIM_Base_MspInit+0x40>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	4b07      	ldr	r3, [pc, #28]	; (8002238 <HAL_TIM_Base_MspInit+0x40>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40010000 	.word	0x40010000
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_TIM_MspPostInit+0x68>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d11e      	bne.n	800229c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_TIM_MspPostInit+0x6c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <HAL_TIM_MspPostInit+0x6c>)
 8002268:	f043 0310 	orr.w	r3, r3, #16
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_TIM_MspPostInit+0x6c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800227a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800227e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800228c:	2301      	movs	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	4619      	mov	r1, r3
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <HAL_TIM_MspPostInit+0x70>)
 8002298:	f001 f8bc 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800229c:	bf00      	nop
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40021000 	.word	0x40021000

080022b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08c      	sub	sp, #48	; 0x30
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a32      	ldr	r2, [pc, #200]	; (8002398 <HAL_UART_MspInit+0xe8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12c      	bne.n	800232c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	4b31      	ldr	r3, [pc, #196]	; (800239c <HAL_UART_MspInit+0xec>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4a30      	ldr	r2, [pc, #192]	; (800239c <HAL_UART_MspInit+0xec>)
 80022dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b2e      	ldr	r3, [pc, #184]	; (800239c <HAL_UART_MspInit+0xec>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_UART_MspInit+0xec>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a29      	ldr	r2, [pc, #164]	; (800239c <HAL_UART_MspInit+0xec>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_UART_MspInit+0xec>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800230a:	2301      	movs	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800230e:	2312      	movs	r3, #18
 8002310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800231a:	2308      	movs	r3, #8
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	4619      	mov	r1, r3
 8002324:	481e      	ldr	r0, [pc, #120]	; (80023a0 <HAL_UART_MspInit+0xf0>)
 8002326:	f001 f875 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800232a:	e031      	b.n	8002390 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==UART5)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <HAL_UART_MspInit+0xf4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d12c      	bne.n	8002390 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_UART_MspInit+0xec>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a17      	ldr	r2, [pc, #92]	; (800239c <HAL_UART_MspInit+0xec>)
 8002340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_UART_MspInit+0xec>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_UART_MspInit+0xec>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_UART_MspInit+0xec>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_UART_MspInit+0xec>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800236e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002374:	2312      	movs	r3, #18
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237c:	2303      	movs	r3, #3
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002380:	2308      	movs	r3, #8
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4619      	mov	r1, r3
 800238a:	4807      	ldr	r0, [pc, #28]	; (80023a8 <HAL_UART_MspInit+0xf8>)
 800238c:	f001 f842 	bl	8003414 <HAL_GPIO_Init>
}
 8002390:	bf00      	nop
 8002392:	3730      	adds	r7, #48	; 0x30
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40004c00 	.word	0x40004c00
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40005000 	.word	0x40005000
 80023a8:	40020800 	.word	0x40020800

080023ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	; 0x30
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80023bc:	2200      	movs	r2, #0
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	2036      	movs	r0, #54	; 0x36
 80023c2:	f000 fffd 	bl	80033c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023c6:	2036      	movs	r0, #54	; 0x36
 80023c8:	f001 f816 	bl	80033f8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <HAL_InitTick+0xa4>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_InitTick+0xa4>)
 80023d6:	f043 0310 	orr.w	r3, r3, #16
 80023da:	6413      	str	r3, [r2, #64]	; 0x40
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_InitTick+0xa4>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023e8:	f107 0210 	add.w	r2, r7, #16
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f001 fe48 	bl	8004088 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80023f8:	f001 fe1e 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 80023fc:	4603      	mov	r3, r0
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_InitTick+0xa8>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0c9b      	lsrs	r3, r3, #18
 800240c:	3b01      	subs	r3, #1
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_InitTick+0xac>)
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_InitTick+0xb0>)
 8002414:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_InitTick+0xac>)
 8002418:	f240 32e7 	movw	r2, #999	; 0x3e7
 800241c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_InitTick+0xac>)
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_InitTick+0xac>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_InitTick+0xac>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002430:	4809      	ldr	r0, [pc, #36]	; (8002458 <HAL_InitTick+0xac>)
 8002432:	f002 fc03 	bl	8004c3c <HAL_TIM_Base_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d104      	bne.n	8002446 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800243c:	4806      	ldr	r0, [pc, #24]	; (8002458 <HAL_InitTick+0xac>)
 800243e:	f002 fc4d 	bl	8004cdc <HAL_TIM_Base_Start_IT>
 8002442:	4603      	mov	r3, r0
 8002444:	e000      	b.n	8002448 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	3730      	adds	r7, #48	; 0x30
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	431bde83 	.word	0x431bde83
 8002458:	20004cec 	.word	0x20004cec
 800245c:	40001000 	.word	0x40001000

08002460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <NMI_Handler+0x4>

08002466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800246a:	e7fe      	b.n	800246a <HardFault_Handler+0x4>

0800246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <MemManage_Handler+0x4>

08002472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002476:	e7fe      	b.n	8002476 <BusFault_Handler+0x4>

08002478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247c:	e7fe      	b.n	800247c <UsageFault_Handler+0x4>

0800247e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <CAN1_RX0_IRQHandler+0x10>)
 8002492:	f000 fcad 	bl	8002df0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20004c90 	.word	0x20004c90

080024a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <TIM6_DAC_IRQHandler+0x10>)
 80024a6:	f002 fdab 	bl	8005000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20004cec 	.word	0x20004cec

080024b4 <_read>:
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e00a      	b.n	80024dc <_read+0x28>
 80024c6:	f3af 8000 	nop.w
 80024ca:	4601      	mov	r1, r0
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	60ba      	str	r2, [r7, #8]
 80024d2:	b2ca      	uxtb	r2, r1
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	dbf0      	blt.n	80024c6 <_read+0x12>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_write>:
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e009      	b.n	8002514 <_write+0x26>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	60ba      	str	r2, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f3af 8000 	nop.w
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	3301      	adds	r3, #1
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	429a      	cmp	r2, r3
 800251a:	dbf1      	blt.n	8002500 <_write+0x12>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <_close>:
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_fstat>:
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	2300      	movs	r3, #0
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <_isatty>:
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	2301      	movs	r3, #1
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <_lseek>:
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	2300      	movs	r3, #0
 8002582:	4618      	mov	r0, r3
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <_sbrk>:
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <_sbrk+0x5c>)
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <_sbrk+0x60>)
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <_sbrk+0x22>
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <_sbrk+0x64>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <_sbrk+0x68>)
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d207      	bcs.n	80025d0 <_sbrk+0x40>
 80025c0:	f006 ff74 	bl	80094ac <__errno>
 80025c4:	4603      	mov	r3, r0
 80025c6:	220c      	movs	r2, #12
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ce:	e009      	b.n	80025e4 <_sbrk+0x54>
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <_sbrk+0x64>)
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20030000 	.word	0x20030000
 80025f0:	00000400 	.word	0x00000400
 80025f4:	200000fc 	.word	0x200000fc
 80025f8:	20004d88 	.word	0x20004d88

080025fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <SystemInit+0x20>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <SystemInit+0x20>)
 8002608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800260c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <Reset_Handler>:
 8002620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002658 <LoopFillZerobss+0x12>
 8002624:	480d      	ldr	r0, [pc, #52]	; (800265c <LoopFillZerobss+0x16>)
 8002626:	490e      	ldr	r1, [pc, #56]	; (8002660 <LoopFillZerobss+0x1a>)
 8002628:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <LoopFillZerobss+0x1e>)
 800262a:	2300      	movs	r3, #0
 800262c:	e002      	b.n	8002634 <LoopCopyDataInit>

0800262e <CopyDataInit>:
 800262e:	58d4      	ldr	r4, [r2, r3]
 8002630:	50c4      	str	r4, [r0, r3]
 8002632:	3304      	adds	r3, #4

08002634 <LoopCopyDataInit>:
 8002634:	18c4      	adds	r4, r0, r3
 8002636:	428c      	cmp	r4, r1
 8002638:	d3f9      	bcc.n	800262e <CopyDataInit>
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <LoopFillZerobss+0x22>)
 800263c:	4c0b      	ldr	r4, [pc, #44]	; (800266c <LoopFillZerobss+0x26>)
 800263e:	2300      	movs	r3, #0
 8002640:	e001      	b.n	8002646 <LoopFillZerobss>

08002642 <FillZerobss>:
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	3204      	adds	r2, #4

08002646 <LoopFillZerobss>:
 8002646:	42a2      	cmp	r2, r4
 8002648:	d3fb      	bcc.n	8002642 <FillZerobss>
 800264a:	f7ff ffd7 	bl	80025fc <SystemInit>
 800264e:	f007 f829 	bl	80096a4 <__libc_init_array>
 8002652:	f7fe fc55 	bl	8000f00 <main>
 8002656:	4770      	bx	lr
 8002658:	20030000 	.word	0x20030000
 800265c:	20000000 	.word	0x20000000
 8002660:	20000098 	.word	0x20000098
 8002664:	0800a83c 	.word	0x0800a83c
 8002668:	20000098 	.word	0x20000098
 800266c:	20004d88 	.word	0x20004d88

08002670 <ADC_IRQHandler>:
 8002670:	e7fe      	b.n	8002670 <ADC_IRQHandler>
	...

08002674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <HAL_Init+0x40>)
 800267e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <HAL_Init+0x40>)
 800268a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_Init+0x40>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_Init+0x40>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269c:	2003      	movs	r0, #3
 800269e:	f000 fe84 	bl	80033aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a2:	200f      	movs	r0, #15
 80026a4:	f7ff fe82 	bl	80023ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a8:	f7ff fc8e 	bl	8001fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023c00 	.word	0x40023c00

080026b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x20>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_IncTick+0x24>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	4a04      	ldr	r2, [pc, #16]	; (80026dc <HAL_IncTick+0x24>)
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000028 	.word	0x20000028
 80026dc:	20004d34 	.word	0x20004d34

080026e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return uwTick;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <HAL_GetTick+0x14>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20004d34 	.word	0x20004d34

080026f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002700:	f7ff ffee 	bl	80026e0 <HAL_GetTick>
 8002704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002710:	d005      	beq.n	800271e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_Delay+0x44>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800271e:	bf00      	nop
 8002720:	f7ff ffde 	bl	80026e0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	429a      	cmp	r2, r3
 800272e:	d8f7      	bhi.n	8002720 <HAL_Delay+0x28>
  {
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000028 	.word	0x20000028

08002740 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0ed      	b.n	800292e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fc5e 	bl	8002020 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002774:	f7ff ffb4 	bl	80026e0 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800277a:	e012      	b.n	80027a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800277c:	f7ff ffb0 	bl	80026e0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b0a      	cmp	r3, #10
 8002788:	d90b      	bls.n	80027a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2205      	movs	r2, #5
 800279a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0c5      	b.n	800292e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0e5      	beq.n	800277c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0202 	bic.w	r2, r2, #2
 80027be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027c0:	f7ff ff8e 	bl	80026e0 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027c6:	e012      	b.n	80027ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027c8:	f7ff ff8a 	bl	80026e0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b0a      	cmp	r3, #10
 80027d4:	d90b      	bls.n	80027ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2205      	movs	r2, #5
 80027e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e09f      	b.n	800292e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e5      	bne.n	80027c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7e1b      	ldrb	r3, [r3, #24]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d108      	bne.n	8002816 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e007      	b.n	8002826 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7e5b      	ldrb	r3, [r3, #25]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d108      	bne.n	8002840 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e007      	b.n	8002850 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7e9b      	ldrb	r3, [r3, #26]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d108      	bne.n	800286a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0220 	orr.w	r2, r2, #32
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e007      	b.n	800287a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0220 	bic.w	r2, r2, #32
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7edb      	ldrb	r3, [r3, #27]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d108      	bne.n	8002894 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0210 	bic.w	r2, r2, #16
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e007      	b.n	80028a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0210 	orr.w	r2, r2, #16
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7f1b      	ldrb	r3, [r3, #28]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d108      	bne.n	80028be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0208 	orr.w	r2, r2, #8
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e007      	b.n	80028ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0208 	bic.w	r2, r2, #8
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7f5b      	ldrb	r3, [r3, #29]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0204 	orr.w	r2, r2, #4
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e007      	b.n	80028f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0204 	bic.w	r2, r2, #4
 80028f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	ea42 0103 	orr.w	r1, r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d003      	beq.n	800295e <HAL_CAN_ConfigFilter+0x26>
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b02      	cmp	r3, #2
 800295a:	f040 80be 	bne.w	8002ada <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800295e:	4b65      	ldr	r3, [pc, #404]	; (8002af4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002960:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002968:	f043 0201 	orr.w	r2, r3, #1
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002978:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	431a      	orrs	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2201      	movs	r2, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	401a      	ands	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d123      	bne.n	8002a08 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3248      	adds	r2, #72	; 0x48
 80029e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029fe:	6979      	ldr	r1, [r7, #20]
 8002a00:	3348      	adds	r3, #72	; 0x48
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d122      	bne.n	8002a56 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3248      	adds	r2, #72	; 0x48
 8002a36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a4c:	6979      	ldr	r1, [r7, #20]
 8002a4e:	3348      	adds	r3, #72	; 0x48
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	401a      	ands	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a70:	e007      	b.n	8002a82 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	401a      	ands	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a9c:	e007      	b.n	8002aae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002acc:	f023 0201 	bic.w	r2, r3, #1
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e006      	b.n	8002ae8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40006400 	.word	0x40006400

08002af8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d12e      	bne.n	8002b6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b24:	f7ff fddc 	bl	80026e0 <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b2a:	e012      	b.n	8002b52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b2c:	f7ff fdd8 	bl	80026e0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b0a      	cmp	r3, #10
 8002b38:	d90b      	bls.n	8002b52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2205      	movs	r2, #5
 8002b4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e012      	b.n	8002b78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e5      	bne.n	8002b2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e006      	b.n	8002b78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
  }
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b94:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d003      	beq.n	8002ba4 <HAL_CAN_GetRxMessage+0x24>
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	f040 80f3 	bne.w	8002d8a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0e7      	b.n	8002d98 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0d8      	b.n	8002d98 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	331b      	adds	r3, #27
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0204 	and.w	r2, r3, #4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10c      	bne.n	8002c1e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	331b      	adds	r3, #27
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	4413      	add	r3, r2
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0d5b      	lsrs	r3, r3, #21
 8002c14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e00b      	b.n	8002c36 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	331b      	adds	r3, #27
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	4413      	add	r3, r2
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	08db      	lsrs	r3, r3, #3
 8002c2e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	331b      	adds	r3, #27
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	4413      	add	r3, r2
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0202 	and.w	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	331b      	adds	r3, #27
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 020f 	and.w	r2, r3, #15
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	331b      	adds	r3, #27
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	4413      	add	r3, r2
 8002c70:	3304      	adds	r3, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	331b      	adds	r3, #27
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0a1a      	lsrs	r2, r3, #8
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0c1a      	lsrs	r2, r3, #16
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	3302      	adds	r3, #2
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e1a      	lsrs	r2, r3, #24
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	3303      	adds	r3, #3
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0a1a      	lsrs	r2, r3, #8
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	3305      	adds	r3, #5
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	0c1a      	lsrs	r2, r3, #16
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	3306      	adds	r3, #6
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0e1a      	lsrs	r2, r3, #24
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	3307      	adds	r3, #7
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d108      	bne.n	8002d76 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0220 	orr.w	r2, r2, #32
 8002d72:	60da      	str	r2, [r3, #12]
 8002d74:	e007      	b.n	8002d86 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0220 	orr.w	r2, r2, #32
 8002d84:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e006      	b.n	8002d98 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d002      	beq.n	8002dc2 <HAL_CAN_ActivateNotification+0x1e>
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d109      	bne.n	8002dd6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6959      	ldr	r1, [r3, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e006      	b.n	8002de4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d07c      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d023      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f983 	bl	800315e <HAL_CAN_TxMailbox0CompleteCallback>
 8002e58:	e016      	b.n	8002e88 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6c:	e00c      	b.n	8002e88 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e80:	e002      	b.n	8002e88 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f989 	bl	800319a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d024      	beq.n	8002edc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e9a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f963 	bl	8003172 <HAL_CAN_TxMailbox1CompleteCallback>
 8002eac:	e016      	b.n	8002edc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec0:	e00c      	b.n	8002edc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed4:	e002      	b.n	8002edc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f969 	bl	80031ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d024      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002eee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f943 	bl	8003186 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f00:	e016      	b.n	8002f30 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
 8002f14:	e00c      	b.n	8002f30 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
 8002f28:	e002      	b.n	8002f30 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f949 	bl	80031c2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2210      	movs	r2, #16
 8002f52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f930 	bl	80031d6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe fb1e 	bl	80015d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d006      	beq.n	8002fda <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f912 	bl	80031fe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8f9 	bl	80031ea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2210      	movs	r2, #16
 8003012:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8fc 	bl	8003212 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2208      	movs	r2, #8
 8003034:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f8f5 	bl	8003226 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d07b      	beq.n	800313e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d072      	beq.n	8003136 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d043      	beq.n	8003136 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d03e      	beq.n	8003136 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030be:	2b60      	cmp	r3, #96	; 0x60
 80030c0:	d02b      	beq.n	800311a <HAL_CAN_IRQHandler+0x32a>
 80030c2:	2b60      	cmp	r3, #96	; 0x60
 80030c4:	d82e      	bhi.n	8003124 <HAL_CAN_IRQHandler+0x334>
 80030c6:	2b50      	cmp	r3, #80	; 0x50
 80030c8:	d022      	beq.n	8003110 <HAL_CAN_IRQHandler+0x320>
 80030ca:	2b50      	cmp	r3, #80	; 0x50
 80030cc:	d82a      	bhi.n	8003124 <HAL_CAN_IRQHandler+0x334>
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d019      	beq.n	8003106 <HAL_CAN_IRQHandler+0x316>
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d826      	bhi.n	8003124 <HAL_CAN_IRQHandler+0x334>
 80030d6:	2b30      	cmp	r3, #48	; 0x30
 80030d8:	d010      	beq.n	80030fc <HAL_CAN_IRQHandler+0x30c>
 80030da:	2b30      	cmp	r3, #48	; 0x30
 80030dc:	d822      	bhi.n	8003124 <HAL_CAN_IRQHandler+0x334>
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d002      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x2f8>
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d005      	beq.n	80030f2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030e6:	e01d      	b.n	8003124 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	f043 0308 	orr.w	r3, r3, #8
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030f0:	e019      	b.n	8003126 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	f043 0310 	orr.w	r3, r3, #16
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030fa:	e014      	b.n	8003126 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	f043 0320 	orr.w	r3, r3, #32
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003104:	e00f      	b.n	8003126 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800310e:	e00a      	b.n	8003126 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003118:	e005      	b.n	8003126 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003122:	e000      	b.n	8003126 <HAL_CAN_IRQHandler+0x336>
            break;
 8003124:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003134:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2204      	movs	r2, #4
 800313c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f872 	bl	800323a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003156:	bf00      	nop
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800327c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003282:	4a04      	ldr	r2, [pc, #16]	; (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	60d3      	str	r3, [r2, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4907      	ldr	r1, [pc, #28]	; (80032ec <__NVIC_EnableIRQ+0x38>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000e100 	.word	0xe000e100

080032f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db0a      	blt.n	800331a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <__NVIC_SetPriority+0x4c>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	440b      	add	r3, r1
 8003314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003318:	e00a      	b.n	8003330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4908      	ldr	r1, [pc, #32]	; (8003340 <__NVIC_SetPriority+0x50>)
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	3b04      	subs	r3, #4
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	440b      	add	r3, r1
 800332e:	761a      	strb	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000e100 	.word	0xe000e100
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf28      	it	cs
 8003362:	2304      	movcs	r3, #4
 8003364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3304      	adds	r3, #4
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <NVIC_EncodePriority+0x30>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3b03      	subs	r3, #3
 8003372:	e000      	b.n	8003376 <NVIC_EncodePriority+0x32>
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	401a      	ands	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800338c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43d9      	mvns	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	4313      	orrs	r3, r2
         );
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ff4c 	bl	8003250 <__NVIC_SetPriorityGrouping>
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d2:	f7ff ff61 	bl	8003298 <__NVIC_GetPriorityGrouping>
 80033d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	6978      	ldr	r0, [r7, #20]
 80033de:	f7ff ffb1 	bl	8003344 <NVIC_EncodePriority>
 80033e2:	4602      	mov	r2, r0
 80033e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e8:	4611      	mov	r1, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ff80 	bl	80032f0 <__NVIC_SetPriority>
}
 80033f0:	bf00      	nop
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ff54 	bl	80032b4 <__NVIC_EnableIRQ>
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	e177      	b.n	8003720 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003430:	2201      	movs	r2, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	429a      	cmp	r2, r3
 800344a:	f040 8166 	bne.w	800371a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d005      	beq.n	8003466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003462:	2b02      	cmp	r3, #2
 8003464:	d130      	bne.n	80034c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2203      	movs	r2, #3
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800349c:	2201      	movs	r2, #1
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 0201 	and.w	r2, r3, #1
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d017      	beq.n	8003504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d123      	bne.n	8003558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	08da      	lsrs	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	69b9      	ldr	r1, [r7, #24]
 8003554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0203 	and.w	r2, r3, #3
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80c0 	beq.w	800371a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_GPIO_Init+0x324>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a65      	ldr	r2, [pc, #404]	; (8003738 <HAL_GPIO_Init+0x324>)
 80035a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44
 80035aa:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_GPIO_Init+0x324>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035b6:	4a61      	ldr	r2, [pc, #388]	; (800373c <HAL_GPIO_Init+0x328>)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	3302      	adds	r3, #2
 80035be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	220f      	movs	r2, #15
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a58      	ldr	r2, [pc, #352]	; (8003740 <HAL_GPIO_Init+0x32c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d037      	beq.n	8003652 <HAL_GPIO_Init+0x23e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a57      	ldr	r2, [pc, #348]	; (8003744 <HAL_GPIO_Init+0x330>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d031      	beq.n	800364e <HAL_GPIO_Init+0x23a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a56      	ldr	r2, [pc, #344]	; (8003748 <HAL_GPIO_Init+0x334>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d02b      	beq.n	800364a <HAL_GPIO_Init+0x236>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a55      	ldr	r2, [pc, #340]	; (800374c <HAL_GPIO_Init+0x338>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d025      	beq.n	8003646 <HAL_GPIO_Init+0x232>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a54      	ldr	r2, [pc, #336]	; (8003750 <HAL_GPIO_Init+0x33c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01f      	beq.n	8003642 <HAL_GPIO_Init+0x22e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a53      	ldr	r2, [pc, #332]	; (8003754 <HAL_GPIO_Init+0x340>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d019      	beq.n	800363e <HAL_GPIO_Init+0x22a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a52      	ldr	r2, [pc, #328]	; (8003758 <HAL_GPIO_Init+0x344>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_GPIO_Init+0x226>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a51      	ldr	r2, [pc, #324]	; (800375c <HAL_GPIO_Init+0x348>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00d      	beq.n	8003636 <HAL_GPIO_Init+0x222>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a50      	ldr	r2, [pc, #320]	; (8003760 <HAL_GPIO_Init+0x34c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <HAL_GPIO_Init+0x21e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4f      	ldr	r2, [pc, #316]	; (8003764 <HAL_GPIO_Init+0x350>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_GPIO_Init+0x21a>
 800362a:	2309      	movs	r3, #9
 800362c:	e012      	b.n	8003654 <HAL_GPIO_Init+0x240>
 800362e:	230a      	movs	r3, #10
 8003630:	e010      	b.n	8003654 <HAL_GPIO_Init+0x240>
 8003632:	2308      	movs	r3, #8
 8003634:	e00e      	b.n	8003654 <HAL_GPIO_Init+0x240>
 8003636:	2307      	movs	r3, #7
 8003638:	e00c      	b.n	8003654 <HAL_GPIO_Init+0x240>
 800363a:	2306      	movs	r3, #6
 800363c:	e00a      	b.n	8003654 <HAL_GPIO_Init+0x240>
 800363e:	2305      	movs	r3, #5
 8003640:	e008      	b.n	8003654 <HAL_GPIO_Init+0x240>
 8003642:	2304      	movs	r3, #4
 8003644:	e006      	b.n	8003654 <HAL_GPIO_Init+0x240>
 8003646:	2303      	movs	r3, #3
 8003648:	e004      	b.n	8003654 <HAL_GPIO_Init+0x240>
 800364a:	2302      	movs	r3, #2
 800364c:	e002      	b.n	8003654 <HAL_GPIO_Init+0x240>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_GPIO_Init+0x240>
 8003652:	2300      	movs	r3, #0
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	f002 0203 	and.w	r2, r2, #3
 800365a:	0092      	lsls	r2, r2, #2
 800365c:	4093      	lsls	r3, r2
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003664:	4935      	ldr	r1, [pc, #212]	; (800373c <HAL_GPIO_Init+0x328>)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	089b      	lsrs	r3, r3, #2
 800366a:	3302      	adds	r3, #2
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003672:	4b3d      	ldr	r3, [pc, #244]	; (8003768 <HAL_GPIO_Init+0x354>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003696:	4a34      	ldr	r2, [pc, #208]	; (8003768 <HAL_GPIO_Init+0x354>)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800369c:	4b32      	ldr	r3, [pc, #200]	; (8003768 <HAL_GPIO_Init+0x354>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036c0:	4a29      	ldr	r2, [pc, #164]	; (8003768 <HAL_GPIO_Init+0x354>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036c6:	4b28      	ldr	r3, [pc, #160]	; (8003768 <HAL_GPIO_Init+0x354>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ea:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_GPIO_Init+0x354>)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_GPIO_Init+0x354>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003714:	4a14      	ldr	r2, [pc, #80]	; (8003768 <HAL_GPIO_Init+0x354>)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3301      	adds	r3, #1
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	2b0f      	cmp	r3, #15
 8003724:	f67f ae84 	bls.w	8003430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	40013800 	.word	0x40013800
 8003740:	40020000 	.word	0x40020000
 8003744:	40020400 	.word	0x40020400
 8003748:	40020800 	.word	0x40020800
 800374c:	40020c00 	.word	0x40020c00
 8003750:	40021000 	.word	0x40021000
 8003754:	40021400 	.word	0x40021400
 8003758:	40021800 	.word	0x40021800
 800375c:	40021c00 	.word	0x40021c00
 8003760:	40022000 	.word	0x40022000
 8003764:	40022400 	.word	0x40022400
 8003768:	40013c00 	.word	0x40013c00

0800376c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
 8003778:	4613      	mov	r3, r2
 800377a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800377c:	787b      	ldrb	r3, [r7, #1]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003788:	e003      	b.n	8003792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	041a      	lsls	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	619a      	str	r2, [r3, #24]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e264      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d075      	beq.n	80038aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037be:	4ba3      	ldr	r3, [pc, #652]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d00c      	beq.n	80037e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ca:	4ba0      	ldr	r3, [pc, #640]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d112      	bne.n	80037fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d6:	4b9d      	ldr	r3, [pc, #628]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e2:	d10b      	bne.n	80037fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	4b99      	ldr	r3, [pc, #612]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05b      	beq.n	80038a8 <HAL_RCC_OscConfig+0x108>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d157      	bne.n	80038a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e23f      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003804:	d106      	bne.n	8003814 <HAL_RCC_OscConfig+0x74>
 8003806:	4b91      	ldr	r3, [pc, #580]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a90      	ldr	r2, [pc, #576]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e01d      	b.n	8003850 <HAL_RCC_OscConfig+0xb0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x98>
 800381e:	4b8b      	ldr	r3, [pc, #556]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a8a      	ldr	r2, [pc, #552]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b88      	ldr	r3, [pc, #544]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a87      	ldr	r2, [pc, #540]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0xb0>
 8003838:	4b84      	ldr	r3, [pc, #528]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a83      	ldr	r2, [pc, #524]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 800383e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b81      	ldr	r3, [pc, #516]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a80      	ldr	r2, [pc, #512]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 800384a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe ff42 	bl	80026e0 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003860:	f7fe ff3e 	bl	80026e0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e204      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0xc0>
 800387e:	e014      	b.n	80038aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe ff2e 	bl	80026e0 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003888:	f7fe ff2a 	bl	80026e0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e1f0      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389a:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0xe8>
 80038a6:	e000      	b.n	80038aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d063      	beq.n	800397e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b6:	4b65      	ldr	r3, [pc, #404]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c2:	4b62      	ldr	r3, [pc, #392]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d11c      	bne.n	8003908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ce:	4b5f      	ldr	r3, [pc, #380]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d116      	bne.n	8003908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	4b5c      	ldr	r3, [pc, #368]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_RCC_OscConfig+0x152>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d001      	beq.n	80038f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e1c4      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f2:	4b56      	ldr	r3, [pc, #344]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4952      	ldr	r1, [pc, #328]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	e03a      	b.n	800397e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d020      	beq.n	8003952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003910:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <HAL_RCC_OscConfig+0x2b0>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003916:	f7fe fee3 	bl	80026e0 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800391e:	f7fe fedf 	bl	80026e0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e1a5      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003930:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393c:	4b43      	ldr	r3, [pc, #268]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4940      	ldr	r1, [pc, #256]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
 8003950:	e015      	b.n	800397e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003952:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <HAL_RCC_OscConfig+0x2b0>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fe fec2 	bl	80026e0 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003960:	f7fe febe 	bl	80026e0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e184      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d030      	beq.n	80039ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d016      	beq.n	80039c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003992:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <HAL_RCC_OscConfig+0x2b4>)
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fe fea2 	bl	80026e0 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a0:	f7fe fe9e 	bl	80026e0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e164      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b2:	4b26      	ldr	r3, [pc, #152]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x200>
 80039be:	e015      	b.n	80039ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_RCC_OscConfig+0x2b4>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c6:	f7fe fe8b 	bl	80026e0 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ce:	f7fe fe87 	bl	80026e0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e14d      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 80039e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a0 	beq.w	8003b3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_OscConfig+0x2b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d121      	bne.n	8003a7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_RCC_OscConfig+0x2b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <HAL_RCC_OscConfig+0x2b8>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7fe fe4d 	bl	80026e0 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	e011      	b.n	8003a6e <HAL_RCC_OscConfig+0x2ce>
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	42470000 	.word	0x42470000
 8003a54:	42470e80 	.word	0x42470e80
 8003a58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5c:	f7fe fe40 	bl	80026e0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e106      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	4b85      	ldr	r3, [pc, #532]	; (8003c84 <HAL_RCC_OscConfig+0x4e4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d106      	bne.n	8003a90 <HAL_RCC_OscConfig+0x2f0>
 8003a82:	4b81      	ldr	r3, [pc, #516]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a80      	ldr	r2, [pc, #512]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8e:	e01c      	b.n	8003aca <HAL_RCC_OscConfig+0x32a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d10c      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x312>
 8003a98:	4b7b      	ldr	r3, [pc, #492]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a7a      	ldr	r2, [pc, #488]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003a9e:	f043 0304 	orr.w	r3, r3, #4
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa4:	4b78      	ldr	r3, [pc, #480]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	4a77      	ldr	r2, [pc, #476]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab0:	e00b      	b.n	8003aca <HAL_RCC_OscConfig+0x32a>
 8003ab2:	4b75      	ldr	r3, [pc, #468]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	4a74      	ldr	r2, [pc, #464]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	6713      	str	r3, [r2, #112]	; 0x70
 8003abe:	4b72      	ldr	r3, [pc, #456]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	4a71      	ldr	r2, [pc, #452]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003ac4:	f023 0304 	bic.w	r3, r3, #4
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d015      	beq.n	8003afe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fe fe05 	bl	80026e0 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fe fe01 	bl	80026e0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0c5      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	4b65      	ldr	r3, [pc, #404]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ee      	beq.n	8003ada <HAL_RCC_OscConfig+0x33a>
 8003afc:	e014      	b.n	8003b28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afe:	f7fe fdef 	bl	80026e0 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fe fdeb 	bl	80026e0 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e0af      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1c:	4b5a      	ldr	r3, [pc, #360]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ee      	bne.n	8003b06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2e:	4b56      	ldr	r3, [pc, #344]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a55      	ldr	r2, [pc, #340]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 809b 	beq.w	8003c7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b44:	4b50      	ldr	r3, [pc, #320]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d05c      	beq.n	8003c0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d141      	bne.n	8003bdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b58:	4b4c      	ldr	r3, [pc, #304]	; (8003c8c <HAL_RCC_OscConfig+0x4ec>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5e:	f7fe fdbf 	bl	80026e0 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b66:	f7fe fdbb 	bl	80026e0 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e081      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b78:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	019b      	lsls	r3, r3, #6
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	061b      	lsls	r3, r3, #24
 8003ba8:	4937      	ldr	r1, [pc, #220]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bae:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <HAL_RCC_OscConfig+0x4ec>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fd94 	bl	80026e0 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe fd90 	bl	80026e0 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e056      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bce:	4b2e      	ldr	r3, [pc, #184]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x41c>
 8003bda:	e04e      	b.n	8003c7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_RCC_OscConfig+0x4ec>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be2:	f7fe fd7d 	bl	80026e0 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bea:	f7fe fd79 	bl	80026e0 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e03f      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfc:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f0      	bne.n	8003bea <HAL_RCC_OscConfig+0x44a>
 8003c08:	e037      	b.n	8003c7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e032      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c16:	4b1c      	ldr	r3, [pc, #112]	; (8003c88 <HAL_RCC_OscConfig+0x4e8>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d028      	beq.n	8003c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d121      	bne.n	8003c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d11a      	bne.n	8003c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c46:	4013      	ands	r3, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d111      	bne.n	8003c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40007000 	.word	0x40007000
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	42470060 	.word	0x42470060

08003c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0cc      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b68      	ldr	r3, [pc, #416]	; (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d90c      	bls.n	8003ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b65      	ldr	r3, [pc, #404]	; (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b63      	ldr	r3, [pc, #396]	; (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0b8      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d020      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce4:	4b59      	ldr	r3, [pc, #356]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a58      	ldr	r2, [pc, #352]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cfc:	4b53      	ldr	r3, [pc, #332]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4a52      	ldr	r2, [pc, #328]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d08:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	494d      	ldr	r1, [pc, #308]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d044      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d119      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e07f      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d003      	beq.n	8003d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4e:	4b3f      	ldr	r3, [pc, #252]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06f      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5e:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e067      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d6e:	4b37      	ldr	r3, [pc, #220]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f023 0203 	bic.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4934      	ldr	r1, [pc, #208]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d80:	f7fe fcae 	bl	80026e0 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d88:	f7fe fcaa 	bl	80026e0 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e04f      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	4b2b      	ldr	r3, [pc, #172]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 020c 	and.w	r2, r3, #12
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d1eb      	bne.n	8003d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db0:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d20c      	bcs.n	8003dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e032      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4916      	ldr	r1, [pc, #88]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e02:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	490e      	ldr	r1, [pc, #56]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e16:	f000 f821 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	490a      	ldr	r1, [pc, #40]	; (8003e50 <HAL_RCC_ClockConfig+0x1c0>)
 8003e28:	5ccb      	ldrb	r3, [r1, r3]
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_ClockConfig+0x1c8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fab8 	bl	80023ac <HAL_InitTick>

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023c00 	.word	0x40023c00
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	0800a77c 	.word	0x0800a77c
 8003e54:	20000020 	.word	0x20000020
 8003e58:	20000024 	.word	0x20000024

08003e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e74:	4b67      	ldr	r3, [pc, #412]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d00d      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x40>
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	f200 80bd 	bhi.w	8004000 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x34>
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e8e:	e0b7      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e90:	4b61      	ldr	r3, [pc, #388]	; (8004018 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e92:	60bb      	str	r3, [r7, #8]
       break;
 8003e94:	e0b7      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e96:	4b61      	ldr	r3, [pc, #388]	; (800401c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003e98:	60bb      	str	r3, [r7, #8]
      break;
 8003e9a:	e0b4      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e9c:	4b5d      	ldr	r3, [pc, #372]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ea6:	4b5b      	ldr	r3, [pc, #364]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d04d      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb2:	4b58      	ldr	r3, [pc, #352]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ec2:	f04f 0100 	mov.w	r1, #0
 8003ec6:	ea02 0800 	and.w	r8, r2, r0
 8003eca:	ea03 0901 	and.w	r9, r3, r1
 8003ece:	4640      	mov	r0, r8
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	014b      	lsls	r3, r1, #5
 8003edc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ee0:	0142      	lsls	r2, r0, #5
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	ebb0 0008 	subs.w	r0, r0, r8
 8003eea:	eb61 0109 	sbc.w	r1, r1, r9
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	018b      	lsls	r3, r1, #6
 8003ef8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003efc:	0182      	lsls	r2, r0, #6
 8003efe:	1a12      	subs	r2, r2, r0
 8003f00:	eb63 0301 	sbc.w	r3, r3, r1
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	00d9      	lsls	r1, r3, #3
 8003f0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f12:	00d0      	lsls	r0, r2, #3
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	eb12 0208 	adds.w	r2, r2, r8
 8003f1c:	eb43 0309 	adc.w	r3, r3, r9
 8003f20:	f04f 0000 	mov.w	r0, #0
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	0259      	lsls	r1, r3, #9
 8003f2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f2e:	0250      	lsls	r0, r2, #9
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	f7fc fe62 	bl	8000c08 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4613      	mov	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e04a      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4e:	4b31      	ldr	r3, [pc, #196]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	099b      	lsrs	r3, r3, #6
 8003f54:	461a      	mov	r2, r3
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	ea02 0400 	and.w	r4, r2, r0
 8003f66:	ea03 0501 	and.w	r5, r3, r1
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	014b      	lsls	r3, r1, #5
 8003f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f7c:	0142      	lsls	r2, r0, #5
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	1b00      	subs	r0, r0, r4
 8003f84:	eb61 0105 	sbc.w	r1, r1, r5
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	018b      	lsls	r3, r1, #6
 8003f92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f96:	0182      	lsls	r2, r0, #6
 8003f98:	1a12      	subs	r2, r2, r0
 8003f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9e:	f04f 0000 	mov.w	r0, #0
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	00d9      	lsls	r1, r3, #3
 8003fa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fac:	00d0      	lsls	r0, r2, #3
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	1912      	adds	r2, r2, r4
 8003fb4:	eb45 0303 	adc.w	r3, r5, r3
 8003fb8:	f04f 0000 	mov.w	r0, #0
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	0299      	lsls	r1, r3, #10
 8003fc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fc6:	0290      	lsls	r0, r2, #10
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	f7fc fe16 	bl	8000c08 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	60bb      	str	r3, [r7, #8]
      break;
 8003ffe:	e002      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004002:	60bb      	str	r3, [r7, #8]
      break;
 8004004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004006:	68bb      	ldr	r3, [r7, #8]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800
 8004018:	00f42400 	.word	0x00f42400
 800401c:	007a1200 	.word	0x007a1200

08004020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <HAL_RCC_GetHCLKFreq+0x14>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000020 	.word	0x20000020

08004038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800403c:	f7ff fff0 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0a9b      	lsrs	r3, r3, #10
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4903      	ldr	r1, [pc, #12]	; (800405c <HAL_RCC_GetPCLK1Freq+0x24>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	0800a78c 	.word	0x0800a78c

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004064:	f7ff ffdc 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0b5b      	lsrs	r3, r3, #13
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4903      	ldr	r1, [pc, #12]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	0800a78c 	.word	0x0800a78c

08004088 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	220f      	movs	r2, #15
 8004096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004098:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <HAL_RCC_GetClockConfig+0x5c>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0203 	and.w	r2, r3, #3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040a4:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <HAL_RCC_GetClockConfig+0x5c>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <HAL_RCC_GetClockConfig+0x5c>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040bc:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <HAL_RCC_GetClockConfig+0x5c>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	08db      	lsrs	r3, r3, #3
 80040c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <HAL_RCC_GetClockConfig+0x60>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 020f 	and.w	r2, r3, #15
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	601a      	str	r2, [r3, #0]
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40023c00 	.word	0x40023c00

080040ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e07b      	b.n	80041f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d108      	bne.n	8004118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800410e:	d009      	beq.n	8004124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	61da      	str	r2, [r3, #28]
 8004116:	e005      	b.n	8004124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd ffbe 	bl	80020c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a8:	ea42 0103 	orr.w	r1, r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0104 	and.w	r1, r3, #4
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0210 	and.w	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b088      	sub	sp, #32
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	4613      	mov	r3, r2
 800420c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_SPI_Transmit+0x22>
 800421c:	2302      	movs	r3, #2
 800421e:	e126      	b.n	800446e <HAL_SPI_Transmit+0x270>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004228:	f7fe fa5a 	bl	80026e0 <HAL_GetTick>
 800422c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d002      	beq.n	8004244 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800423e:	2302      	movs	r3, #2
 8004240:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004242:	e10b      	b.n	800445c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_SPI_Transmit+0x52>
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004254:	e102      	b.n	800445c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2203      	movs	r2, #3
 800425a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429c:	d10f      	bne.n	80042be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d007      	beq.n	80042dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e4:	d14b      	bne.n	800437e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_SPI_Transmit+0xf6>
 80042ee:	8afb      	ldrh	r3, [r7, #22]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d13e      	bne.n	8004372 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	881a      	ldrh	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	1c9a      	adds	r2, r3, #2
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004318:	e02b      	b.n	8004372 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d112      	bne.n	800434e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	881a      	ldrh	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	1c9a      	adds	r2, r3, #2
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	86da      	strh	r2, [r3, #54]	; 0x36
 800434c:	e011      	b.n	8004372 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800434e:	f7fe f9c7 	bl	80026e0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d803      	bhi.n	8004366 <HAL_SPI_Transmit+0x168>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004364:	d102      	bne.n	800436c <HAL_SPI_Transmit+0x16e>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004370:	e074      	b.n	800445c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ce      	bne.n	800431a <HAL_SPI_Transmit+0x11c>
 800437c:	e04c      	b.n	8004418 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_SPI_Transmit+0x18e>
 8004386:	8afb      	ldrh	r3, [r7, #22]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d140      	bne.n	800440e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	330c      	adds	r3, #12
 8004396:	7812      	ldrb	r2, [r2, #0]
 8004398:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043b2:	e02c      	b.n	800440e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d113      	bne.n	80043ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80043e8:	e011      	b.n	800440e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ea:	f7fe f979 	bl	80026e0 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d803      	bhi.n	8004402 <HAL_SPI_Transmit+0x204>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004400:	d102      	bne.n	8004408 <HAL_SPI_Transmit+0x20a>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800440c:	e026      	b.n	800445c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1cd      	bne.n	80043b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fbcb 	bl	8004bb8 <SPI_EndRxTxTransaction>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	e000      	b.n	800445c <HAL_SPI_Transmit+0x25e>
  }

error:
 800445a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800446c:	7ffb      	ldrb	r3, [r7, #31]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b088      	sub	sp, #32
 800447a:	af02      	add	r7, sp, #8
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004492:	d112      	bne.n	80044ba <HAL_SPI_Receive+0x44>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10e      	bne.n	80044ba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2204      	movs	r2, #4
 80044a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044a4:	88fa      	ldrh	r2, [r7, #6]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f8f1 	bl	8004698 <HAL_SPI_TransmitReceive>
 80044b6:	4603      	mov	r3, r0
 80044b8:	e0ea      	b.n	8004690 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_SPI_Receive+0x52>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e0e3      	b.n	8004690 <HAL_SPI_Receive+0x21a>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044d0:	f7fe f906 	bl	80026e0 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d002      	beq.n	80044e8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
 80044e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044e6:	e0ca      	b.n	800467e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_SPI_Receive+0x7e>
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044f8:	e0c1      	b.n	800467e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2204      	movs	r2, #4
 80044fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	88fa      	ldrh	r2, [r7, #6]
 8004518:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004540:	d10f      	bne.n	8004562 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004560:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d007      	beq.n	8004580 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800457e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d162      	bne.n	800464e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004588:	e02e      	b.n	80045e8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d115      	bne.n	80045c4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f103 020c 	add.w	r2, r3, #12
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045c2:	e011      	b.n	80045e8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c4:	f7fe f88c 	bl	80026e0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d803      	bhi.n	80045dc <HAL_SPI_Receive+0x166>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045da:	d102      	bne.n	80045e2 <HAL_SPI_Receive+0x16c>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045e6:	e04a      	b.n	800467e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1cb      	bne.n	800458a <HAL_SPI_Receive+0x114>
 80045f2:	e031      	b.n	8004658 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d113      	bne.n	800462a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	b292      	uxth	r2, r2
 800460e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	1c9a      	adds	r2, r3, #2
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004628:	e011      	b.n	800464e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800462a:	f7fe f859 	bl	80026e0 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d803      	bhi.n	8004642 <HAL_SPI_Receive+0x1cc>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004640:	d102      	bne.n	8004648 <HAL_SPI_Receive+0x1d2>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800464c:	e017      	b.n	800467e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1cd      	bne.n	80045f4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	6839      	ldr	r1, [r7, #0]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fa45 	bl	8004aec <SPI_EndRxTransaction>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
 800467a:	e000      	b.n	800467e <HAL_SPI_Receive+0x208>
  }

error :
 800467c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800468e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08c      	sub	sp, #48	; 0x30
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046a6:	2301      	movs	r3, #1
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_SPI_TransmitReceive+0x26>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e18a      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x33c>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046c6:	f7fe f80b 	bl	80026e0 <HAL_GetTick>
 80046ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046dc:	887b      	ldrh	r3, [r7, #2]
 80046de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d00f      	beq.n	8004708 <HAL_SPI_TransmitReceive+0x70>
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ee:	d107      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x68>
 80046f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d003      	beq.n	8004708 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004700:	2302      	movs	r3, #2
 8004702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004706:	e15b      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_SPI_TransmitReceive+0x82>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_TransmitReceive+0x82>
 8004714:	887b      	ldrh	r3, [r7, #2]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004720:	e14e      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b04      	cmp	r3, #4
 800472c:	d003      	beq.n	8004736 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2205      	movs	r2, #5
 8004732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	887a      	ldrh	r2, [r7, #2]
 8004746:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	887a      	ldrh	r2, [r7, #2]
 800474c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	887a      	ldrh	r2, [r7, #2]
 8004758:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	887a      	ldrh	r2, [r7, #2]
 800475e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d007      	beq.n	800478a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004792:	d178      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_SPI_TransmitReceive+0x10a>
 800479c:	8b7b      	ldrh	r3, [r7, #26]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d166      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	881a      	ldrh	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	1c9a      	adds	r2, r3, #2
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c6:	e053      	b.n	8004870 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d11b      	bne.n	800480e <HAL_SPI_TransmitReceive+0x176>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d016      	beq.n	800480e <HAL_SPI_TransmitReceive+0x176>
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d113      	bne.n	800480e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	881a      	ldrh	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	1c9a      	adds	r2, r3, #2
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d119      	bne.n	8004850 <HAL_SPI_TransmitReceive+0x1b8>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d014      	beq.n	8004850 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	b292      	uxth	r2, r2
 8004832:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	1c9a      	adds	r2, r3, #2
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800484c:	2301      	movs	r3, #1
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004850:	f7fd ff46 	bl	80026e0 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800485c:	429a      	cmp	r2, r3
 800485e:	d807      	bhi.n	8004870 <HAL_SPI_TransmitReceive+0x1d8>
 8004860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004866:	d003      	beq.n	8004870 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800486e:	e0a7      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1a6      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x130>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1a1      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x130>
 8004884:	e07c      	b.n	8004980 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_SPI_TransmitReceive+0x1fc>
 800488e:	8b7b      	ldrh	r3, [r7, #26]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d16b      	bne.n	800496c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	7812      	ldrb	r2, [r2, #0]
 80048a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ba:	e057      	b.n	800496c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d11c      	bne.n	8004904 <HAL_SPI_TransmitReceive+0x26c>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d017      	beq.n	8004904 <HAL_SPI_TransmitReceive+0x26c>
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d114      	bne.n	8004904 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	7812      	ldrb	r2, [r2, #0]
 80048e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d119      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x2ae>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d014      	beq.n	8004946 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004942:	2301      	movs	r3, #1
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004946:	f7fd fecb 	bl	80026e0 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004952:	429a      	cmp	r2, r3
 8004954:	d803      	bhi.n	800495e <HAL_SPI_TransmitReceive+0x2c6>
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800495c:	d102      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x2cc>
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800496a:	e029      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1a2      	bne.n	80048bc <HAL_SPI_TransmitReceive+0x224>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d19d      	bne.n	80048bc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f917 	bl	8004bb8 <SPI_EndRxTxTransaction>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d006      	beq.n	800499e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800499c:	e010      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	e000      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80049be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049ec:	f7fd fe78 	bl	80026e0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	4413      	add	r3, r2
 80049fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049fc:	f7fd fe70 	bl	80026e0 <HAL_GetTick>
 8004a00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a02:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	015b      	lsls	r3, r3, #5
 8004a08:	0d1b      	lsrs	r3, r3, #20
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a12:	e054      	b.n	8004abe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a1a:	d050      	beq.n	8004abe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a1c:	f7fd fe60 	bl	80026e0 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d902      	bls.n	8004a32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d13d      	bne.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a4a:	d111      	bne.n	8004a70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a54:	d004      	beq.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5e:	d107      	bne.n	8004a70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a78:	d10f      	bne.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e017      	b.n	8004ade <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d19b      	bne.n	8004a14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000020 	.word	0x20000020

08004aec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b00:	d111      	bne.n	8004b26 <SPI_EndRxTransaction+0x3a>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b0a:	d004      	beq.n	8004b16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b14:	d107      	bne.n	8004b26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2e:	d12a      	bne.n	8004b86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b38:	d012      	beq.n	8004b60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2200      	movs	r2, #0
 8004b42:	2180      	movs	r1, #128	; 0x80
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff ff49 	bl	80049dc <SPI_WaitFlagStateUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d02d      	beq.n	8004bac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e026      	b.n	8004bae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2200      	movs	r2, #0
 8004b68:	2101      	movs	r1, #1
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff ff36 	bl	80049dc <SPI_WaitFlagStateUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01a      	beq.n	8004bac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e013      	b.n	8004bae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2101      	movs	r1, #1
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7ff ff23 	bl	80049dc <SPI_WaitFlagStateUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e000      	b.n	8004bae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <SPI_EndRxTxTransaction+0x7c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1b      	ldr	r2, [pc, #108]	; (8004c38 <SPI_EndRxTxTransaction+0x80>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	0d5b      	lsrs	r3, r3, #21
 8004bd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bd4:	fb02 f303 	mul.w	r3, r2, r3
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be2:	d112      	bne.n	8004c0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2200      	movs	r2, #0
 8004bec:	2180      	movs	r1, #128	; 0x80
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff fef4 	bl	80049dc <SPI_WaitFlagStateUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d016      	beq.n	8004c28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	f043 0220 	orr.w	r2, r3, #32
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e00f      	b.n	8004c2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b80      	cmp	r3, #128	; 0x80
 8004c22:	d0f2      	beq.n	8004c0a <SPI_EndRxTxTransaction+0x52>
 8004c24:	e000      	b.n	8004c28 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c26:	bf00      	nop
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000020 	.word	0x20000020
 8004c38:	165e9f81 	.word	0x165e9f81

08004c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e041      	b.n	8004cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fd fac8 	bl	80021f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f000 fc7a 	bl	8005574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d001      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e04e      	b.n	8004d92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a23      	ldr	r2, [pc, #140]	; (8004da0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d022      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1e:	d01d      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1f      	ldr	r2, [pc, #124]	; (8004da4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d018      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_TIM_Base_Start_IT+0xd0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00e      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1b      	ldr	r2, [pc, #108]	; (8004db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d009      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d111      	bne.n	8004d80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b06      	cmp	r3, #6
 8004d6c:	d010      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	e007      	b.n	8004d90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800
 8004dac:	40000c00 	.word	0x40000c00
 8004db0:	40010400 	.word	0x40010400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40001800 	.word	0x40001800

08004dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e041      	b.n	8004e52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f839 	bl	8004e5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f000 fbba 	bl	8005574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <HAL_TIM_PWM_Start+0x24>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	bf14      	ite	ne
 8004e8c:	2301      	movne	r3, #1
 8004e8e:	2300      	moveq	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	e022      	b.n	8004eda <HAL_TIM_PWM_Start+0x6a>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d109      	bne.n	8004eae <HAL_TIM_PWM_Start+0x3e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	bf14      	ite	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	2300      	moveq	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	e015      	b.n	8004eda <HAL_TIM_PWM_Start+0x6a>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d109      	bne.n	8004ec8 <HAL_TIM_PWM_Start+0x58>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	e008      	b.n	8004eda <HAL_TIM_PWM_Start+0x6a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e07c      	b.n	8004fdc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0x82>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef0:	e013      	b.n	8004f1a <HAL_TIM_PWM_Start+0xaa>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_PWM_Start+0x92>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f00:	e00b      	b.n	8004f1a <HAL_TIM_PWM_Start+0xaa>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_PWM_Start+0xa2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f10:	e003      	b.n	8004f1a <HAL_TIM_PWM_Start+0xaa>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fe10 	bl	8005b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2d      	ldr	r2, [pc, #180]	; (8004fe4 <HAL_TIM_PWM_Start+0x174>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_TIM_PWM_Start+0xcc>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2c      	ldr	r2, [pc, #176]	; (8004fe8 <HAL_TIM_PWM_Start+0x178>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d101      	bne.n	8004f40 <HAL_TIM_PWM_Start+0xd0>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_TIM_PWM_Start+0xd2>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <HAL_TIM_PWM_Start+0x174>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d022      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x136>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d01d      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x136>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_TIM_PWM_Start+0x17c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d018      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x136>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <HAL_TIM_PWM_Start+0x180>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x136>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <HAL_TIM_PWM_Start+0x184>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00e      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x136>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a16      	ldr	r2, [pc, #88]	; (8004fe8 <HAL_TIM_PWM_Start+0x178>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x136>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_TIM_PWM_Start+0x188>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x136>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <HAL_TIM_PWM_Start+0x18c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d111      	bne.n	8004fca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b06      	cmp	r3, #6
 8004fb6:	d010      	beq.n	8004fda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc8:	e007      	b.n	8004fda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	40010400 	.word	0x40010400
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40001800 	.word	0x40001800

08005000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b02      	cmp	r3, #2
 8005014:	d122      	bne.n	800505c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d11b      	bne.n	800505c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0202 	mvn.w	r2, #2
 800502c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa77 	bl	8005536 <HAL_TIM_IC_CaptureCallback>
 8005048:	e005      	b.n	8005056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa69 	bl	8005522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa7a 	bl	800554a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b04      	cmp	r3, #4
 8005068:	d122      	bne.n	80050b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b04      	cmp	r3, #4
 8005076:	d11b      	bne.n	80050b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0204 	mvn.w	r2, #4
 8005080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fa4d 	bl	8005536 <HAL_TIM_IC_CaptureCallback>
 800509c:	e005      	b.n	80050aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa3f 	bl	8005522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fa50 	bl	800554a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d122      	bne.n	8005104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d11b      	bne.n	8005104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0208 	mvn.w	r2, #8
 80050d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2204      	movs	r2, #4
 80050da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fa23 	bl	8005536 <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fa15 	bl	8005522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fa26 	bl	800554a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b10      	cmp	r3, #16
 8005110:	d122      	bne.n	8005158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b10      	cmp	r3, #16
 800511e:	d11b      	bne.n	8005158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0210 	mvn.w	r2, #16
 8005128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2208      	movs	r2, #8
 800512e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f9f9 	bl	8005536 <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f9eb 	bl	8005522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f9fc 	bl	800554a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10e      	bne.n	8005184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d107      	bne.n	8005184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0201 	mvn.w	r2, #1
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc ff0a 	bl	8001f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518e:	2b80      	cmp	r3, #128	; 0x80
 8005190:	d10e      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519c:	2b80      	cmp	r3, #128	; 0x80
 800519e:	d107      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fdca 	bl	8005d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d10e      	bne.n	80051dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b40      	cmp	r3, #64	; 0x40
 80051ca:	d107      	bne.n	80051dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f9c1 	bl	800555e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d10e      	bne.n	8005208 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d107      	bne.n	8005208 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0220 	mvn.w	r2, #32
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fd94 	bl	8005d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800522a:	2302      	movs	r3, #2
 800522c:	e0ae      	b.n	800538c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b0c      	cmp	r3, #12
 800523a:	f200 809f 	bhi.w	800537c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800523e:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005279 	.word	0x08005279
 8005248:	0800537d 	.word	0x0800537d
 800524c:	0800537d 	.word	0x0800537d
 8005250:	0800537d 	.word	0x0800537d
 8005254:	080052b9 	.word	0x080052b9
 8005258:	0800537d 	.word	0x0800537d
 800525c:	0800537d 	.word	0x0800537d
 8005260:	0800537d 	.word	0x0800537d
 8005264:	080052fb 	.word	0x080052fb
 8005268:	0800537d 	.word	0x0800537d
 800526c:	0800537d 	.word	0x0800537d
 8005270:	0800537d 	.word	0x0800537d
 8005274:	0800533b 	.word	0x0800533b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fa18 	bl	80056b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0208 	orr.w	r2, r2, #8
 8005292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0204 	bic.w	r2, r2, #4
 80052a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6999      	ldr	r1, [r3, #24]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	619a      	str	r2, [r3, #24]
      break;
 80052b6:	e064      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fa68 	bl	8005794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6999      	ldr	r1, [r3, #24]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	619a      	str	r2, [r3, #24]
      break;
 80052f8:	e043      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fabd 	bl	8005880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0208 	orr.w	r2, r2, #8
 8005314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0204 	bic.w	r2, r2, #4
 8005324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69d9      	ldr	r1, [r3, #28]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	61da      	str	r2, [r3, #28]
      break;
 8005338:	e023      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fb11 	bl	8005968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69d9      	ldr	r1, [r3, #28]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	021a      	lsls	r2, r3, #8
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	61da      	str	r2, [r3, #28]
      break;
 800537a:	e002      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	75fb      	strb	r3, [r7, #23]
      break;
 8005380:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800538a:	7dfb      	ldrb	r3, [r7, #23]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_TIM_ConfigClockSource+0x1c>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e0b4      	b.n	800551a <HAL_TIM_ConfigClockSource+0x186>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e8:	d03e      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0xd4>
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ee:	f200 8087 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f6:	f000 8086 	beq.w	8005506 <HAL_TIM_ConfigClockSource+0x172>
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fe:	d87f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b70      	cmp	r3, #112	; 0x70
 8005402:	d01a      	beq.n	800543a <HAL_TIM_ConfigClockSource+0xa6>
 8005404:	2b70      	cmp	r3, #112	; 0x70
 8005406:	d87b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005408:	2b60      	cmp	r3, #96	; 0x60
 800540a:	d050      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x11a>
 800540c:	2b60      	cmp	r3, #96	; 0x60
 800540e:	d877      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005410:	2b50      	cmp	r3, #80	; 0x50
 8005412:	d03c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0xfa>
 8005414:	2b50      	cmp	r3, #80	; 0x50
 8005416:	d873      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d058      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x13a>
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d86f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b30      	cmp	r3, #48	; 0x30
 8005422:	d064      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005424:	2b30      	cmp	r3, #48	; 0x30
 8005426:	d86b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d060      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 800542c:	2b20      	cmp	r3, #32
 800542e:	d867      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d05c      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005434:	2b10      	cmp	r3, #16
 8005436:	d05a      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005438:	e062      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6899      	ldr	r1, [r3, #8]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f000 fb5d 	bl	8005b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800545c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	609a      	str	r2, [r3, #8]
      break;
 8005466:	e04f      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6899      	ldr	r1, [r3, #8]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f000 fb46 	bl	8005b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800548a:	609a      	str	r2, [r3, #8]
      break;
 800548c:	e03c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	461a      	mov	r2, r3
 800549c:	f000 faba 	bl	8005a14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2150      	movs	r1, #80	; 0x50
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fb13 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 80054ac:	e02c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f000 fad9 	bl	8005a72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2160      	movs	r1, #96	; 0x60
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fb03 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 80054cc:	e01c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6859      	ldr	r1, [r3, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	461a      	mov	r2, r3
 80054dc:	f000 fa9a 	bl	8005a14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2140      	movs	r1, #64	; 0x40
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 faf3 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 80054ec:	e00c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f000 faea 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 80054fe:	e003      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e000      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a40      	ldr	r2, [pc, #256]	; (8005688 <TIM_Base_SetConfig+0x114>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d013      	beq.n	80055b4 <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005592:	d00f      	beq.n	80055b4 <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a3d      	ldr	r2, [pc, #244]	; (800568c <TIM_Base_SetConfig+0x118>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00b      	beq.n	80055b4 <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3c      	ldr	r2, [pc, #240]	; (8005690 <TIM_Base_SetConfig+0x11c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3b      	ldr	r2, [pc, #236]	; (8005694 <TIM_Base_SetConfig+0x120>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d003      	beq.n	80055b4 <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3a      	ldr	r2, [pc, #232]	; (8005698 <TIM_Base_SetConfig+0x124>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d108      	bne.n	80055c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2f      	ldr	r2, [pc, #188]	; (8005688 <TIM_Base_SetConfig+0x114>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d02b      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d4:	d027      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2c      	ldr	r2, [pc, #176]	; (800568c <TIM_Base_SetConfig+0x118>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d023      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2b      	ldr	r2, [pc, #172]	; (8005690 <TIM_Base_SetConfig+0x11c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01f      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <TIM_Base_SetConfig+0x120>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01b      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a29      	ldr	r2, [pc, #164]	; (8005698 <TIM_Base_SetConfig+0x124>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d017      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a28      	ldr	r2, [pc, #160]	; (800569c <TIM_Base_SetConfig+0x128>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a27      	ldr	r2, [pc, #156]	; (80056a0 <TIM_Base_SetConfig+0x12c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00f      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a26      	ldr	r2, [pc, #152]	; (80056a4 <TIM_Base_SetConfig+0x130>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00b      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <TIM_Base_SetConfig+0x134>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d007      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a24      	ldr	r2, [pc, #144]	; (80056ac <TIM_Base_SetConfig+0x138>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a23      	ldr	r2, [pc, #140]	; (80056b0 <TIM_Base_SetConfig+0x13c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d108      	bne.n	8005638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <TIM_Base_SetConfig+0x114>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_Base_SetConfig+0xf8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a0c      	ldr	r2, [pc, #48]	; (8005698 <TIM_Base_SetConfig+0x124>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d103      	bne.n	8005674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	615a      	str	r2, [r3, #20]
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40010400 	.word	0x40010400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800
 80056a8:	40001800 	.word	0x40001800
 80056ac:	40001c00 	.word	0x40001c00
 80056b0:	40002000 	.word	0x40002000

080056b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f023 0201 	bic.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f023 0302 	bic.w	r3, r3, #2
 80056fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a20      	ldr	r2, [pc, #128]	; (800578c <TIM_OC1_SetConfig+0xd8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_OC1_SetConfig+0x64>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <TIM_OC1_SetConfig+0xdc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d10c      	bne.n	8005732 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 0308 	bic.w	r3, r3, #8
 800571e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f023 0304 	bic.w	r3, r3, #4
 8005730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a15      	ldr	r2, [pc, #84]	; (800578c <TIM_OC1_SetConfig+0xd8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_OC1_SetConfig+0x8e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <TIM_OC1_SetConfig+0xdc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d111      	bne.n	8005766 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	621a      	str	r2, [r3, #32]
}
 8005780:	bf00      	nop
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	40010000 	.word	0x40010000
 8005790:	40010400 	.word	0x40010400

08005794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0210 	bic.w	r2, r3, #16
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f023 0320 	bic.w	r3, r3, #32
 80057de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a22      	ldr	r2, [pc, #136]	; (8005878 <TIM_OC2_SetConfig+0xe4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_OC2_SetConfig+0x68>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a21      	ldr	r2, [pc, #132]	; (800587c <TIM_OC2_SetConfig+0xe8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d10d      	bne.n	8005818 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005816:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <TIM_OC2_SetConfig+0xe4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_OC2_SetConfig+0x94>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a16      	ldr	r2, [pc, #88]	; (800587c <TIM_OC2_SetConfig+0xe8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d113      	bne.n	8005850 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40010000 	.word	0x40010000
 800587c:	40010400 	.word	0x40010400

08005880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a21      	ldr	r2, [pc, #132]	; (8005960 <TIM_OC3_SetConfig+0xe0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_OC3_SetConfig+0x66>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a20      	ldr	r2, [pc, #128]	; (8005964 <TIM_OC3_SetConfig+0xe4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d10d      	bne.n	8005902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a16      	ldr	r2, [pc, #88]	; (8005960 <TIM_OC3_SetConfig+0xe0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_OC3_SetConfig+0x92>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a15      	ldr	r2, [pc, #84]	; (8005964 <TIM_OC3_SetConfig+0xe4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d113      	bne.n	800593a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	40010000 	.word	0x40010000
 8005964:	40010400 	.word	0x40010400

08005968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	031b      	lsls	r3, r3, #12
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <TIM_OC4_SetConfig+0xa4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC4_SetConfig+0x68>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a11      	ldr	r2, [pc, #68]	; (8005a10 <TIM_OC4_SetConfig+0xa8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d109      	bne.n	80059e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	019b      	lsls	r3, r3, #6
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	40010400 	.word	0x40010400

08005a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0201 	bic.w	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f023 030a 	bic.w	r3, r3, #10
 8005a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b087      	sub	sp, #28
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f023 0210 	bic.w	r2, r3, #16
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	031b      	lsls	r3, r3, #12
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f043 0307 	orr.w	r3, r3, #7
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	609a      	str	r2, [r3, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1a      	ldr	r2, [r3, #32]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1a      	ldr	r2, [r3, #32]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	431a      	orrs	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	621a      	str	r2, [r3, #32]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e05a      	b.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a21      	ldr	r2, [pc, #132]	; (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d022      	beq.n	8005c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf8:	d01d      	beq.n	8005c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d018      	beq.n	8005c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1b      	ldr	r2, [pc, #108]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00e      	beq.n	8005c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a17      	ldr	r2, [pc, #92]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d004      	beq.n	8005c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d10c      	bne.n	8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800
 8005c7c:	40000c00 	.word	0x40000c00
 8005c80:	40010400 	.word	0x40010400
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40001800 	.word	0x40001800

08005c8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e03d      	b.n	8005d24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e047      	b.n	8005dfa <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fc fa96 	bl	80022b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2224      	movs	r2, #36	; 0x24
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f931 	bl	8006004 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695a      	ldr	r2, [r3, #20]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005dc0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0208 	orr.w	r2, r2, #8
 8005dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b08a      	sub	sp, #40	; 0x28
 8005e06:	af02      	add	r7, sp, #8
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d17c      	bne.n	8005f1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_UART_Transmit+0x2c>
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e075      	b.n	8005f1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_UART_Transmit+0x3e>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e06e      	b.n	8005f1e <HAL_UART_Transmit+0x11c>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2221      	movs	r2, #33	; 0x21
 8005e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e56:	f7fc fc43 	bl	80026e0 <HAL_GetTick>
 8005e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e70:	d108      	bne.n	8005e84 <HAL_UART_Transmit+0x82>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d104      	bne.n	8005e84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	e003      	b.n	8005e8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e94:	e02a      	b.n	8005eec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2180      	movs	r1, #128	; 0x80
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f840 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e036      	b.n	8005f1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	3302      	adds	r3, #2
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	e007      	b.n	8005ede <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	781a      	ldrb	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	3301      	adds	r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1cf      	bne.n	8005e96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2140      	movs	r1, #64	; 0x40
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f810 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e006      	b.n	8005f1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e000      	b.n	8005f1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
  }
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b090      	sub	sp, #64	; 0x40
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	4613      	mov	r3, r2
 8005f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f36:	e050      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f3e:	d04c      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f46:	f7fc fbcb 	bl	80026e0 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d241      	bcs.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	330c      	adds	r3, #12
 8005f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f76:	637a      	str	r2, [r7, #52]	; 0x34
 8005f78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e5      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3314      	adds	r3, #20
 8005f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3314      	adds	r3, #20
 8005fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005faa:	623a      	str	r2, [r7, #32]
 8005fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	69f9      	ldr	r1, [r7, #28]
 8005fb0:	6a3a      	ldr	r2, [r7, #32]
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e5      	bne.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e00f      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	bf0c      	ite	eq
 8005fea:	2301      	moveq	r3, #1
 8005fec:	2300      	movne	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d09f      	beq.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3740      	adds	r7, #64	; 0x40
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006008:	b09f      	sub	sp, #124	; 0x7c
 800600a:	af00      	add	r7, sp, #0
 800600c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800600e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601a:	68d9      	ldr	r1, [r3, #12]
 800601c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	ea40 0301 	orr.w	r3, r0, r1
 8006024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	431a      	orrs	r2, r3
 8006030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	431a      	orrs	r2, r3
 8006036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	4313      	orrs	r3, r2
 800603c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800603e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006048:	f021 010c 	bic.w	r1, r1, #12
 800604c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006052:	430b      	orrs	r3, r1
 8006054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006062:	6999      	ldr	r1, [r3, #24]
 8006064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	ea40 0301 	orr.w	r3, r0, r1
 800606c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800606e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4bc5      	ldr	r3, [pc, #788]	; (8006388 <UART_SetConfig+0x384>)
 8006074:	429a      	cmp	r2, r3
 8006076:	d004      	beq.n	8006082 <UART_SetConfig+0x7e>
 8006078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	4bc3      	ldr	r3, [pc, #780]	; (800638c <UART_SetConfig+0x388>)
 800607e:	429a      	cmp	r2, r3
 8006080:	d103      	bne.n	800608a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006082:	f7fd ffed 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8006086:	6778      	str	r0, [r7, #116]	; 0x74
 8006088:	e002      	b.n	8006090 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800608a:	f7fd ffd5 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 800608e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006098:	f040 80b6 	bne.w	8006208 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800609c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609e:	461c      	mov	r4, r3
 80060a0:	f04f 0500 	mov.w	r5, #0
 80060a4:	4622      	mov	r2, r4
 80060a6:	462b      	mov	r3, r5
 80060a8:	1891      	adds	r1, r2, r2
 80060aa:	6439      	str	r1, [r7, #64]	; 0x40
 80060ac:	415b      	adcs	r3, r3
 80060ae:	647b      	str	r3, [r7, #68]	; 0x44
 80060b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060b4:	1912      	adds	r2, r2, r4
 80060b6:	eb45 0303 	adc.w	r3, r5, r3
 80060ba:	f04f 0000 	mov.w	r0, #0
 80060be:	f04f 0100 	mov.w	r1, #0
 80060c2:	00d9      	lsls	r1, r3, #3
 80060c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060c8:	00d0      	lsls	r0, r2, #3
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	1911      	adds	r1, r2, r4
 80060d0:	6639      	str	r1, [r7, #96]	; 0x60
 80060d2:	416b      	adcs	r3, r5
 80060d4:	667b      	str	r3, [r7, #100]	; 0x64
 80060d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	461a      	mov	r2, r3
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	1891      	adds	r1, r2, r2
 80060e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80060e4:	415b      	adcs	r3, r3
 80060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80060f0:	f7fa fd8a 	bl	8000c08 <__aeabi_uldivmod>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4ba5      	ldr	r3, [pc, #660]	; (8006390 <UART_SetConfig+0x38c>)
 80060fa:	fba3 2302 	umull	r2, r3, r3, r2
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	011e      	lsls	r6, r3, #4
 8006102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006104:	461c      	mov	r4, r3
 8006106:	f04f 0500 	mov.w	r5, #0
 800610a:	4622      	mov	r2, r4
 800610c:	462b      	mov	r3, r5
 800610e:	1891      	adds	r1, r2, r2
 8006110:	6339      	str	r1, [r7, #48]	; 0x30
 8006112:	415b      	adcs	r3, r3
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
 8006116:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800611a:	1912      	adds	r2, r2, r4
 800611c:	eb45 0303 	adc.w	r3, r5, r3
 8006120:	f04f 0000 	mov.w	r0, #0
 8006124:	f04f 0100 	mov.w	r1, #0
 8006128:	00d9      	lsls	r1, r3, #3
 800612a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800612e:	00d0      	lsls	r0, r2, #3
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	1911      	adds	r1, r2, r4
 8006136:	65b9      	str	r1, [r7, #88]	; 0x58
 8006138:	416b      	adcs	r3, r5
 800613a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800613c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	461a      	mov	r2, r3
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	1891      	adds	r1, r2, r2
 8006148:	62b9      	str	r1, [r7, #40]	; 0x28
 800614a:	415b      	adcs	r3, r3
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800614e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006152:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006156:	f7fa fd57 	bl	8000c08 <__aeabi_uldivmod>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4b8c      	ldr	r3, [pc, #560]	; (8006390 <UART_SetConfig+0x38c>)
 8006160:	fba3 1302 	umull	r1, r3, r3, r2
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	2164      	movs	r1, #100	; 0x64
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	3332      	adds	r3, #50	; 0x32
 8006172:	4a87      	ldr	r2, [pc, #540]	; (8006390 <UART_SetConfig+0x38c>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	095b      	lsrs	r3, r3, #5
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006180:	441e      	add	r6, r3
 8006182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006184:	4618      	mov	r0, r3
 8006186:	f04f 0100 	mov.w	r1, #0
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	1894      	adds	r4, r2, r2
 8006190:	623c      	str	r4, [r7, #32]
 8006192:	415b      	adcs	r3, r3
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
 8006196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800619a:	1812      	adds	r2, r2, r0
 800619c:	eb41 0303 	adc.w	r3, r1, r3
 80061a0:	f04f 0400 	mov.w	r4, #0
 80061a4:	f04f 0500 	mov.w	r5, #0
 80061a8:	00dd      	lsls	r5, r3, #3
 80061aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061ae:	00d4      	lsls	r4, r2, #3
 80061b0:	4622      	mov	r2, r4
 80061b2:	462b      	mov	r3, r5
 80061b4:	1814      	adds	r4, r2, r0
 80061b6:	653c      	str	r4, [r7, #80]	; 0x50
 80061b8:	414b      	adcs	r3, r1
 80061ba:	657b      	str	r3, [r7, #84]	; 0x54
 80061bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	461a      	mov	r2, r3
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	1891      	adds	r1, r2, r2
 80061c8:	61b9      	str	r1, [r7, #24]
 80061ca:	415b      	adcs	r3, r3
 80061cc:	61fb      	str	r3, [r7, #28]
 80061ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80061d6:	f7fa fd17 	bl	8000c08 <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4b6c      	ldr	r3, [pc, #432]	; (8006390 <UART_SetConfig+0x38c>)
 80061e0:	fba3 1302 	umull	r1, r3, r3, r2
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	2164      	movs	r1, #100	; 0x64
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	3332      	adds	r3, #50	; 0x32
 80061f2:	4a67      	ldr	r2, [pc, #412]	; (8006390 <UART_SetConfig+0x38c>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	f003 0207 	and.w	r2, r3, #7
 80061fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4432      	add	r2, r6
 8006204:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006206:	e0b9      	b.n	800637c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800620a:	461c      	mov	r4, r3
 800620c:	f04f 0500 	mov.w	r5, #0
 8006210:	4622      	mov	r2, r4
 8006212:	462b      	mov	r3, r5
 8006214:	1891      	adds	r1, r2, r2
 8006216:	6139      	str	r1, [r7, #16]
 8006218:	415b      	adcs	r3, r3
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006220:	1912      	adds	r2, r2, r4
 8006222:	eb45 0303 	adc.w	r3, r5, r3
 8006226:	f04f 0000 	mov.w	r0, #0
 800622a:	f04f 0100 	mov.w	r1, #0
 800622e:	00d9      	lsls	r1, r3, #3
 8006230:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006234:	00d0      	lsls	r0, r2, #3
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	eb12 0804 	adds.w	r8, r2, r4
 800623e:	eb43 0905 	adc.w	r9, r3, r5
 8006242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4618      	mov	r0, r3
 8006248:	f04f 0100 	mov.w	r1, #0
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	008b      	lsls	r3, r1, #2
 8006256:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800625a:	0082      	lsls	r2, r0, #2
 800625c:	4640      	mov	r0, r8
 800625e:	4649      	mov	r1, r9
 8006260:	f7fa fcd2 	bl	8000c08 <__aeabi_uldivmod>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4b49      	ldr	r3, [pc, #292]	; (8006390 <UART_SetConfig+0x38c>)
 800626a:	fba3 2302 	umull	r2, r3, r3, r2
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	011e      	lsls	r6, r3, #4
 8006272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006274:	4618      	mov	r0, r3
 8006276:	f04f 0100 	mov.w	r1, #0
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	1894      	adds	r4, r2, r2
 8006280:	60bc      	str	r4, [r7, #8]
 8006282:	415b      	adcs	r3, r3
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800628a:	1812      	adds	r2, r2, r0
 800628c:	eb41 0303 	adc.w	r3, r1, r3
 8006290:	f04f 0400 	mov.w	r4, #0
 8006294:	f04f 0500 	mov.w	r5, #0
 8006298:	00dd      	lsls	r5, r3, #3
 800629a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800629e:	00d4      	lsls	r4, r2, #3
 80062a0:	4622      	mov	r2, r4
 80062a2:	462b      	mov	r3, r5
 80062a4:	1814      	adds	r4, r2, r0
 80062a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80062a8:	414b      	adcs	r3, r1
 80062aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f04f 0100 	mov.w	r1, #0
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	008b      	lsls	r3, r1, #2
 80062c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062c4:	0082      	lsls	r2, r0, #2
 80062c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80062ca:	f7fa fc9d 	bl	8000c08 <__aeabi_uldivmod>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4b2f      	ldr	r3, [pc, #188]	; (8006390 <UART_SetConfig+0x38c>)
 80062d4:	fba3 1302 	umull	r1, r3, r3, r2
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	2164      	movs	r1, #100	; 0x64
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	3332      	adds	r3, #50	; 0x32
 80062e6:	4a2a      	ldr	r2, [pc, #168]	; (8006390 <UART_SetConfig+0x38c>)
 80062e8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f2:	441e      	add	r6, r3
 80062f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062f6:	4618      	mov	r0, r3
 80062f8:	f04f 0100 	mov.w	r1, #0
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	1894      	adds	r4, r2, r2
 8006302:	603c      	str	r4, [r7, #0]
 8006304:	415b      	adcs	r3, r3
 8006306:	607b      	str	r3, [r7, #4]
 8006308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630c:	1812      	adds	r2, r2, r0
 800630e:	eb41 0303 	adc.w	r3, r1, r3
 8006312:	f04f 0400 	mov.w	r4, #0
 8006316:	f04f 0500 	mov.w	r5, #0
 800631a:	00dd      	lsls	r5, r3, #3
 800631c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006320:	00d4      	lsls	r4, r2, #3
 8006322:	4622      	mov	r2, r4
 8006324:	462b      	mov	r3, r5
 8006326:	eb12 0a00 	adds.w	sl, r2, r0
 800632a:	eb43 0b01 	adc.w	fp, r3, r1
 800632e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	4618      	mov	r0, r3
 8006334:	f04f 0100 	mov.w	r1, #0
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	008b      	lsls	r3, r1, #2
 8006342:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006346:	0082      	lsls	r2, r0, #2
 8006348:	4650      	mov	r0, sl
 800634a:	4659      	mov	r1, fp
 800634c:	f7fa fc5c 	bl	8000c08 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4b0e      	ldr	r3, [pc, #56]	; (8006390 <UART_SetConfig+0x38c>)
 8006356:	fba3 1302 	umull	r1, r3, r3, r2
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	2164      	movs	r1, #100	; 0x64
 800635e:	fb01 f303 	mul.w	r3, r1, r3
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	3332      	adds	r3, #50	; 0x32
 8006368:	4a09      	ldr	r2, [pc, #36]	; (8006390 <UART_SetConfig+0x38c>)
 800636a:	fba2 2303 	umull	r2, r3, r2, r3
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	f003 020f 	and.w	r2, r3, #15
 8006374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4432      	add	r2, r6
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	bf00      	nop
 800637e:	377c      	adds	r7, #124	; 0x7c
 8006380:	46bd      	mov	sp, r7
 8006382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006386:	bf00      	nop
 8006388:	40011000 	.word	0x40011000
 800638c:	40011400 	.word	0x40011400
 8006390:	51eb851f 	.word	0x51eb851f

08006394 <__NVIC_SetPriority>:
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	6039      	str	r1, [r7, #0]
 800639e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	db0a      	blt.n	80063be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	490c      	ldr	r1, [pc, #48]	; (80063e0 <__NVIC_SetPriority+0x4c>)
 80063ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b2:	0112      	lsls	r2, r2, #4
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	440b      	add	r3, r1
 80063b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063bc:	e00a      	b.n	80063d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	4908      	ldr	r1, [pc, #32]	; (80063e4 <__NVIC_SetPriority+0x50>)
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	3b04      	subs	r3, #4
 80063cc:	0112      	lsls	r2, r2, #4
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	440b      	add	r3, r1
 80063d2:	761a      	strb	r2, [r3, #24]
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	e000e100 	.word	0xe000e100
 80063e4:	e000ed00 	.word	0xe000ed00

080063e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80063ec:	4b05      	ldr	r3, [pc, #20]	; (8006404 <SysTick_Handler+0x1c>)
 80063ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80063f0:	f001 fdf6 	bl	8007fe0 <xTaskGetSchedulerState>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d001      	beq.n	80063fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80063fa:	f002 fddd 	bl	8008fb8 <xPortSysTickHandler>
  }
}
 80063fe:	bf00      	nop
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	e000e010 	.word	0xe000e010

08006408 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800640c:	2100      	movs	r1, #0
 800640e:	f06f 0004 	mvn.w	r0, #4
 8006412:	f7ff ffbf 	bl	8006394 <__NVIC_SetPriority>
#endif
}
 8006416:	bf00      	nop
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006422:	f3ef 8305 	mrs	r3, IPSR
 8006426:	603b      	str	r3, [r7, #0]
  return(result);
 8006428:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800642e:	f06f 0305 	mvn.w	r3, #5
 8006432:	607b      	str	r3, [r7, #4]
 8006434:	e00c      	b.n	8006450 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <osKernelInitialize+0x44>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d105      	bne.n	800644a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800643e:	4b08      	ldr	r3, [pc, #32]	; (8006460 <osKernelInitialize+0x44>)
 8006440:	2201      	movs	r2, #1
 8006442:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006444:	2300      	movs	r3, #0
 8006446:	607b      	str	r3, [r7, #4]
 8006448:	e002      	b.n	8006450 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800644e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006450:	687b      	ldr	r3, [r7, #4]
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	20000100 	.word	0x20000100

08006464 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800646a:	f3ef 8305 	mrs	r3, IPSR
 800646e:	603b      	str	r3, [r7, #0]
  return(result);
 8006470:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006476:	f06f 0305 	mvn.w	r3, #5
 800647a:	607b      	str	r3, [r7, #4]
 800647c:	e010      	b.n	80064a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800647e:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <osKernelStart+0x48>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d109      	bne.n	800649a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006486:	f7ff ffbf 	bl	8006408 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800648a:	4b08      	ldr	r3, [pc, #32]	; (80064ac <osKernelStart+0x48>)
 800648c:	2202      	movs	r2, #2
 800648e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006490:	f001 f94a 	bl	8007728 <vTaskStartScheduler>
      stat = osOK;
 8006494:	2300      	movs	r3, #0
 8006496:	607b      	str	r3, [r7, #4]
 8006498:	e002      	b.n	80064a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800649a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800649e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80064a0:	687b      	ldr	r3, [r7, #4]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000100 	.word	0x20000100

080064b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08e      	sub	sp, #56	; 0x38
 80064b4:	af04      	add	r7, sp, #16
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c0:	f3ef 8305 	mrs	r3, IPSR
 80064c4:	617b      	str	r3, [r7, #20]
  return(result);
 80064c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d17e      	bne.n	80065ca <osThreadNew+0x11a>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d07b      	beq.n	80065ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80064d2:	2380      	movs	r3, #128	; 0x80
 80064d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064d6:	2318      	movs	r3, #24
 80064d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d045      	beq.n	8006576 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <osThreadNew+0x48>
        name = attr->name;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <osThreadNew+0x6e>
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	2b38      	cmp	r3, #56	; 0x38
 8006510:	d805      	bhi.n	800651e <osThreadNew+0x6e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <osThreadNew+0x72>
        return (NULL);
 800651e:	2300      	movs	r3, #0
 8006520:	e054      	b.n	80065cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <osThreadNew+0xa8>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2bbb      	cmp	r3, #187	; 0xbb
 8006540:	d90a      	bls.n	8006558 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006546:	2b00      	cmp	r3, #0
 8006548:	d006      	beq.n	8006558 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <osThreadNew+0xa8>
        mem = 1;
 8006552:	2301      	movs	r3, #1
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	e010      	b.n	800657a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10c      	bne.n	800657a <osThreadNew+0xca>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d108      	bne.n	800657a <osThreadNew+0xca>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d104      	bne.n	800657a <osThreadNew+0xca>
          mem = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	e001      	b.n	800657a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d110      	bne.n	80065a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006588:	9202      	str	r2, [sp, #8]
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6a3a      	ldr	r2, [r7, #32]
 8006594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 feda 	bl	8007350 <xTaskCreateStatic>
 800659c:	4603      	mov	r3, r0
 800659e:	613b      	str	r3, [r7, #16]
 80065a0:	e013      	b.n	80065ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d110      	bne.n	80065ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	f107 0310 	add.w	r3, r7, #16
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 ff25 	bl	800740a <xTaskCreate>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d001      	beq.n	80065ca <osThreadNew+0x11a>
            hTask = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065ca:	693b      	ldr	r3, [r7, #16]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3728      	adds	r7, #40	; 0x28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af02      	add	r7, sp, #8
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <osThreadFlagsSet+0x1a>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da03      	bge.n	80065f6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80065ee:	f06f 0303 	mvn.w	r3, #3
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e035      	b.n	8006662 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80065f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065fc:	f3ef 8305 	mrs	r3, IPSR
 8006600:	613b      	str	r3, [r7, #16]
  return(result);
 8006602:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01f      	beq.n	8006648 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8006608:	2300      	movs	r3, #0
 800660a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800660c:	f107 0308 	add.w	r3, r7, #8
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	2300      	movs	r3, #0
 8006614:	2201      	movs	r2, #1
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6978      	ldr	r0, [r7, #20]
 800661a:	f001 fe8b 	bl	8008334 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800661e:	f107 030c 	add.w	r3, r7, #12
 8006622:	2200      	movs	r2, #0
 8006624:	9200      	str	r2, [sp, #0]
 8006626:	2200      	movs	r2, #0
 8006628:	2100      	movs	r1, #0
 800662a:	6978      	ldr	r0, [r7, #20]
 800662c:	f001 fe82 	bl	8008334 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d015      	beq.n	8006662 <osThreadFlagsSet+0x8e>
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <osThreadFlagsSet+0x98>)
 8006638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	e00c      	b.n	8006662 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8006648:	2300      	movs	r3, #0
 800664a:	2201      	movs	r2, #1
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f001 fdb2 	bl	80081b8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8006654:	f107 030c 	add.w	r3, r7, #12
 8006658:	2200      	movs	r2, #0
 800665a:	2100      	movs	r1, #0
 800665c:	6978      	ldr	r0, [r7, #20]
 800665e:	f001 fdab 	bl	80081b8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8006662:	68fb      	ldr	r3, [r7, #12]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8006670:	b580      	push	{r7, lr}
 8006672:	b08c      	sub	sp, #48	; 0x30
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800667c:	f3ef 8305 	mrs	r3, IPSR
 8006680:	617b      	str	r3, [r7, #20]
  return(result);
 8006682:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8006688:	f06f 0305 	mvn.w	r3, #5
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800668e:	e06b      	b.n	8006768 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	da03      	bge.n	800669e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8006696:	f06f 0303 	mvn.w	r3, #3
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800669c:	e064      	b.n	8006768 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <osThreadFlagsWait+0x3e>
      clear = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ac:	e001      	b.n	80066b2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80066ba:	f001 f951 	bl	8007960 <xTaskGetTickCount>
 80066be:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80066c0:	f107 0210 	add.w	r2, r7, #16
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066c8:	2000      	movs	r0, #0
 80066ca:	f001 fd15 	bl	80080f8 <xTaskNotifyWait>
 80066ce:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d137      	bne.n	8006746 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80066d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4013      	ands	r3, r2
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066e2:	4313      	orrs	r3, r2
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00c      	beq.n	800670a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	4013      	ands	r3, r2
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d032      	beq.n	8006762 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10f      	bne.n	8006722 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8006702:	f06f 0302 	mvn.w	r3, #2
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006708:	e02e      	b.n	8006768 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d128      	bne.n	8006766 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d103      	bne.n	8006722 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800671a:	f06f 0302 	mvn.w	r3, #2
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006720:	e022      	b.n	8006768 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8006722:	f001 f91d 	bl	8007960 <xTaskGetTickCount>
 8006726:	4602      	mov	r2, r0
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	429a      	cmp	r2, r3
 8006734:	d902      	bls.n	800673c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
 800673a:	e00e      	b.n	800675a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800673c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
 8006744:	e009      	b.n	800675a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d103      	bne.n	8006754 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800674c:	f06f 0302 	mvn.w	r3, #2
 8006750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006752:	e002      	b.n	800675a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8006754:	f06f 0301 	mvn.w	r3, #1
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1af      	bne.n	80066c0 <osThreadFlagsWait+0x50>
 8006760:	e002      	b.n	8006768 <osThreadFlagsWait+0xf8>
            break;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <osThreadFlagsWait+0xf8>
            break;
 8006766:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800676a:	4618      	mov	r0, r3
 800676c:	3730      	adds	r7, #48	; 0x30
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800677a:	f3ef 8305 	mrs	r3, IPSR
 800677e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006780:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <osDelay+0x1c>
    stat = osErrorISR;
 8006786:	f06f 0305 	mvn.w	r3, #5
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	e007      	b.n	800679e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <osDelay+0x2c>
      vTaskDelay(ticks);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 ff91 	bl	80076c0 <vTaskDelay>
    }
  }

  return (stat);
 800679e:	68fb      	ldr	r3, [r7, #12]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4a07      	ldr	r2, [pc, #28]	; (80067d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80067b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4a06      	ldr	r2, [pc, #24]	; (80067d8 <vApplicationGetIdleTaskMemory+0x30>)
 80067be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2280      	movs	r2, #128	; 0x80
 80067c4:	601a      	str	r2, [r3, #0]
}
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000104 	.word	0x20000104
 80067d8:	200001c0 	.word	0x200001c0

080067dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4a07      	ldr	r2, [pc, #28]	; (8006808 <vApplicationGetTimerTaskMemory+0x2c>)
 80067ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4a06      	ldr	r2, [pc, #24]	; (800680c <vApplicationGetTimerTaskMemory+0x30>)
 80067f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067fa:	601a      	str	r2, [r3, #0]
}
 80067fc:	bf00      	nop
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	200003c0 	.word	0x200003c0
 800680c:	2000047c 	.word	0x2000047c

08006810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f103 0208 	add.w	r2, r3, #8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f103 0208 	add.w	r2, r3, #8
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f103 0208 	add.w	r2, r3, #8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
}
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068c8:	d103      	bne.n	80068d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e00c      	b.n	80068ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3308      	adds	r3, #8
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	e002      	b.n	80068e0 <vListInsert+0x2e>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d2f6      	bcs.n	80068da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	601a      	str	r2, [r3, #0]
}
 8006918:	bf00      	nop
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6892      	ldr	r2, [r2, #8]
 800693a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6852      	ldr	r2, [r2, #4]
 8006944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	d103      	bne.n	8006958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	1e5a      	subs	r2, r3, #1
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069a2:	f002 fa77 	bl	8008e94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	3b01      	subs	r3, #1
 80069d4:	68f9      	ldr	r1, [r7, #12]
 80069d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	441a      	add	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	22ff      	movs	r2, #255	; 0xff
 80069e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	22ff      	movs	r2, #255	; 0xff
 80069ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d114      	bne.n	8006a22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01a      	beq.n	8006a36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3310      	adds	r3, #16
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 f929 	bl	8007c5c <xTaskRemoveFromEventList>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d012      	beq.n	8006a36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a10:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <xQueueGenericReset+0xcc>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	e009      	b.n	8006a36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3310      	adds	r3, #16
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff fef2 	bl	8006810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3324      	adds	r3, #36	; 0x24
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff feed 	bl	8006810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a36:	f002 fa5d 	bl	8008ef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a3a:	2301      	movs	r3, #1
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08e      	sub	sp, #56	; 0x38
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a8a:	bf00      	nop
 8006a8c:	e7fe      	b.n	8006a8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <xQueueGenericCreateStatic+0x52>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <xQueueGenericCreateStatic+0x56>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <xQueueGenericCreateStatic+0x58>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	623b      	str	r3, [r7, #32]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d102      	bne.n	8006ac6 <xQueueGenericCreateStatic+0x7e>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <xQueueGenericCreateStatic+0x82>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <xQueueGenericCreateStatic+0x84>
 8006aca:	2300      	movs	r3, #0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	61fb      	str	r3, [r7, #28]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ae6:	2350      	movs	r3, #80	; 0x50
 8006ae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b50      	cmp	r3, #80	; 0x50
 8006aee:	d00a      	beq.n	8006b06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	61bb      	str	r3, [r7, #24]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00d      	beq.n	8006b2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4613      	mov	r3, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f805 	bl	8006b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3730      	adds	r7, #48	; 0x30
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d103      	bne.n	8006b54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e002      	b.n	8006b5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b66:	2101      	movs	r1, #1
 8006b68:	69b8      	ldr	r0, [r7, #24]
 8006b6a:	f7ff ff05 	bl	8006978 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b76:	bf00      	nop
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08e      	sub	sp, #56	; 0x38
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xQueueGenericSend+0x32>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d103      	bne.n	8006bc0 <xQueueGenericSend+0x40>
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <xQueueGenericSend+0x44>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e000      	b.n	8006bc6 <xQueueGenericSend+0x46>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <xQueueGenericSend+0x60>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d103      	bne.n	8006bee <xQueueGenericSend+0x6e>
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <xQueueGenericSend+0x72>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <xQueueGenericSend+0x74>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xQueueGenericSend+0x8e>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	623b      	str	r3, [r7, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c0e:	f001 f9e7 	bl	8007fe0 <xTaskGetSchedulerState>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <xQueueGenericSend+0x9e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <xQueueGenericSend+0xa2>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <xQueueGenericSend+0xa4>
 8006c22:	2300      	movs	r3, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <xQueueGenericSend+0xbe>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	61fb      	str	r3, [r7, #28]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c3e:	f002 f929 	bl	8008e94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d302      	bcc.n	8006c54 <xQueueGenericSend+0xd4>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d129      	bne.n	8006ca8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c5a:	f000 fa0b 	bl	8007074 <prvCopyDataToQueue>
 8006c5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d010      	beq.n	8006c8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	3324      	adds	r3, #36	; 0x24
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fff5 	bl	8007c5c <xTaskRemoveFromEventList>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d013      	beq.n	8006ca0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c78:	4b3f      	ldr	r3, [pc, #252]	; (8006d78 <xQueueGenericSend+0x1f8>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	e00a      	b.n	8006ca0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c90:	4b39      	ldr	r3, [pc, #228]	; (8006d78 <xQueueGenericSend+0x1f8>)
 8006c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ca0:	f002 f928 	bl	8008ef4 <vPortExitCritical>
				return pdPASS;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e063      	b.n	8006d70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cae:	f002 f921 	bl	8008ef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e05c      	b.n	8006d70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cbc:	f107 0314 	add.w	r3, r7, #20
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f001 f82f 	bl	8007d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cca:	f002 f913 	bl	8008ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cce:	f000 fd9b 	bl	8007808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cd2:	f002 f8df 	bl	8008e94 <vPortEnterCritical>
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cdc:	b25b      	sxtb	r3, r3
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ce2:	d103      	bne.n	8006cec <xQueueGenericSend+0x16c>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cf8:	d103      	bne.n	8006d02 <xQueueGenericSend+0x182>
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d02:	f002 f8f7 	bl	8008ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d06:	1d3a      	adds	r2, r7, #4
 8006d08:	f107 0314 	add.w	r3, r7, #20
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 f81e 	bl	8007d50 <xTaskCheckForTimeOut>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d124      	bne.n	8006d64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d1c:	f000 faa2 	bl	8007264 <prvIsQueueFull>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d018      	beq.n	8006d58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	3310      	adds	r3, #16
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 ff44 	bl	8007bbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d36:	f000 fa2d 	bl	8007194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d3a:	f000 fd73 	bl	8007824 <xTaskResumeAll>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f47f af7c 	bne.w	8006c3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d46:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <xQueueGenericSend+0x1f8>)
 8006d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	e772      	b.n	8006c3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d5a:	f000 fa1b 	bl	8007194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d5e:	f000 fd61 	bl	8007824 <xTaskResumeAll>
 8006d62:	e76c      	b.n	8006c3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d66:	f000 fa15 	bl	8007194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d6a:	f000 fd5b 	bl	8007824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3738      	adds	r7, #56	; 0x38
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b090      	sub	sp, #64	; 0x40
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10a      	bne.n	8006daa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <xQueueGenericSendFromISR+0x3c>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <xQueueGenericSendFromISR+0x40>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <xQueueGenericSendFromISR+0x42>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d103      	bne.n	8006de6 <xQueueGenericSendFromISR+0x6a>
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <xQueueGenericSendFromISR+0x6e>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <xQueueGenericSendFromISR+0x70>
 8006dea:	2300      	movs	r3, #0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	623b      	str	r3, [r7, #32]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e06:	f002 f927 	bl	8009058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	61fa      	str	r2, [r7, #28]
 8006e20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d302      	bcc.n	8006e38 <xQueueGenericSendFromISR+0xbc>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d12f      	bne.n	8006e98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e4e:	f000 f911 	bl	8007074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e5a:	d112      	bne.n	8006e82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d016      	beq.n	8006e92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	3324      	adds	r3, #36	; 0x24
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fef7 	bl	8007c5c <xTaskRemoveFromEventList>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00e      	beq.n	8006e92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00b      	beq.n	8006e92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	e007      	b.n	8006e92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e86:	3301      	adds	r3, #1
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	b25a      	sxtb	r2, r3
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e92:	2301      	movs	r3, #1
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006e96:	e001      	b.n	8006e9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ea6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3740      	adds	r7, #64	; 0x40
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08c      	sub	sp, #48	; 0x30
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <xQueueReceive+0x30>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	623b      	str	r3, [r7, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d103      	bne.n	8006ef2 <xQueueReceive+0x3e>
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <xQueueReceive+0x42>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <xQueueReceive+0x44>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <xQueueReceive+0x5e>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	61fb      	str	r3, [r7, #28]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f12:	f001 f865 	bl	8007fe0 <xTaskGetSchedulerState>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <xQueueReceive+0x6e>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <xQueueReceive+0x72>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <xQueueReceive+0x74>
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xQueueReceive+0x8e>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	61bb      	str	r3, [r7, #24]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f42:	f001 ffa7 	bl	8008e94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01f      	beq.n	8006f92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f56:	f000 f8f7 	bl	8007148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	1e5a      	subs	r2, r3, #1
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00f      	beq.n	8006f8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	3310      	adds	r3, #16
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fe74 	bl	8007c5c <xTaskRemoveFromEventList>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f7a:	4b3d      	ldr	r3, [pc, #244]	; (8007070 <xQueueReceive+0x1bc>)
 8006f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f8a:	f001 ffb3 	bl	8008ef4 <vPortExitCritical>
				return pdPASS;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e069      	b.n	8007066 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d103      	bne.n	8006fa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f98:	f001 ffac 	bl	8008ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e062      	b.n	8007066 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d106      	bne.n	8006fb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fa6:	f107 0310 	add.w	r3, r7, #16
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 feba 	bl	8007d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fb4:	f001 ff9e 	bl	8008ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fb8:	f000 fc26 	bl	8007808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fbc:	f001 ff6a 	bl	8008e94 <vPortEnterCritical>
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fc6:	b25b      	sxtb	r3, r3
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fcc:	d103      	bne.n	8006fd6 <xQueueReceive+0x122>
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fdc:	b25b      	sxtb	r3, r3
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe2:	d103      	bne.n	8006fec <xQueueReceive+0x138>
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fec:	f001 ff82 	bl	8008ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ff0:	1d3a      	adds	r2, r7, #4
 8006ff2:	f107 0310 	add.w	r3, r7, #16
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fea9 	bl	8007d50 <xTaskCheckForTimeOut>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d123      	bne.n	800704c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007006:	f000 f917 	bl	8007238 <prvIsQueueEmpty>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d017      	beq.n	8007040 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	3324      	adds	r3, #36	; 0x24
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f000 fdcf 	bl	8007bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800701e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007020:	f000 f8b8 	bl	8007194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007024:	f000 fbfe 	bl	8007824 <xTaskResumeAll>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d189      	bne.n	8006f42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800702e:	4b10      	ldr	r3, [pc, #64]	; (8007070 <xQueueReceive+0x1bc>)
 8007030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	e780      	b.n	8006f42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007042:	f000 f8a7 	bl	8007194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007046:	f000 fbed 	bl	8007824 <xTaskResumeAll>
 800704a:	e77a      	b.n	8006f42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800704c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800704e:	f000 f8a1 	bl	8007194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007052:	f000 fbe7 	bl	8007824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007058:	f000 f8ee 	bl	8007238 <prvIsQueueEmpty>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	f43f af6f 	beq.w	8006f42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007064:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007066:	4618      	mov	r0, r3
 8007068:	3730      	adds	r7, #48	; 0x30
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	e000ed04 	.word	0xe000ed04

08007074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10d      	bne.n	80070ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d14d      	bne.n	8007136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 ffbc 	bl	800801c <xTaskPriorityDisinherit>
 80070a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	609a      	str	r2, [r3, #8]
 80070ac:	e043      	b.n	8007136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d119      	bne.n	80070e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6858      	ldr	r0, [r3, #4]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	461a      	mov	r2, r3
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	f002 fb17 	bl	80096f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	441a      	add	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d32b      	bcc.n	8007136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	e026      	b.n	8007136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68d8      	ldr	r0, [r3, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	461a      	mov	r2, r3
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	f002 fafd 	bl	80096f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	425b      	negs	r3, r3
 8007102:	441a      	add	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d207      	bcs.n	8007124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	425b      	negs	r3, r3
 800711e:	441a      	add	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d105      	bne.n	8007136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	3b01      	subs	r3, #1
 8007134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800713e:	697b      	ldr	r3, [r7, #20]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d018      	beq.n	800718c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	441a      	add	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	429a      	cmp	r2, r3
 8007172:	d303      	bcc.n	800717c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68d9      	ldr	r1, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	461a      	mov	r2, r3
 8007186:	6838      	ldr	r0, [r7, #0]
 8007188:	f002 fab3 	bl	80096f2 <memcpy>
	}
}
 800718c:	bf00      	nop
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800719c:	f001 fe7a 	bl	8008e94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071a8:	e011      	b.n	80071ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d012      	beq.n	80071d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3324      	adds	r3, #36	; 0x24
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fd50 	bl	8007c5c <xTaskRemoveFromEventList>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071c2:	f000 fe27 	bl	8007e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dce9      	bgt.n	80071aa <prvUnlockQueue+0x16>
 80071d6:	e000      	b.n	80071da <prvUnlockQueue+0x46>
					break;
 80071d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	22ff      	movs	r2, #255	; 0xff
 80071de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071e2:	f001 fe87 	bl	8008ef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071e6:	f001 fe55 	bl	8008e94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071f2:	e011      	b.n	8007218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d012      	beq.n	8007222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3310      	adds	r3, #16
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fd2b 	bl	8007c5c <xTaskRemoveFromEventList>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800720c:	f000 fe02 	bl	8007e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	3b01      	subs	r3, #1
 8007214:	b2db      	uxtb	r3, r3
 8007216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800721c:	2b00      	cmp	r3, #0
 800721e:	dce9      	bgt.n	80071f4 <prvUnlockQueue+0x60>
 8007220:	e000      	b.n	8007224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	22ff      	movs	r2, #255	; 0xff
 8007228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800722c:	f001 fe62 	bl	8008ef4 <vPortExitCritical>
}
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007240:	f001 fe28 	bl	8008e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d102      	bne.n	8007252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	e001      	b.n	8007256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007256:	f001 fe4d 	bl	8008ef4 <vPortExitCritical>

	return xReturn;
 800725a:	68fb      	ldr	r3, [r7, #12]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800726c:	f001 fe12 	bl	8008e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007278:	429a      	cmp	r2, r3
 800727a:	d102      	bne.n	8007282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	e001      	b.n	8007286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007286:	f001 fe35 	bl	8008ef4 <vPortExitCritical>

	return xReturn;
 800728a:	68fb      	ldr	r3, [r7, #12]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	e014      	b.n	80072ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072a4:	4a0f      	ldr	r2, [pc, #60]	; (80072e4 <vQueueAddToRegistry+0x50>)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10b      	bne.n	80072c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072b0:	490c      	ldr	r1, [pc, #48]	; (80072e4 <vQueueAddToRegistry+0x50>)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072ba:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <vQueueAddToRegistry+0x50>)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	4413      	add	r3, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072c6:	e006      	b.n	80072d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b07      	cmp	r3, #7
 80072d2:	d9e7      	bls.n	80072a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20004d38 	.word	0x20004d38

080072e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072f8:	f001 fdcc 	bl	8008e94 <vPortEnterCritical>
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007302:	b25b      	sxtb	r3, r3
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007308:	d103      	bne.n	8007312 <vQueueWaitForMessageRestricted+0x2a>
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007318:	b25b      	sxtb	r3, r3
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800731e:	d103      	bne.n	8007328 <vQueueWaitForMessageRestricted+0x40>
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007328:	f001 fde4 	bl	8008ef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	2b00      	cmp	r3, #0
 8007332:	d106      	bne.n	8007342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	3324      	adds	r3, #36	; 0x24
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	4618      	mov	r0, r3
 800733e:	f000 fc61 	bl	8007c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007342:	6978      	ldr	r0, [r7, #20]
 8007344:	f7ff ff26 	bl	8007194 <prvUnlockQueue>
	}
 8007348:	bf00      	nop
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08e      	sub	sp, #56	; 0x38
 8007354:	af04      	add	r7, sp, #16
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	623b      	str	r3, [r7, #32]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10a      	bne.n	8007396 <xTaskCreateStatic+0x46>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	61fb      	str	r3, [r7, #28]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007396:	23bc      	movs	r3, #188	; 0xbc
 8007398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2bbc      	cmp	r3, #188	; 0xbc
 800739e:	d00a      	beq.n	80073b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	61bb      	str	r3, [r7, #24]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01e      	beq.n	80073fc <xTaskCreateStatic+0xac>
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01b      	beq.n	80073fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	2202      	movs	r2, #2
 80073d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073d6:	2300      	movs	r3, #0
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	9302      	str	r3, [sp, #8]
 80073de:	f107 0314 	add.w	r3, r7, #20
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f850 	bl	8007494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073f6:	f000 f8f3 	bl	80075e0 <prvAddNewTaskToReadyList>
 80073fa:	e001      	b.n	8007400 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007400:	697b      	ldr	r3, [r7, #20]
	}
 8007402:	4618      	mov	r0, r3
 8007404:	3728      	adds	r7, #40	; 0x28
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800740a:	b580      	push	{r7, lr}
 800740c:	b08c      	sub	sp, #48	; 0x30
 800740e:	af04      	add	r7, sp, #16
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	4613      	mov	r3, r2
 8007418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fe5a 	bl	80090d8 <pvPortMalloc>
 8007424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00e      	beq.n	800744a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800742c:	20bc      	movs	r0, #188	; 0xbc
 800742e:	f001 fe53 	bl	80090d8 <pvPortMalloc>
 8007432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	631a      	str	r2, [r3, #48]	; 0x30
 8007440:	e005      	b.n	800744e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007442:	6978      	ldr	r0, [r7, #20]
 8007444:	f001 ff14 	bl	8009270 <vPortFree>
 8007448:	e001      	b.n	800744e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d017      	beq.n	8007484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800745c:	88fa      	ldrh	r2, [r7, #6]
 800745e:	2300      	movs	r3, #0
 8007460:	9303      	str	r3, [sp, #12]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	9302      	str	r3, [sp, #8]
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f80e 	bl	8007494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007478:	69f8      	ldr	r0, [r7, #28]
 800747a:	f000 f8b1 	bl	80075e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800747e:	2301      	movs	r3, #1
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e002      	b.n	800748a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800748a:	69bb      	ldr	r3, [r7, #24]
	}
 800748c:	4618      	mov	r0, r3
 800748e:	3720      	adds	r7, #32
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	461a      	mov	r2, r3
 80074ac:	21a5      	movs	r1, #165	; 0xa5
 80074ae:	f002 f92e 	bl	800970e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074bc:	3b01      	subs	r3, #1
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f023 0307 	bic.w	r3, r3, #7
 80074ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	617b      	str	r3, [r7, #20]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d01f      	beq.n	8007532 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	e012      	b.n	800751e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	7819      	ldrb	r1, [r3, #0]
 8007500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	4413      	add	r3, r2
 8007506:	3334      	adds	r3, #52	; 0x34
 8007508:	460a      	mov	r2, r1
 800750a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d006      	beq.n	8007526 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	3301      	adds	r3, #1
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	2b0f      	cmp	r3, #15
 8007522:	d9e9      	bls.n	80074f8 <prvInitialiseNewTask+0x64>
 8007524:	e000      	b.n	8007528 <prvInitialiseNewTask+0x94>
			{
				break;
 8007526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007530:	e003      	b.n	800753a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	2b37      	cmp	r3, #55	; 0x37
 800753e:	d901      	bls.n	8007544 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007540:	2337      	movs	r3, #55	; 0x37
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800754e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	2200      	movs	r2, #0
 8007554:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	3304      	adds	r3, #4
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff f978 	bl	8006850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	3318      	adds	r3, #24
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff f973 	bl	8006850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800757e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	2200      	movs	r2, #0
 800758c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	3354      	adds	r3, #84	; 0x54
 8007594:	2260      	movs	r2, #96	; 0x60
 8007596:	2100      	movs	r1, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f002 f8b8 	bl	800970e <memset>
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	4a0c      	ldr	r2, [pc, #48]	; (80075d4 <prvInitialiseNewTask+0x140>)
 80075a2:	659a      	str	r2, [r3, #88]	; 0x58
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	4a0c      	ldr	r2, [pc, #48]	; (80075d8 <prvInitialiseNewTask+0x144>)
 80075a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	4a0b      	ldr	r2, [pc, #44]	; (80075dc <prvInitialiseNewTask+0x148>)
 80075ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	69b8      	ldr	r0, [r7, #24]
 80075b6:	f001 fb43 	bl	8008c40 <pxPortInitialiseStack>
 80075ba:	4602      	mov	r2, r0
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075cc:	bf00      	nop
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	0800a7b4 	.word	0x0800a7b4
 80075d8:	0800a7d4 	.word	0x0800a7d4
 80075dc:	0800a794 	.word	0x0800a794

080075e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075e8:	f001 fc54 	bl	8008e94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075ec:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <prvAddNewTaskToReadyList+0xc4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3301      	adds	r3, #1
 80075f2:	4a2c      	ldr	r2, [pc, #176]	; (80076a4 <prvAddNewTaskToReadyList+0xc4>)
 80075f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075f6:	4b2c      	ldr	r3, [pc, #176]	; (80076a8 <prvAddNewTaskToReadyList+0xc8>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075fe:	4a2a      	ldr	r2, [pc, #168]	; (80076a8 <prvAddNewTaskToReadyList+0xc8>)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007604:	4b27      	ldr	r3, [pc, #156]	; (80076a4 <prvAddNewTaskToReadyList+0xc4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d110      	bne.n	800762e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800760c:	f000 fc26 	bl	8007e5c <prvInitialiseTaskLists>
 8007610:	e00d      	b.n	800762e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007612:	4b26      	ldr	r3, [pc, #152]	; (80076ac <prvAddNewTaskToReadyList+0xcc>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800761a:	4b23      	ldr	r3, [pc, #140]	; (80076a8 <prvAddNewTaskToReadyList+0xc8>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	429a      	cmp	r2, r3
 8007626:	d802      	bhi.n	800762e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007628:	4a1f      	ldr	r2, [pc, #124]	; (80076a8 <prvAddNewTaskToReadyList+0xc8>)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800762e:	4b20      	ldr	r3, [pc, #128]	; (80076b0 <prvAddNewTaskToReadyList+0xd0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3301      	adds	r3, #1
 8007634:	4a1e      	ldr	r2, [pc, #120]	; (80076b0 <prvAddNewTaskToReadyList+0xd0>)
 8007636:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007638:	4b1d      	ldr	r3, [pc, #116]	; (80076b0 <prvAddNewTaskToReadyList+0xd0>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007644:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <prvAddNewTaskToReadyList+0xd4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d903      	bls.n	8007654 <prvAddNewTaskToReadyList+0x74>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	4a18      	ldr	r2, [pc, #96]	; (80076b4 <prvAddNewTaskToReadyList+0xd4>)
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4a15      	ldr	r2, [pc, #84]	; (80076b8 <prvAddNewTaskToReadyList+0xd8>)
 8007662:	441a      	add	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3304      	adds	r3, #4
 8007668:	4619      	mov	r1, r3
 800766a:	4610      	mov	r0, r2
 800766c:	f7ff f8fd 	bl	800686a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007670:	f001 fc40 	bl	8008ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007674:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <prvAddNewTaskToReadyList+0xcc>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00e      	beq.n	800769a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800767c:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <prvAddNewTaskToReadyList+0xc8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	429a      	cmp	r2, r3
 8007688:	d207      	bcs.n	800769a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800768a:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <prvAddNewTaskToReadyList+0xdc>)
 800768c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20000d50 	.word	0x20000d50
 80076a8:	2000087c 	.word	0x2000087c
 80076ac:	20000d5c 	.word	0x20000d5c
 80076b0:	20000d6c 	.word	0x20000d6c
 80076b4:	20000d58 	.word	0x20000d58
 80076b8:	20000880 	.word	0x20000880
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d017      	beq.n	8007702 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076d2:	4b13      	ldr	r3, [pc, #76]	; (8007720 <vTaskDelay+0x60>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <vTaskDelay+0x30>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	60bb      	str	r3, [r7, #8]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076f0:	f000 f88a 	bl	8007808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076f4:	2100      	movs	r1, #0
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 ff00 	bl	80084fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076fc:	f000 f892 	bl	8007824 <xTaskResumeAll>
 8007700:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d107      	bne.n	8007718 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007708:	4b06      	ldr	r3, [pc, #24]	; (8007724 <vTaskDelay+0x64>)
 800770a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007718:	bf00      	nop
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	20000d78 	.word	0x20000d78
 8007724:	e000ed04 	.word	0xe000ed04

08007728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	; 0x28
 800772c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007736:	463a      	mov	r2, r7
 8007738:	1d39      	adds	r1, r7, #4
 800773a:	f107 0308 	add.w	r3, r7, #8
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff f832 	bl	80067a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	9202      	str	r2, [sp, #8]
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	2300      	movs	r3, #0
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	2300      	movs	r3, #0
 8007754:	460a      	mov	r2, r1
 8007756:	4924      	ldr	r1, [pc, #144]	; (80077e8 <vTaskStartScheduler+0xc0>)
 8007758:	4824      	ldr	r0, [pc, #144]	; (80077ec <vTaskStartScheduler+0xc4>)
 800775a:	f7ff fdf9 	bl	8007350 <xTaskCreateStatic>
 800775e:	4603      	mov	r3, r0
 8007760:	4a23      	ldr	r2, [pc, #140]	; (80077f0 <vTaskStartScheduler+0xc8>)
 8007762:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007764:	4b22      	ldr	r3, [pc, #136]	; (80077f0 <vTaskStartScheduler+0xc8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800776c:	2301      	movs	r3, #1
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	e001      	b.n	8007776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d102      	bne.n	8007782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800777c:	f000 ff12 	bl	80085a4 <xTimerCreateTimerTask>
 8007780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d11b      	bne.n	80077c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	613b      	str	r3, [r7, #16]
}
 800779a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800779c:	4b15      	ldr	r3, [pc, #84]	; (80077f4 <vTaskStartScheduler+0xcc>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3354      	adds	r3, #84	; 0x54
 80077a2:	4a15      	ldr	r2, [pc, #84]	; (80077f8 <vTaskStartScheduler+0xd0>)
 80077a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077a6:	4b15      	ldr	r3, [pc, #84]	; (80077fc <vTaskStartScheduler+0xd4>)
 80077a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077ae:	4b14      	ldr	r3, [pc, #80]	; (8007800 <vTaskStartScheduler+0xd8>)
 80077b0:	2201      	movs	r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077b4:	4b13      	ldr	r3, [pc, #76]	; (8007804 <vTaskStartScheduler+0xdc>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077ba:	f001 fac9 	bl	8008d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077be:	e00e      	b.n	80077de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c6:	d10a      	bne.n	80077de <vTaskStartScheduler+0xb6>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	60fb      	str	r3, [r7, #12]
}
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <vTaskStartScheduler+0xb4>
}
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	0800a6f8 	.word	0x0800a6f8
 80077ec:	08007e2d 	.word	0x08007e2d
 80077f0:	20000d74 	.word	0x20000d74
 80077f4:	2000087c 	.word	0x2000087c
 80077f8:	20000030 	.word	0x20000030
 80077fc:	20000d70 	.word	0x20000d70
 8007800:	20000d5c 	.word	0x20000d5c
 8007804:	20000d54 	.word	0x20000d54

08007808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800780c:	4b04      	ldr	r3, [pc, #16]	; (8007820 <vTaskSuspendAll+0x18>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3301      	adds	r3, #1
 8007812:	4a03      	ldr	r2, [pc, #12]	; (8007820 <vTaskSuspendAll+0x18>)
 8007814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007816:	bf00      	nop
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	20000d78 	.word	0x20000d78

08007824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800782e:	2300      	movs	r3, #0
 8007830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007832:	4b42      	ldr	r3, [pc, #264]	; (800793c <xTaskResumeAll+0x118>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <xTaskResumeAll+0x2c>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	603b      	str	r3, [r7, #0]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007850:	f001 fb20 	bl	8008e94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007854:	4b39      	ldr	r3, [pc, #228]	; (800793c <xTaskResumeAll+0x118>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3b01      	subs	r3, #1
 800785a:	4a38      	ldr	r2, [pc, #224]	; (800793c <xTaskResumeAll+0x118>)
 800785c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800785e:	4b37      	ldr	r3, [pc, #220]	; (800793c <xTaskResumeAll+0x118>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d162      	bne.n	800792c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007866:	4b36      	ldr	r3, [pc, #216]	; (8007940 <xTaskResumeAll+0x11c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d05e      	beq.n	800792c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800786e:	e02f      	b.n	80078d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007870:	4b34      	ldr	r3, [pc, #208]	; (8007944 <xTaskResumeAll+0x120>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3318      	adds	r3, #24
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff f851 	bl	8006924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3304      	adds	r3, #4
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff f84c 	bl	8006924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007890:	4b2d      	ldr	r3, [pc, #180]	; (8007948 <xTaskResumeAll+0x124>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d903      	bls.n	80078a0 <xTaskResumeAll+0x7c>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	4a2a      	ldr	r2, [pc, #168]	; (8007948 <xTaskResumeAll+0x124>)
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a4:	4613      	mov	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4a27      	ldr	r2, [pc, #156]	; (800794c <xTaskResumeAll+0x128>)
 80078ae:	441a      	add	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4619      	mov	r1, r3
 80078b6:	4610      	mov	r0, r2
 80078b8:	f7fe ffd7 	bl	800686a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c0:	4b23      	ldr	r3, [pc, #140]	; (8007950 <xTaskResumeAll+0x12c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d302      	bcc.n	80078d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078ca:	4b22      	ldr	r3, [pc, #136]	; (8007954 <xTaskResumeAll+0x130>)
 80078cc:	2201      	movs	r2, #1
 80078ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078d0:	4b1c      	ldr	r3, [pc, #112]	; (8007944 <xTaskResumeAll+0x120>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1cb      	bne.n	8007870 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078de:	f000 fb5f 	bl	8007fa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078e2:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <xTaskResumeAll+0x134>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d010      	beq.n	8007910 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078ee:	f000 f847 	bl	8007980 <xTaskIncrementTick>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80078f8:	4b16      	ldr	r3, [pc, #88]	; (8007954 <xTaskResumeAll+0x130>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3b01      	subs	r3, #1
 8007902:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1f1      	bne.n	80078ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800790a:	4b13      	ldr	r3, [pc, #76]	; (8007958 <xTaskResumeAll+0x134>)
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007910:	4b10      	ldr	r3, [pc, #64]	; (8007954 <xTaskResumeAll+0x130>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d009      	beq.n	800792c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007918:	2301      	movs	r3, #1
 800791a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800791c:	4b0f      	ldr	r3, [pc, #60]	; (800795c <xTaskResumeAll+0x138>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800792c:	f001 fae2 	bl	8008ef4 <vPortExitCritical>

	return xAlreadyYielded;
 8007930:	68bb      	ldr	r3, [r7, #8]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000d78 	.word	0x20000d78
 8007940:	20000d50 	.word	0x20000d50
 8007944:	20000d10 	.word	0x20000d10
 8007948:	20000d58 	.word	0x20000d58
 800794c:	20000880 	.word	0x20000880
 8007950:	2000087c 	.word	0x2000087c
 8007954:	20000d64 	.word	0x20000d64
 8007958:	20000d60 	.word	0x20000d60
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <xTaskGetTickCount+0x1c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800796c:	687b      	ldr	r3, [r7, #4]
}
 800796e:	4618      	mov	r0, r3
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	20000d54 	.word	0x20000d54

08007980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798a:	4b4f      	ldr	r3, [pc, #316]	; (8007ac8 <xTaskIncrementTick+0x148>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f040 808f 	bne.w	8007ab2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007994:	4b4d      	ldr	r3, [pc, #308]	; (8007acc <xTaskIncrementTick+0x14c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800799c:	4a4b      	ldr	r2, [pc, #300]	; (8007acc <xTaskIncrementTick+0x14c>)
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d120      	bne.n	80079ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80079a8:	4b49      	ldr	r3, [pc, #292]	; (8007ad0 <xTaskIncrementTick+0x150>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	603b      	str	r3, [r7, #0]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xTaskIncrementTick+0x46>
 80079c8:	4b41      	ldr	r3, [pc, #260]	; (8007ad0 <xTaskIncrementTick+0x150>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	4b41      	ldr	r3, [pc, #260]	; (8007ad4 <xTaskIncrementTick+0x154>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a3f      	ldr	r2, [pc, #252]	; (8007ad0 <xTaskIncrementTick+0x150>)
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	4a3f      	ldr	r2, [pc, #252]	; (8007ad4 <xTaskIncrementTick+0x154>)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	4b3e      	ldr	r3, [pc, #248]	; (8007ad8 <xTaskIncrementTick+0x158>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	4a3d      	ldr	r2, [pc, #244]	; (8007ad8 <xTaskIncrementTick+0x158>)
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	f000 fadb 	bl	8007fa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079ea:	4b3c      	ldr	r3, [pc, #240]	; (8007adc <xTaskIncrementTick+0x15c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d349      	bcc.n	8007a88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079f4:	4b36      	ldr	r3, [pc, #216]	; (8007ad0 <xTaskIncrementTick+0x150>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d104      	bne.n	8007a08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fe:	4b37      	ldr	r3, [pc, #220]	; (8007adc <xTaskIncrementTick+0x15c>)
 8007a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a04:	601a      	str	r2, [r3, #0]
					break;
 8007a06:	e03f      	b.n	8007a88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a08:	4b31      	ldr	r3, [pc, #196]	; (8007ad0 <xTaskIncrementTick+0x150>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d203      	bcs.n	8007a28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a20:	4a2e      	ldr	r2, [pc, #184]	; (8007adc <xTaskIncrementTick+0x15c>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a26:	e02f      	b.n	8007a88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe ff79 	bl	8006924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	3318      	adds	r3, #24
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe ff70 	bl	8006924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a48:	4b25      	ldr	r3, [pc, #148]	; (8007ae0 <xTaskIncrementTick+0x160>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d903      	bls.n	8007a58 <xTaskIncrementTick+0xd8>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	4a22      	ldr	r2, [pc, #136]	; (8007ae0 <xTaskIncrementTick+0x160>)
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4a1f      	ldr	r2, [pc, #124]	; (8007ae4 <xTaskIncrementTick+0x164>)
 8007a66:	441a      	add	r2, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	f7fe fefb 	bl	800686a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a78:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <xTaskIncrementTick+0x168>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d3b8      	bcc.n	80079f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a82:	2301      	movs	r3, #1
 8007a84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a86:	e7b5      	b.n	80079f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a88:	4b17      	ldr	r3, [pc, #92]	; (8007ae8 <xTaskIncrementTick+0x168>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8e:	4915      	ldr	r1, [pc, #84]	; (8007ae4 <xTaskIncrementTick+0x164>)
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	440b      	add	r3, r1
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d901      	bls.n	8007aa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007aa4:	4b11      	ldr	r3, [pc, #68]	; (8007aec <xTaskIncrementTick+0x16c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d007      	beq.n	8007abc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007aac:	2301      	movs	r3, #1
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	e004      	b.n	8007abc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ab2:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <xTaskIncrementTick+0x170>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	4a0d      	ldr	r2, [pc, #52]	; (8007af0 <xTaskIncrementTick+0x170>)
 8007aba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007abc:	697b      	ldr	r3, [r7, #20]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000d78 	.word	0x20000d78
 8007acc:	20000d54 	.word	0x20000d54
 8007ad0:	20000d08 	.word	0x20000d08
 8007ad4:	20000d0c 	.word	0x20000d0c
 8007ad8:	20000d68 	.word	0x20000d68
 8007adc:	20000d70 	.word	0x20000d70
 8007ae0:	20000d58 	.word	0x20000d58
 8007ae4:	20000880 	.word	0x20000880
 8007ae8:	2000087c 	.word	0x2000087c
 8007aec:	20000d64 	.word	0x20000d64
 8007af0:	20000d60 	.word	0x20000d60

08007af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007afa:	4b2a      	ldr	r3, [pc, #168]	; (8007ba4 <vTaskSwitchContext+0xb0>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b02:	4b29      	ldr	r3, [pc, #164]	; (8007ba8 <vTaskSwitchContext+0xb4>)
 8007b04:	2201      	movs	r2, #1
 8007b06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b08:	e046      	b.n	8007b98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007b0a:	4b27      	ldr	r3, [pc, #156]	; (8007ba8 <vTaskSwitchContext+0xb4>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b10:	4b26      	ldr	r3, [pc, #152]	; (8007bac <vTaskSwitchContext+0xb8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	e010      	b.n	8007b3a <vTaskSwitchContext+0x46>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <vTaskSwitchContext+0x3e>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	491d      	ldr	r1, [pc, #116]	; (8007bb0 <vTaskSwitchContext+0xbc>)
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	440b      	add	r3, r1
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0e4      	beq.n	8007b18 <vTaskSwitchContext+0x24>
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <vTaskSwitchContext+0xbc>)
 8007b5a:	4413      	add	r3, r2
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	605a      	str	r2, [r3, #4]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d104      	bne.n	8007b7e <vTaskSwitchContext+0x8a>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	605a      	str	r2, [r3, #4]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	4a0b      	ldr	r2, [pc, #44]	; (8007bb4 <vTaskSwitchContext+0xc0>)
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	4a08      	ldr	r2, [pc, #32]	; (8007bac <vTaskSwitchContext+0xb8>)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b8e:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <vTaskSwitchContext+0xc0>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3354      	adds	r3, #84	; 0x54
 8007b94:	4a08      	ldr	r2, [pc, #32]	; (8007bb8 <vTaskSwitchContext+0xc4>)
 8007b96:	6013      	str	r3, [r2, #0]
}
 8007b98:	bf00      	nop
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	20000d78 	.word	0x20000d78
 8007ba8:	20000d64 	.word	0x20000d64
 8007bac:	20000d58 	.word	0x20000d58
 8007bb0:	20000880 	.word	0x20000880
 8007bb4:	2000087c 	.word	0x2000087c
 8007bb8:	20000030 	.word	0x20000030

08007bbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60fb      	str	r3, [r7, #12]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007be2:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <vTaskPlaceOnEventList+0x44>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3318      	adds	r3, #24
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fe fe61 	bl	80068b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	6838      	ldr	r0, [r7, #0]
 8007bf4:	f000 fc82 	bl	80084fc <prvAddCurrentTaskToDelayedList>
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	2000087c 	.word	0x2000087c

08007c04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	617b      	str	r3, [r7, #20]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3318      	adds	r3, #24
 8007c32:	4619      	mov	r1, r3
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7fe fe18 	bl	800686a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	68b8      	ldr	r0, [r7, #8]
 8007c4a:	f000 fc57 	bl	80084fc <prvAddCurrentTaskToDelayedList>
	}
 8007c4e:	bf00      	nop
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	2000087c 	.word	0x2000087c

08007c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60fb      	str	r3, [r7, #12]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	3318      	adds	r3, #24
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe fe49 	bl	8006924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c92:	4b1e      	ldr	r3, [pc, #120]	; (8007d0c <xTaskRemoveFromEventList+0xb0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d11d      	bne.n	8007cd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe fe40 	bl	8006924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca8:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <xTaskRemoveFromEventList+0xb4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d903      	bls.n	8007cb8 <xTaskRemoveFromEventList+0x5c>
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	4a16      	ldr	r2, [pc, #88]	; (8007d10 <xTaskRemoveFromEventList+0xb4>)
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <xTaskRemoveFromEventList+0xb8>)
 8007cc6:	441a      	add	r2, r3
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f7fe fdcb 	bl	800686a <vListInsertEnd>
 8007cd4:	e005      	b.n	8007ce2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3318      	adds	r3, #24
 8007cda:	4619      	mov	r1, r3
 8007cdc:	480e      	ldr	r0, [pc, #56]	; (8007d18 <xTaskRemoveFromEventList+0xbc>)
 8007cde:	f7fe fdc4 	bl	800686a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	; (8007d1c <xTaskRemoveFromEventList+0xc0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d905      	bls.n	8007cfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <xTaskRemoveFromEventList+0xc4>)
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	e001      	b.n	8007d00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d00:	697b      	ldr	r3, [r7, #20]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000d78 	.word	0x20000d78
 8007d10:	20000d58 	.word	0x20000d58
 8007d14:	20000880 	.word	0x20000880
 8007d18:	20000d10 	.word	0x20000d10
 8007d1c:	2000087c 	.word	0x2000087c
 8007d20:	20000d64 	.word	0x20000d64

08007d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <vTaskInternalSetTimeOutState+0x24>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <vTaskInternalSetTimeOutState+0x28>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	605a      	str	r2, [r3, #4]
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	20000d68 	.word	0x20000d68
 8007d4c:	20000d54 	.word	0x20000d54

08007d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	613b      	str	r3, [r7, #16]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60fb      	str	r3, [r7, #12]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d92:	f001 f87f 	bl	8008e94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d96:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <xTaskCheckForTimeOut+0xbc>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dae:	d102      	bne.n	8007db6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61fb      	str	r3, [r7, #28]
 8007db4:	e023      	b.n	8007dfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <xTaskCheckForTimeOut+0xc0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d007      	beq.n	8007dd2 <xTaskCheckForTimeOut+0x82>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d302      	bcc.n	8007dd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	e015      	b.n	8007dfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d20b      	bcs.n	8007df4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff ff9b 	bl	8007d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	e004      	b.n	8007dfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dfe:	f001 f879 	bl	8008ef4 <vPortExitCritical>

	return xReturn;
 8007e02:	69fb      	ldr	r3, [r7, #28]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20000d54 	.word	0x20000d54
 8007e10:	20000d68 	.word	0x20000d68

08007e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e18:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <vTaskMissedYield+0x14>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
}
 8007e1e:	bf00      	nop
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	20000d64 	.word	0x20000d64

08007e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e34:	f000 f852 	bl	8007edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <prvIdleTask+0x28>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d9f9      	bls.n	8007e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <prvIdleTask+0x2c>)
 8007e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e50:	e7f0      	b.n	8007e34 <prvIdleTask+0x8>
 8007e52:	bf00      	nop
 8007e54:	20000880 	.word	0x20000880
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e62:	2300      	movs	r3, #0
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	e00c      	b.n	8007e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4a12      	ldr	r2, [pc, #72]	; (8007ebc <prvInitialiseTaskLists+0x60>)
 8007e74:	4413      	add	r3, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fcca 	bl	8006810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	607b      	str	r3, [r7, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b37      	cmp	r3, #55	; 0x37
 8007e86:	d9ef      	bls.n	8007e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e88:	480d      	ldr	r0, [pc, #52]	; (8007ec0 <prvInitialiseTaskLists+0x64>)
 8007e8a:	f7fe fcc1 	bl	8006810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e8e:	480d      	ldr	r0, [pc, #52]	; (8007ec4 <prvInitialiseTaskLists+0x68>)
 8007e90:	f7fe fcbe 	bl	8006810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e94:	480c      	ldr	r0, [pc, #48]	; (8007ec8 <prvInitialiseTaskLists+0x6c>)
 8007e96:	f7fe fcbb 	bl	8006810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e9a:	480c      	ldr	r0, [pc, #48]	; (8007ecc <prvInitialiseTaskLists+0x70>)
 8007e9c:	f7fe fcb8 	bl	8006810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ea0:	480b      	ldr	r0, [pc, #44]	; (8007ed0 <prvInitialiseTaskLists+0x74>)
 8007ea2:	f7fe fcb5 	bl	8006810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <prvInitialiseTaskLists+0x78>)
 8007ea8:	4a05      	ldr	r2, [pc, #20]	; (8007ec0 <prvInitialiseTaskLists+0x64>)
 8007eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <prvInitialiseTaskLists+0x7c>)
 8007eae:	4a05      	ldr	r2, [pc, #20]	; (8007ec4 <prvInitialiseTaskLists+0x68>)
 8007eb0:	601a      	str	r2, [r3, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20000880 	.word	0x20000880
 8007ec0:	20000ce0 	.word	0x20000ce0
 8007ec4:	20000cf4 	.word	0x20000cf4
 8007ec8:	20000d10 	.word	0x20000d10
 8007ecc:	20000d24 	.word	0x20000d24
 8007ed0:	20000d3c 	.word	0x20000d3c
 8007ed4:	20000d08 	.word	0x20000d08
 8007ed8:	20000d0c 	.word	0x20000d0c

08007edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ee2:	e019      	b.n	8007f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ee4:	f000 ffd6 	bl	8008e94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee8:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <prvCheckTasksWaitingTermination+0x50>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fd15 	bl	8006924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007efa:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <prvCheckTasksWaitingTermination+0x54>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4a0b      	ldr	r2, [pc, #44]	; (8007f30 <prvCheckTasksWaitingTermination+0x54>)
 8007f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <prvCheckTasksWaitingTermination+0x58>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	4a0a      	ldr	r2, [pc, #40]	; (8007f34 <prvCheckTasksWaitingTermination+0x58>)
 8007f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f0e:	f000 fff1 	bl	8008ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f810 	bl	8007f38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f18:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <prvCheckTasksWaitingTermination+0x58>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e1      	bne.n	8007ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000d24 	.word	0x20000d24
 8007f30:	20000d50 	.word	0x20000d50
 8007f34:	20000d38 	.word	0x20000d38

08007f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3354      	adds	r3, #84	; 0x54
 8007f44:	4618      	mov	r0, r3
 8007f46:	f001 fc6b 	bl	8009820 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d108      	bne.n	8007f66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f001 f989 	bl	8009270 <vPortFree>
				vPortFree( pxTCB );
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 f986 	bl	8009270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f64:	e018      	b.n	8007f98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d103      	bne.n	8007f78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 f97d 	bl	8009270 <vPortFree>
	}
 8007f76:	e00f      	b.n	8007f98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d00a      	beq.n	8007f98 <prvDeleteTCB+0x60>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60fb      	str	r3, [r7, #12]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <prvDeleteTCB+0x5e>
	}
 8007f98:	bf00      	nop
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fa6:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <prvResetNextTaskUnblockTime+0x38>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d104      	bne.n	8007fba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <prvResetNextTaskUnblockTime+0x3c>)
 8007fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fb8:	e008      	b.n	8007fcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fba:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <prvResetNextTaskUnblockTime+0x38>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	4a04      	ldr	r2, [pc, #16]	; (8007fdc <prvResetNextTaskUnblockTime+0x3c>)
 8007fca:	6013      	str	r3, [r2, #0]
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000d08 	.word	0x20000d08
 8007fdc:	20000d70 	.word	0x20000d70

08007fe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <xTaskGetSchedulerState+0x34>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	607b      	str	r3, [r7, #4]
 8007ff2:	e008      	b.n	8008006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ff4:	4b08      	ldr	r3, [pc, #32]	; (8008018 <xTaskGetSchedulerState+0x38>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	607b      	str	r3, [r7, #4]
 8008000:	e001      	b.n	8008006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008002:	2300      	movs	r3, #0
 8008004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008006:	687b      	ldr	r3, [r7, #4]
	}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	20000d5c 	.word	0x20000d5c
 8008018:	20000d78 	.word	0x20000d78

0800801c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d056      	beq.n	80080e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008032:	4b2e      	ldr	r3, [pc, #184]	; (80080ec <xTaskPriorityDisinherit+0xd0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	429a      	cmp	r2, r3
 800803a:	d00a      	beq.n	8008052 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	60fb      	str	r3, [r7, #12]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	60bb      	str	r3, [r7, #8]
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008074:	1e5a      	subs	r2, r3, #1
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008082:	429a      	cmp	r2, r3
 8008084:	d02c      	beq.n	80080e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808a:	2b00      	cmp	r3, #0
 800808c:	d128      	bne.n	80080e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	3304      	adds	r3, #4
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fc46 	bl	8006924 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <xTaskPriorityDisinherit+0xd4>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d903      	bls.n	80080c0 <xTaskPriorityDisinherit+0xa4>
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	4a0c      	ldr	r2, [pc, #48]	; (80080f0 <xTaskPriorityDisinherit+0xd4>)
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4a09      	ldr	r2, [pc, #36]	; (80080f4 <xTaskPriorityDisinherit+0xd8>)
 80080ce:	441a      	add	r2, r3
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4610      	mov	r0, r2
 80080d8:	f7fe fbc7 	bl	800686a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080dc:	2301      	movs	r3, #1
 80080de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080e0:	697b      	ldr	r3, [r7, #20]
	}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	2000087c 	.word	0x2000087c
 80080f0:	20000d58 	.word	0x20000d58
 80080f4:	20000880 	.word	0x20000880

080080f8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008106:	f000 fec5 	bl	8008e94 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800810a:	4b29      	ldr	r3, [pc, #164]	; (80081b0 <xTaskNotifyWait+0xb8>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d01c      	beq.n	8008152 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008118:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <xTaskNotifyWait+0xb8>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	43d2      	mvns	r2, r2
 8008124:	400a      	ands	r2, r1
 8008126:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800812a:	4b21      	ldr	r3, [pc, #132]	; (80081b0 <xTaskNotifyWait+0xb8>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800813a:	2101      	movs	r1, #1
 800813c:	6838      	ldr	r0, [r7, #0]
 800813e:	f000 f9dd 	bl	80084fc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008142:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <xTaskNotifyWait+0xbc>)
 8008144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008152:	f000 fecf 	bl	8008ef4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008156:	f000 fe9d 	bl	8008e94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008160:	4b13      	ldr	r3, [pc, #76]	; (80081b0 <xTaskNotifyWait+0xb8>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800816c:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <xTaskNotifyWait+0xb8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d002      	beq.n	8008180 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800817a:	2300      	movs	r3, #0
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	e00a      	b.n	8008196 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008180:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <xTaskNotifyWait+0xb8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	43d2      	mvns	r2, r2
 800818c:	400a      	ands	r2, r1
 800818e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8008192:	2301      	movs	r3, #1
 8008194:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008196:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <xTaskNotifyWait+0xb8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80081a0:	f000 fea8 	bl	8008ef4 <vPortExitCritical>

		return xReturn;
 80081a4:	697b      	ldr	r3, [r7, #20]
	}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	2000087c 	.word	0x2000087c
 80081b4:	e000ed04 	.word	0xe000ed04

080081b8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	4613      	mov	r3, r2
 80081c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80081c8:	2301      	movs	r3, #1
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <xTaskGenericNotify+0x30>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	61bb      	str	r3, [r7, #24]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80081ec:	f000 fe52 	bl	8008e94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008206:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	2b04      	cmp	r3, #4
 8008214:	d82d      	bhi.n	8008272 <xTaskGenericNotify+0xba>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <xTaskGenericNotify+0x64>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008295 	.word	0x08008295
 8008220:	08008231 	.word	0x08008231
 8008224:	08008243 	.word	0x08008243
 8008228:	08008253 	.word	0x08008253
 800822c:	0800825d 	.word	0x0800825d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	431a      	orrs	r2, r3
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008240:	e02b      	b.n	800829a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008250:	e023      	b.n	800829a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800825a:	e01e      	b.n	800829a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800825c:	7ffb      	ldrb	r3, [r7, #31]
 800825e:	2b02      	cmp	r3, #2
 8008260:	d004      	beq.n	800826c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800826a:	e016      	b.n	800829a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800826c:	2300      	movs	r3, #0
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008270:	e013      	b.n	800829a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800827c:	d00c      	beq.n	8008298 <xTaskGenericNotify+0xe0>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	617b      	str	r3, [r7, #20]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <xTaskGenericNotify+0xda>
					break;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <xTaskGenericNotify+0xe2>

					break;
 8008298:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800829a:	7ffb      	ldrb	r3, [r7, #31]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d13a      	bne.n	8008316 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe fb3d 	bl	8006924 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ae:	4b1d      	ldr	r3, [pc, #116]	; (8008324 <xTaskGenericNotify+0x16c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d903      	bls.n	80082be <xTaskGenericNotify+0x106>
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	4a1a      	ldr	r2, [pc, #104]	; (8008324 <xTaskGenericNotify+0x16c>)
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4a17      	ldr	r2, [pc, #92]	; (8008328 <xTaskGenericNotify+0x170>)
 80082cc:	441a      	add	r2, r3
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fe fac8 	bl	800686a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <xTaskGenericNotify+0x140>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	613b      	str	r3, [r7, #16]
}
 80082f4:	bf00      	nop
 80082f6:	e7fe      	b.n	80082f6 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4b0b      	ldr	r3, [pc, #44]	; (800832c <xTaskGenericNotify+0x174>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	429a      	cmp	r2, r3
 8008304:	d907      	bls.n	8008316 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008306:	4b0a      	ldr	r3, [pc, #40]	; (8008330 <xTaskGenericNotify+0x178>)
 8008308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008316:	f000 fded 	bl	8008ef4 <vPortExitCritical>

		return xReturn;
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800831c:	4618      	mov	r0, r3
 800831e:	3728      	adds	r7, #40	; 0x28
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20000d58 	.word	0x20000d58
 8008328:	20000880 	.word	0x20000880
 800832c:	2000087c 	.word	0x2000087c
 8008330:	e000ed04 	.word	0xe000ed04

08008334 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08e      	sub	sp, #56	; 0x38
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	4613      	mov	r3, r2
 8008342:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008344:	2301      	movs	r3, #1
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10a      	bne.n	8008364 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008360:	bf00      	nop
 8008362:	e7fe      	b.n	8008362 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008364:	f000 fe78 	bl	8009058 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800836c:	f3ef 8211 	mrs	r2, BASEPRI
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	623a      	str	r2, [r7, #32]
 8008382:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008384:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800839e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	2202      	movs	r2, #2
 80083a6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	d82f      	bhi.n	8008410 <xTaskGenericNotifyFromISR+0xdc>
 80083b0:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <xTaskGenericNotifyFromISR+0x84>)
 80083b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b6:	bf00      	nop
 80083b8:	08008433 	.word	0x08008433
 80083bc:	080083cd 	.word	0x080083cd
 80083c0:	080083df 	.word	0x080083df
 80083c4:	080083ef 	.word	0x080083ef
 80083c8:	080083f9 	.word	0x080083f9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	431a      	orrs	r2, r3
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80083dc:	e02c      	b.n	8008438 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80083ec:	e024      	b.n	8008438 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80083f6:	e01f      	b.n	8008438 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80083f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d004      	beq.n	800840a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008408:	e016      	b.n	8008438 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800840a:	2300      	movs	r3, #0
 800840c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800840e:	e013      	b.n	8008438 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800841a:	d00c      	beq.n	8008436 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	61bb      	str	r3, [r7, #24]
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8008432:	bf00      	nop
 8008434:	e000      	b.n	8008438 <xTaskGenericNotifyFromISR+0x104>
					break;
 8008436:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008438:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800843c:	2b01      	cmp	r3, #1
 800843e:	d146      	bne.n	80084ce <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00a      	beq.n	800845e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	617b      	str	r3, [r7, #20]
}
 800845a:	bf00      	nop
 800845c:	e7fe      	b.n	800845c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800845e:	4b21      	ldr	r3, [pc, #132]	; (80084e4 <xTaskGenericNotifyFromISR+0x1b0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d11d      	bne.n	80084a2 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	3304      	adds	r3, #4
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe fa5a 	bl	8006924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <xTaskGenericNotifyFromISR+0x1b4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d903      	bls.n	8008484 <xTaskGenericNotifyFromISR+0x150>
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	4a19      	ldr	r2, [pc, #100]	; (80084e8 <xTaskGenericNotifyFromISR+0x1b4>)
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4a16      	ldr	r2, [pc, #88]	; (80084ec <xTaskGenericNotifyFromISR+0x1b8>)
 8008492:	441a      	add	r2, r3
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f7fe f9e5 	bl	800686a <vListInsertEnd>
 80084a0:	e005      	b.n	80084ae <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	3318      	adds	r3, #24
 80084a6:	4619      	mov	r1, r3
 80084a8:	4811      	ldr	r0, [pc, #68]	; (80084f0 <xTaskGenericNotifyFromISR+0x1bc>)
 80084aa:	f7fe f9de 	bl	800686a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b2:	4b10      	ldr	r3, [pc, #64]	; (80084f4 <xTaskGenericNotifyFromISR+0x1c0>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d908      	bls.n	80084ce <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80084bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80084c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c4:	2201      	movs	r2, #1
 80084c6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80084c8:	4b0b      	ldr	r3, [pc, #44]	; (80084f8 <xTaskGenericNotifyFromISR+0x1c4>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f383 8811 	msr	BASEPRI, r3
}
 80084d8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80084da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80084dc:	4618      	mov	r0, r3
 80084de:	3738      	adds	r7, #56	; 0x38
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000d78 	.word	0x20000d78
 80084e8:	20000d58 	.word	0x20000d58
 80084ec:	20000880 	.word	0x20000880
 80084f0:	20000d10 	.word	0x20000d10
 80084f4:	2000087c 	.word	0x2000087c
 80084f8:	20000d64 	.word	0x20000d64

080084fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008506:	4b21      	ldr	r3, [pc, #132]	; (800858c <prvAddCurrentTaskToDelayedList+0x90>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800850c:	4b20      	ldr	r3, [pc, #128]	; (8008590 <prvAddCurrentTaskToDelayedList+0x94>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3304      	adds	r3, #4
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe fa06 	bl	8006924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800851e:	d10a      	bne.n	8008536 <prvAddCurrentTaskToDelayedList+0x3a>
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d007      	beq.n	8008536 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008526:	4b1a      	ldr	r3, [pc, #104]	; (8008590 <prvAddCurrentTaskToDelayedList+0x94>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3304      	adds	r3, #4
 800852c:	4619      	mov	r1, r3
 800852e:	4819      	ldr	r0, [pc, #100]	; (8008594 <prvAddCurrentTaskToDelayedList+0x98>)
 8008530:	f7fe f99b 	bl	800686a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008534:	e026      	b.n	8008584 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4413      	add	r3, r2
 800853c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800853e:	4b14      	ldr	r3, [pc, #80]	; (8008590 <prvAddCurrentTaskToDelayedList+0x94>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	429a      	cmp	r2, r3
 800854c:	d209      	bcs.n	8008562 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800854e:	4b12      	ldr	r3, [pc, #72]	; (8008598 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4b0f      	ldr	r3, [pc, #60]	; (8008590 <prvAddCurrentTaskToDelayedList+0x94>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3304      	adds	r3, #4
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f7fe f9a9 	bl	80068b2 <vListInsert>
}
 8008560:	e010      	b.n	8008584 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008562:	4b0e      	ldr	r3, [pc, #56]	; (800859c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <prvAddCurrentTaskToDelayedList+0x94>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3304      	adds	r3, #4
 800856c:	4619      	mov	r1, r3
 800856e:	4610      	mov	r0, r2
 8008570:	f7fe f99f 	bl	80068b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008574:	4b0a      	ldr	r3, [pc, #40]	; (80085a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	429a      	cmp	r2, r3
 800857c:	d202      	bcs.n	8008584 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800857e:	4a08      	ldr	r2, [pc, #32]	; (80085a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	6013      	str	r3, [r2, #0]
}
 8008584:	bf00      	nop
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	20000d54 	.word	0x20000d54
 8008590:	2000087c 	.word	0x2000087c
 8008594:	20000d3c 	.word	0x20000d3c
 8008598:	20000d0c 	.word	0x20000d0c
 800859c:	20000d08 	.word	0x20000d08
 80085a0:	20000d70 	.word	0x20000d70

080085a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08a      	sub	sp, #40	; 0x28
 80085a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80085ae:	f000 fb07 	bl	8008bc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80085b2:	4b1c      	ldr	r3, [pc, #112]	; (8008624 <xTimerCreateTimerTask+0x80>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d021      	beq.n	80085fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80085c2:	1d3a      	adds	r2, r7, #4
 80085c4:	f107 0108 	add.w	r1, r7, #8
 80085c8:	f107 030c 	add.w	r3, r7, #12
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe f905 	bl	80067dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	9202      	str	r2, [sp, #8]
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	2302      	movs	r3, #2
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2300      	movs	r3, #0
 80085e2:	460a      	mov	r2, r1
 80085e4:	4910      	ldr	r1, [pc, #64]	; (8008628 <xTimerCreateTimerTask+0x84>)
 80085e6:	4811      	ldr	r0, [pc, #68]	; (800862c <xTimerCreateTimerTask+0x88>)
 80085e8:	f7fe feb2 	bl	8007350 <xTaskCreateStatic>
 80085ec:	4603      	mov	r3, r0
 80085ee:	4a10      	ldr	r2, [pc, #64]	; (8008630 <xTimerCreateTimerTask+0x8c>)
 80085f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085f2:	4b0f      	ldr	r3, [pc, #60]	; (8008630 <xTimerCreateTimerTask+0x8c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085fa:	2301      	movs	r3, #1
 80085fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	613b      	str	r3, [r7, #16]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800861a:	697b      	ldr	r3, [r7, #20]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20000dac 	.word	0x20000dac
 8008628:	0800a700 	.word	0x0800a700
 800862c:	08008769 	.word	0x08008769
 8008630:	20000db0 	.word	0x20000db0

08008634 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	; 0x28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008642:	2300      	movs	r3, #0
 8008644:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <xTimerGenericCommand+0x2e>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	623b      	str	r3, [r7, #32]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008662:	4b1a      	ldr	r3, [pc, #104]	; (80086cc <xTimerGenericCommand+0x98>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d02a      	beq.n	80086c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b05      	cmp	r3, #5
 800867a:	dc18      	bgt.n	80086ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800867c:	f7ff fcb0 	bl	8007fe0 <xTaskGetSchedulerState>
 8008680:	4603      	mov	r3, r0
 8008682:	2b02      	cmp	r3, #2
 8008684:	d109      	bne.n	800869a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008686:	4b11      	ldr	r3, [pc, #68]	; (80086cc <xTimerGenericCommand+0x98>)
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	f107 0110 	add.w	r1, r7, #16
 800868e:	2300      	movs	r3, #0
 8008690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008692:	f7fe fa75 	bl	8006b80 <xQueueGenericSend>
 8008696:	6278      	str	r0, [r7, #36]	; 0x24
 8008698:	e012      	b.n	80086c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800869a:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <xTimerGenericCommand+0x98>)
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	f107 0110 	add.w	r1, r7, #16
 80086a2:	2300      	movs	r3, #0
 80086a4:	2200      	movs	r2, #0
 80086a6:	f7fe fa6b 	bl	8006b80 <xQueueGenericSend>
 80086aa:	6278      	str	r0, [r7, #36]	; 0x24
 80086ac:	e008      	b.n	80086c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80086ae:	4b07      	ldr	r3, [pc, #28]	; (80086cc <xTimerGenericCommand+0x98>)
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	f107 0110 	add.w	r1, r7, #16
 80086b6:	2300      	movs	r3, #0
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	f7fe fb5f 	bl	8006d7c <xQueueGenericSendFromISR>
 80086be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3728      	adds	r7, #40	; 0x28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000dac 	.word	0x20000dac

080086d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086da:	4b22      	ldr	r3, [pc, #136]	; (8008764 <prvProcessExpiredTimer+0x94>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	3304      	adds	r3, #4
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe f91b 	bl	8006924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d022      	beq.n	8008742 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	699a      	ldr	r2, [r3, #24]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	18d1      	adds	r1, r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	6978      	ldr	r0, [r7, #20]
 800870a:	f000 f8d1 	bl	80088b0 <prvInsertTimerInActiveList>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01f      	beq.n	8008754 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008714:	2300      	movs	r3, #0
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	2100      	movs	r1, #0
 800871e:	6978      	ldr	r0, [r7, #20]
 8008720:	f7ff ff88 	bl	8008634 <xTimerGenericCommand>
 8008724:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d113      	bne.n	8008754 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60fb      	str	r3, [r7, #12]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008748:	f023 0301 	bic.w	r3, r3, #1
 800874c:	b2da      	uxtb	r2, r3
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	6978      	ldr	r0, [r7, #20]
 800875a:	4798      	blx	r3
}
 800875c:	bf00      	nop
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	20000da4 	.word	0x20000da4

08008768 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008770:	f107 0308 	add.w	r3, r7, #8
 8008774:	4618      	mov	r0, r3
 8008776:	f000 f857 	bl	8008828 <prvGetNextExpireTime>
 800877a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	4619      	mov	r1, r3
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 f803 	bl	800878c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008786:	f000 f8d5 	bl	8008934 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800878a:	e7f1      	b.n	8008770 <prvTimerTask+0x8>

0800878c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008796:	f7ff f837 	bl	8007808 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800879a:	f107 0308 	add.w	r3, r7, #8
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f866 	bl	8008870 <prvSampleTimeNow>
 80087a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d130      	bne.n	800880e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10a      	bne.n	80087c8 <prvProcessTimerOrBlockTask+0x3c>
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d806      	bhi.n	80087c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80087ba:	f7ff f833 	bl	8007824 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80087be:	68f9      	ldr	r1, [r7, #12]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff ff85 	bl	80086d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80087c6:	e024      	b.n	8008812 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d008      	beq.n	80087e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80087ce:	4b13      	ldr	r3, [pc, #76]	; (800881c <prvProcessTimerOrBlockTask+0x90>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <prvProcessTimerOrBlockTask+0x50>
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <prvProcessTimerOrBlockTask+0x52>
 80087dc:	2300      	movs	r3, #0
 80087de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087e0:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <prvProcessTimerOrBlockTask+0x94>)
 80087e2:	6818      	ldr	r0, [r3, #0]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	4619      	mov	r1, r3
 80087ee:	f7fe fd7b 	bl	80072e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80087f2:	f7ff f817 	bl	8007824 <xTaskResumeAll>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087fc:	4b09      	ldr	r3, [pc, #36]	; (8008824 <prvProcessTimerOrBlockTask+0x98>)
 80087fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	f3bf 8f6f 	isb	sy
}
 800880c:	e001      	b.n	8008812 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800880e:	f7ff f809 	bl	8007824 <xTaskResumeAll>
}
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000da8 	.word	0x20000da8
 8008820:	20000dac 	.word	0x20000dac
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008830:	4b0e      	ldr	r3, [pc, #56]	; (800886c <prvGetNextExpireTime+0x44>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <prvGetNextExpireTime+0x16>
 800883a:	2201      	movs	r2, #1
 800883c:	e000      	b.n	8008840 <prvGetNextExpireTime+0x18>
 800883e:	2200      	movs	r2, #0
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d105      	bne.n	8008858 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800884c:	4b07      	ldr	r3, [pc, #28]	; (800886c <prvGetNextExpireTime+0x44>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	e001      	b.n	800885c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800885c:	68fb      	ldr	r3, [r7, #12]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	20000da4 	.word	0x20000da4

08008870 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008878:	f7ff f872 	bl	8007960 <xTaskGetTickCount>
 800887c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800887e:	4b0b      	ldr	r3, [pc, #44]	; (80088ac <prvSampleTimeNow+0x3c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	429a      	cmp	r2, r3
 8008886:	d205      	bcs.n	8008894 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008888:	f000 f936 	bl	8008af8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	e002      	b.n	800889a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800889a:	4a04      	ldr	r2, [pc, #16]	; (80088ac <prvSampleTimeNow+0x3c>)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80088a0:	68fb      	ldr	r3, [r7, #12]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20000db4 	.word	0x20000db4

080088b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d812      	bhi.n	80088fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	1ad2      	subs	r2, r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d302      	bcc.n	80088ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80088e4:	2301      	movs	r3, #1
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	e01b      	b.n	8008922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088ea:	4b10      	ldr	r3, [pc, #64]	; (800892c <prvInsertTimerInActiveList+0x7c>)
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3304      	adds	r3, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f7fd ffdc 	bl	80068b2 <vListInsert>
 80088fa:	e012      	b.n	8008922 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d206      	bcs.n	8008912 <prvInsertTimerInActiveList+0x62>
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d302      	bcc.n	8008912 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800890c:	2301      	movs	r3, #1
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e007      	b.n	8008922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008912:	4b07      	ldr	r3, [pc, #28]	; (8008930 <prvInsertTimerInActiveList+0x80>)
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3304      	adds	r3, #4
 800891a:	4619      	mov	r1, r3
 800891c:	4610      	mov	r0, r2
 800891e:	f7fd ffc8 	bl	80068b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008922:	697b      	ldr	r3, [r7, #20]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	20000da8 	.word	0x20000da8
 8008930:	20000da4 	.word	0x20000da4

08008934 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b08e      	sub	sp, #56	; 0x38
 8008938:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800893a:	e0ca      	b.n	8008ad2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	da18      	bge.n	8008974 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008942:	1d3b      	adds	r3, r7, #4
 8008944:	3304      	adds	r3, #4
 8008946:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10a      	bne.n	8008964 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	61fb      	str	r3, [r7, #28]
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800896a:	6850      	ldr	r0, [r2, #4]
 800896c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800896e:	6892      	ldr	r2, [r2, #8]
 8008970:	4611      	mov	r1, r2
 8008972:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f2c0 80aa 	blt.w	8008ad0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d004      	beq.n	8008992 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	3304      	adds	r3, #4
 800898c:	4618      	mov	r0, r3
 800898e:	f7fd ffc9 	bl	8006924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008992:	463b      	mov	r3, r7
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff ff6b 	bl	8008870 <prvSampleTimeNow>
 800899a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b09      	cmp	r3, #9
 80089a0:	f200 8097 	bhi.w	8008ad2 <prvProcessReceivedCommands+0x19e>
 80089a4:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <prvProcessReceivedCommands+0x78>)
 80089a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089aa:	bf00      	nop
 80089ac:	080089d5 	.word	0x080089d5
 80089b0:	080089d5 	.word	0x080089d5
 80089b4:	080089d5 	.word	0x080089d5
 80089b8:	08008a49 	.word	0x08008a49
 80089bc:	08008a5d 	.word	0x08008a5d
 80089c0:	08008aa7 	.word	0x08008aa7
 80089c4:	080089d5 	.word	0x080089d5
 80089c8:	080089d5 	.word	0x080089d5
 80089cc:	08008a49 	.word	0x08008a49
 80089d0:	08008a5d 	.word	0x08008a5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089da:	f043 0301 	orr.w	r3, r3, #1
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	18d1      	adds	r1, r2, r3
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f4:	f7ff ff5c 	bl	80088b0 <prvInsertTimerInActiveList>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d069      	beq.n	8008ad2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d05e      	beq.n	8008ad2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	441a      	add	r2, r3
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	2300      	movs	r3, #0
 8008a22:	2100      	movs	r1, #0
 8008a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a26:	f7ff fe05 	bl	8008634 <xTimerGenericCommand>
 8008a2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d14f      	bne.n	8008ad2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	61bb      	str	r3, [r7, #24]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a4e:	f023 0301 	bic.w	r3, r3, #1
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008a5a:	e03a      	b.n	8008ad2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a62:	f043 0301 	orr.w	r3, r3, #1
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	617b      	str	r3, [r7, #20]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	18d1      	adds	r1, r2, r3
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aa0:	f7ff ff06 	bl	80088b0 <prvInsertTimerInActiveList>
					break;
 8008aa4:	e015      	b.n	8008ad2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008aac:	f003 0302 	and.w	r3, r3, #2
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d103      	bne.n	8008abc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ab6:	f000 fbdb 	bl	8009270 <vPortFree>
 8008aba:	e00a      	b.n	8008ad2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ac2:	f023 0301 	bic.w	r3, r3, #1
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ace:	e000      	b.n	8008ad2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008ad0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ad2:	4b08      	ldr	r3, [pc, #32]	; (8008af4 <prvProcessReceivedCommands+0x1c0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	1d39      	adds	r1, r7, #4
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe f9ea 	bl	8006eb4 <xQueueReceive>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f47f af2a 	bne.w	800893c <prvProcessReceivedCommands+0x8>
	}
}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	3730      	adds	r7, #48	; 0x30
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20000dac 	.word	0x20000dac

08008af8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008afe:	e048      	b.n	8008b92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b00:	4b2d      	ldr	r3, [pc, #180]	; (8008bb8 <prvSwitchTimerLists+0xc0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b0a:	4b2b      	ldr	r3, [pc, #172]	; (8008bb8 <prvSwitchTimerLists+0xc0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fd ff03 	bl	8006924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d02e      	beq.n	8008b92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d90e      	bls.n	8008b64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b52:	4b19      	ldr	r3, [pc, #100]	; (8008bb8 <prvSwitchTimerLists+0xc0>)
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	f7fd fea8 	bl	80068b2 <vListInsert>
 8008b62:	e016      	b.n	8008b92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b64:	2300      	movs	r3, #0
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff fd60 	bl	8008634 <xTimerGenericCommand>
 8008b74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10a      	bne.n	8008b92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	603b      	str	r3, [r7, #0]
}
 8008b8e:	bf00      	nop
 8008b90:	e7fe      	b.n	8008b90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b92:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <prvSwitchTimerLists+0xc0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1b1      	bne.n	8008b00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b9c:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <prvSwitchTimerLists+0xc0>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ba2:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <prvSwitchTimerLists+0xc4>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a04      	ldr	r2, [pc, #16]	; (8008bb8 <prvSwitchTimerLists+0xc0>)
 8008ba8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008baa:	4a04      	ldr	r2, [pc, #16]	; (8008bbc <prvSwitchTimerLists+0xc4>)
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	6013      	str	r3, [r2, #0]
}
 8008bb0:	bf00      	nop
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	20000da4 	.word	0x20000da4
 8008bbc:	20000da8 	.word	0x20000da8

08008bc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008bc6:	f000 f965 	bl	8008e94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008bca:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <prvCheckForValidListAndQueue+0x60>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d120      	bne.n	8008c14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008bd2:	4814      	ldr	r0, [pc, #80]	; (8008c24 <prvCheckForValidListAndQueue+0x64>)
 8008bd4:	f7fd fe1c 	bl	8006810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008bd8:	4813      	ldr	r0, [pc, #76]	; (8008c28 <prvCheckForValidListAndQueue+0x68>)
 8008bda:	f7fd fe19 	bl	8006810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008bde:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <prvCheckForValidListAndQueue+0x6c>)
 8008be0:	4a10      	ldr	r2, [pc, #64]	; (8008c24 <prvCheckForValidListAndQueue+0x64>)
 8008be2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008be4:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <prvCheckForValidListAndQueue+0x70>)
 8008be6:	4a10      	ldr	r2, [pc, #64]	; (8008c28 <prvCheckForValidListAndQueue+0x68>)
 8008be8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008bea:	2300      	movs	r3, #0
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	4b11      	ldr	r3, [pc, #68]	; (8008c34 <prvCheckForValidListAndQueue+0x74>)
 8008bf0:	4a11      	ldr	r2, [pc, #68]	; (8008c38 <prvCheckForValidListAndQueue+0x78>)
 8008bf2:	2110      	movs	r1, #16
 8008bf4:	200a      	movs	r0, #10
 8008bf6:	f7fd ff27 	bl	8006a48 <xQueueGenericCreateStatic>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	4a08      	ldr	r2, [pc, #32]	; (8008c20 <prvCheckForValidListAndQueue+0x60>)
 8008bfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c00:	4b07      	ldr	r3, [pc, #28]	; (8008c20 <prvCheckForValidListAndQueue+0x60>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c08:	4b05      	ldr	r3, [pc, #20]	; (8008c20 <prvCheckForValidListAndQueue+0x60>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	490b      	ldr	r1, [pc, #44]	; (8008c3c <prvCheckForValidListAndQueue+0x7c>)
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fb40 	bl	8007294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c14:	f000 f96e 	bl	8008ef4 <vPortExitCritical>
}
 8008c18:	bf00      	nop
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000dac 	.word	0x20000dac
 8008c24:	20000d7c 	.word	0x20000d7c
 8008c28:	20000d90 	.word	0x20000d90
 8008c2c:	20000da4 	.word	0x20000da4
 8008c30:	20000da8 	.word	0x20000da8
 8008c34:	20000e58 	.word	0x20000e58
 8008c38:	20000db8 	.word	0x20000db8
 8008c3c:	0800a708 	.word	0x0800a708

08008c40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3b04      	subs	r3, #4
 8008c50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3b04      	subs	r3, #4
 8008c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f023 0201 	bic.w	r2, r3, #1
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3b04      	subs	r3, #4
 8008c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c70:	4a0c      	ldr	r2, [pc, #48]	; (8008ca4 <pxPortInitialiseStack+0x64>)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3b14      	subs	r3, #20
 8008c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3b04      	subs	r3, #4
 8008c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f06f 0202 	mvn.w	r2, #2
 8008c8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	3b20      	subs	r3, #32
 8008c94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c96:	68fb      	ldr	r3, [r7, #12]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	08008ca9 	.word	0x08008ca9

08008ca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cb2:	4b12      	ldr	r3, [pc, #72]	; (8008cfc <prvTaskExitError+0x54>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cba:	d00a      	beq.n	8008cd2 <prvTaskExitError+0x2a>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	60fb      	str	r3, [r7, #12]
}
 8008cce:	bf00      	nop
 8008cd0:	e7fe      	b.n	8008cd0 <prvTaskExitError+0x28>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	60bb      	str	r3, [r7, #8]
}
 8008ce4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ce6:	bf00      	nop
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0fc      	beq.n	8008ce8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cee:	bf00      	nop
 8008cf0:	bf00      	nop
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	2000002c 	.word	0x2000002c

08008d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <pxCurrentTCBConst2>)
 8008d02:	6819      	ldr	r1, [r3, #0]
 8008d04:	6808      	ldr	r0, [r1, #0]
 8008d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0a:	f380 8809 	msr	PSP, r0
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f04f 0000 	mov.w	r0, #0
 8008d16:	f380 8811 	msr	BASEPRI, r0
 8008d1a:	4770      	bx	lr
 8008d1c:	f3af 8000 	nop.w

08008d20 <pxCurrentTCBConst2>:
 8008d20:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop

08008d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d28:	4808      	ldr	r0, [pc, #32]	; (8008d4c <prvPortStartFirstTask+0x24>)
 8008d2a:	6800      	ldr	r0, [r0, #0]
 8008d2c:	6800      	ldr	r0, [r0, #0]
 8008d2e:	f380 8808 	msr	MSP, r0
 8008d32:	f04f 0000 	mov.w	r0, #0
 8008d36:	f380 8814 	msr	CONTROL, r0
 8008d3a:	b662      	cpsie	i
 8008d3c:	b661      	cpsie	f
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	df00      	svc	0
 8008d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d4a:	bf00      	nop
 8008d4c:	e000ed08 	.word	0xe000ed08

08008d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d56:	4b46      	ldr	r3, [pc, #280]	; (8008e70 <xPortStartScheduler+0x120>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a46      	ldr	r2, [pc, #280]	; (8008e74 <xPortStartScheduler+0x124>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d10a      	bne.n	8008d76 <xPortStartScheduler+0x26>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	613b      	str	r3, [r7, #16]
}
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d76:	4b3e      	ldr	r3, [pc, #248]	; (8008e70 <xPortStartScheduler+0x120>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a3f      	ldr	r2, [pc, #252]	; (8008e78 <xPortStartScheduler+0x128>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d10a      	bne.n	8008d96 <xPortStartScheduler+0x46>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	60fb      	str	r3, [r7, #12]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d96:	4b39      	ldr	r3, [pc, #228]	; (8008e7c <xPortStartScheduler+0x12c>)
 8008d98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	22ff      	movs	r2, #255	; 0xff
 8008da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008db0:	78fb      	ldrb	r3, [r7, #3]
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	4b31      	ldr	r3, [pc, #196]	; (8008e80 <xPortStartScheduler+0x130>)
 8008dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dbe:	4b31      	ldr	r3, [pc, #196]	; (8008e84 <xPortStartScheduler+0x134>)
 8008dc0:	2207      	movs	r2, #7
 8008dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dc4:	e009      	b.n	8008dda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008dc6:	4b2f      	ldr	r3, [pc, #188]	; (8008e84 <xPortStartScheduler+0x134>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	4a2d      	ldr	r2, [pc, #180]	; (8008e84 <xPortStartScheduler+0x134>)
 8008dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	d0ef      	beq.n	8008dc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008de6:	4b27      	ldr	r3, [pc, #156]	; (8008e84 <xPortStartScheduler+0x134>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f1c3 0307 	rsb	r3, r3, #7
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	d00a      	beq.n	8008e08 <xPortStartScheduler+0xb8>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	60bb      	str	r3, [r7, #8]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e08:	4b1e      	ldr	r3, [pc, #120]	; (8008e84 <xPortStartScheduler+0x134>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	4a1d      	ldr	r2, [pc, #116]	; (8008e84 <xPortStartScheduler+0x134>)
 8008e10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e12:	4b1c      	ldr	r3, [pc, #112]	; (8008e84 <xPortStartScheduler+0x134>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e1a:	4a1a      	ldr	r2, [pc, #104]	; (8008e84 <xPortStartScheduler+0x134>)
 8008e1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	b2da      	uxtb	r2, r3
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e26:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <xPortStartScheduler+0x138>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <xPortStartScheduler+0x138>)
 8008e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e32:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <xPortStartScheduler+0x138>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a14      	ldr	r2, [pc, #80]	; (8008e88 <xPortStartScheduler+0x138>)
 8008e38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e3e:	f000 f8dd 	bl	8008ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e42:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <xPortStartScheduler+0x13c>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e48:	f000 f8fc 	bl	8009044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e4c:	4b10      	ldr	r3, [pc, #64]	; (8008e90 <xPortStartScheduler+0x140>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a0f      	ldr	r2, [pc, #60]	; (8008e90 <xPortStartScheduler+0x140>)
 8008e52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e58:	f7ff ff66 	bl	8008d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e5c:	f7fe fe4a 	bl	8007af4 <vTaskSwitchContext>
	prvTaskExitError();
 8008e60:	f7ff ff22 	bl	8008ca8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	e000ed00 	.word	0xe000ed00
 8008e74:	410fc271 	.word	0x410fc271
 8008e78:	410fc270 	.word	0x410fc270
 8008e7c:	e000e400 	.word	0xe000e400
 8008e80:	20000ea8 	.word	0x20000ea8
 8008e84:	20000eac 	.word	0x20000eac
 8008e88:	e000ed20 	.word	0xe000ed20
 8008e8c:	2000002c 	.word	0x2000002c
 8008e90:	e000ef34 	.word	0xe000ef34

08008e94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	607b      	str	r3, [r7, #4]
}
 8008eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008eae:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <vPortEnterCritical+0x58>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	4a0d      	ldr	r2, [pc, #52]	; (8008eec <vPortEnterCritical+0x58>)
 8008eb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008eb8:	4b0c      	ldr	r3, [pc, #48]	; (8008eec <vPortEnterCritical+0x58>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d10f      	bne.n	8008ee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ec0:	4b0b      	ldr	r3, [pc, #44]	; (8008ef0 <vPortEnterCritical+0x5c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	603b      	str	r3, [r7, #0]
}
 8008edc:	bf00      	nop
 8008ede:	e7fe      	b.n	8008ede <vPortEnterCritical+0x4a>
	}
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	2000002c 	.word	0x2000002c
 8008ef0:	e000ed04 	.word	0xe000ed04

08008ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008efa:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <vPortExitCritical+0x50>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10a      	bne.n	8008f18 <vPortExitCritical+0x24>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	607b      	str	r3, [r7, #4]
}
 8008f14:	bf00      	nop
 8008f16:	e7fe      	b.n	8008f16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <vPortExitCritical+0x50>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	4a09      	ldr	r2, [pc, #36]	; (8008f44 <vPortExitCritical+0x50>)
 8008f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f22:	4b08      	ldr	r3, [pc, #32]	; (8008f44 <vPortExitCritical+0x50>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d105      	bne.n	8008f36 <vPortExitCritical+0x42>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	f383 8811 	msr	BASEPRI, r3
}
 8008f34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	2000002c 	.word	0x2000002c
	...

08008f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f50:	f3ef 8009 	mrs	r0, PSP
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <pxCurrentTCBConst>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	f01e 0f10 	tst.w	lr, #16
 8008f60:	bf08      	it	eq
 8008f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6a:	6010      	str	r0, [r2, #0]
 8008f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f74:	f380 8811 	msr	BASEPRI, r0
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f7fe fdb8 	bl	8007af4 <vTaskSwitchContext>
 8008f84:	f04f 0000 	mov.w	r0, #0
 8008f88:	f380 8811 	msr	BASEPRI, r0
 8008f8c:	bc09      	pop	{r0, r3}
 8008f8e:	6819      	ldr	r1, [r3, #0]
 8008f90:	6808      	ldr	r0, [r1, #0]
 8008f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f96:	f01e 0f10 	tst.w	lr, #16
 8008f9a:	bf08      	it	eq
 8008f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fa0:	f380 8809 	msr	PSP, r0
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	f3af 8000 	nop.w

08008fb0 <pxCurrentTCBConst>:
 8008fb0:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fb4:	bf00      	nop
 8008fb6:	bf00      	nop

08008fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	607b      	str	r3, [r7, #4]
}
 8008fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008fd2:	f7fe fcd5 	bl	8007980 <xTaskIncrementTick>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008fdc:	4b06      	ldr	r3, [pc, #24]	; (8008ff8 <xPortSysTickHandler+0x40>)
 8008fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	f383 8811 	msr	BASEPRI, r3
}
 8008fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	e000ed04 	.word	0xe000ed04

08008ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009000:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <vPortSetupTimerInterrupt+0x34>)
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009006:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <vPortSetupTimerInterrupt+0x38>)
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <vPortSetupTimerInterrupt+0x3c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a0a      	ldr	r2, [pc, #40]	; (800903c <vPortSetupTimerInterrupt+0x40>)
 8009012:	fba2 2303 	umull	r2, r3, r2, r3
 8009016:	099b      	lsrs	r3, r3, #6
 8009018:	4a09      	ldr	r2, [pc, #36]	; (8009040 <vPortSetupTimerInterrupt+0x44>)
 800901a:	3b01      	subs	r3, #1
 800901c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800901e:	4b04      	ldr	r3, [pc, #16]	; (8009030 <vPortSetupTimerInterrupt+0x34>)
 8009020:	2207      	movs	r2, #7
 8009022:	601a      	str	r2, [r3, #0]
}
 8009024:	bf00      	nop
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	e000e010 	.word	0xe000e010
 8009034:	e000e018 	.word	0xe000e018
 8009038:	20000020 	.word	0x20000020
 800903c:	10624dd3 	.word	0x10624dd3
 8009040:	e000e014 	.word	0xe000e014

08009044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009054 <vPortEnableVFP+0x10>
 8009048:	6801      	ldr	r1, [r0, #0]
 800904a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800904e:	6001      	str	r1, [r0, #0]
 8009050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009052:	bf00      	nop
 8009054:	e000ed88 	.word	0xe000ed88

08009058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800905e:	f3ef 8305 	mrs	r3, IPSR
 8009062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b0f      	cmp	r3, #15
 8009068:	d914      	bls.n	8009094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800906a:	4a17      	ldr	r2, [pc, #92]	; (80090c8 <vPortValidateInterruptPriority+0x70>)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4413      	add	r3, r2
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009074:	4b15      	ldr	r3, [pc, #84]	; (80090cc <vPortValidateInterruptPriority+0x74>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	7afa      	ldrb	r2, [r7, #11]
 800907a:	429a      	cmp	r2, r3
 800907c:	d20a      	bcs.n	8009094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	607b      	str	r3, [r7, #4]
}
 8009090:	bf00      	nop
 8009092:	e7fe      	b.n	8009092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009094:	4b0e      	ldr	r3, [pc, #56]	; (80090d0 <vPortValidateInterruptPriority+0x78>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800909c:	4b0d      	ldr	r3, [pc, #52]	; (80090d4 <vPortValidateInterruptPriority+0x7c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d90a      	bls.n	80090ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	603b      	str	r3, [r7, #0]
}
 80090b6:	bf00      	nop
 80090b8:	e7fe      	b.n	80090b8 <vPortValidateInterruptPriority+0x60>
	}
 80090ba:	bf00      	nop
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	e000e3f0 	.word	0xe000e3f0
 80090cc:	20000ea8 	.word	0x20000ea8
 80090d0:	e000ed0c 	.word	0xe000ed0c
 80090d4:	20000eac 	.word	0x20000eac

080090d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090e4:	f7fe fb90 	bl	8007808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090e8:	4b5b      	ldr	r3, [pc, #364]	; (8009258 <pvPortMalloc+0x180>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090f0:	f000 f920 	bl	8009334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090f4:	4b59      	ldr	r3, [pc, #356]	; (800925c <pvPortMalloc+0x184>)
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4013      	ands	r3, r2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f040 8093 	bne.w	8009228 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d01d      	beq.n	8009144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009108:	2208      	movs	r2, #8
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4413      	add	r3, r2
 800910e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f003 0307 	and.w	r3, r3, #7
 8009116:	2b00      	cmp	r3, #0
 8009118:	d014      	beq.n	8009144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f023 0307 	bic.w	r3, r3, #7
 8009120:	3308      	adds	r3, #8
 8009122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f003 0307 	and.w	r3, r3, #7
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <pvPortMalloc+0x6c>
	__asm volatile
 800912e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	617b      	str	r3, [r7, #20]
}
 8009140:	bf00      	nop
 8009142:	e7fe      	b.n	8009142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d06e      	beq.n	8009228 <pvPortMalloc+0x150>
 800914a:	4b45      	ldr	r3, [pc, #276]	; (8009260 <pvPortMalloc+0x188>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	429a      	cmp	r2, r3
 8009152:	d869      	bhi.n	8009228 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009154:	4b43      	ldr	r3, [pc, #268]	; (8009264 <pvPortMalloc+0x18c>)
 8009156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009158:	4b42      	ldr	r3, [pc, #264]	; (8009264 <pvPortMalloc+0x18c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800915e:	e004      	b.n	800916a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	429a      	cmp	r2, r3
 8009172:	d903      	bls.n	800917c <pvPortMalloc+0xa4>
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1f1      	bne.n	8009160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800917c:	4b36      	ldr	r3, [pc, #216]	; (8009258 <pvPortMalloc+0x180>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009182:	429a      	cmp	r2, r3
 8009184:	d050      	beq.n	8009228 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2208      	movs	r2, #8
 800918c:	4413      	add	r3, r2
 800918e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	1ad2      	subs	r2, r2, r3
 80091a0:	2308      	movs	r3, #8
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d91f      	bls.n	80091e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4413      	add	r3, r2
 80091ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00a      	beq.n	80091d0 <pvPortMalloc+0xf8>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	613b      	str	r3, [r7, #16]
}
 80091cc:	bf00      	nop
 80091ce:	e7fe      	b.n	80091ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	1ad2      	subs	r2, r2, r3
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091e2:	69b8      	ldr	r0, [r7, #24]
 80091e4:	f000 f908 	bl	80093f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091e8:	4b1d      	ldr	r3, [pc, #116]	; (8009260 <pvPortMalloc+0x188>)
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	4a1b      	ldr	r2, [pc, #108]	; (8009260 <pvPortMalloc+0x188>)
 80091f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091f6:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <pvPortMalloc+0x188>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <pvPortMalloc+0x190>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d203      	bcs.n	800920a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009202:	4b17      	ldr	r3, [pc, #92]	; (8009260 <pvPortMalloc+0x188>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a18      	ldr	r2, [pc, #96]	; (8009268 <pvPortMalloc+0x190>)
 8009208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	4b13      	ldr	r3, [pc, #76]	; (800925c <pvPortMalloc+0x184>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	431a      	orrs	r2, r3
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800921e:	4b13      	ldr	r3, [pc, #76]	; (800926c <pvPortMalloc+0x194>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3301      	adds	r3, #1
 8009224:	4a11      	ldr	r2, [pc, #68]	; (800926c <pvPortMalloc+0x194>)
 8009226:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009228:	f7fe fafc 	bl	8007824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f003 0307 	and.w	r3, r3, #7
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <pvPortMalloc+0x174>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	60fb      	str	r3, [r7, #12]
}
 8009248:	bf00      	nop
 800924a:	e7fe      	b.n	800924a <pvPortMalloc+0x172>
	return pvReturn;
 800924c:	69fb      	ldr	r3, [r7, #28]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3728      	adds	r7, #40	; 0x28
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20004ab8 	.word	0x20004ab8
 800925c:	20004acc 	.word	0x20004acc
 8009260:	20004abc 	.word	0x20004abc
 8009264:	20004ab0 	.word	0x20004ab0
 8009268:	20004ac0 	.word	0x20004ac0
 800926c:	20004ac4 	.word	0x20004ac4

08009270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d04d      	beq.n	800931e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009282:	2308      	movs	r3, #8
 8009284:	425b      	negs	r3, r3
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	4413      	add	r3, r2
 800928a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	4b24      	ldr	r3, [pc, #144]	; (8009328 <vPortFree+0xb8>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4013      	ands	r3, r2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10a      	bne.n	80092b4 <vPortFree+0x44>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	60fb      	str	r3, [r7, #12]
}
 80092b0:	bf00      	nop
 80092b2:	e7fe      	b.n	80092b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <vPortFree+0x62>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	60bb      	str	r3, [r7, #8]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	4b14      	ldr	r3, [pc, #80]	; (8009328 <vPortFree+0xb8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4013      	ands	r3, r2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01e      	beq.n	800931e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d11a      	bne.n	800931e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	4b0e      	ldr	r3, [pc, #56]	; (8009328 <vPortFree+0xb8>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	43db      	mvns	r3, r3
 80092f2:	401a      	ands	r2, r3
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092f8:	f7fe fa86 	bl	8007808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	4b0a      	ldr	r3, [pc, #40]	; (800932c <vPortFree+0xbc>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4413      	add	r3, r2
 8009306:	4a09      	ldr	r2, [pc, #36]	; (800932c <vPortFree+0xbc>)
 8009308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800930a:	6938      	ldr	r0, [r7, #16]
 800930c:	f000 f874 	bl	80093f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <vPortFree+0xc0>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3301      	adds	r3, #1
 8009316:	4a06      	ldr	r2, [pc, #24]	; (8009330 <vPortFree+0xc0>)
 8009318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800931a:	f7fe fa83 	bl	8007824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800931e:	bf00      	nop
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20004acc 	.word	0x20004acc
 800932c:	20004abc 	.word	0x20004abc
 8009330:	20004ac8 	.word	0x20004ac8

08009334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800933a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800933e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009340:	4b27      	ldr	r3, [pc, #156]	; (80093e0 <prvHeapInit+0xac>)
 8009342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00c      	beq.n	8009368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3307      	adds	r3, #7
 8009352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f023 0307 	bic.w	r3, r3, #7
 800935a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <prvHeapInit+0xac>)
 8009364:	4413      	add	r3, r2
 8009366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800936c:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <prvHeapInit+0xb0>)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009372:	4b1c      	ldr	r3, [pc, #112]	; (80093e4 <prvHeapInit+0xb0>)
 8009374:	2200      	movs	r2, #0
 8009376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	4413      	add	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009380:	2208      	movs	r2, #8
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	1a9b      	subs	r3, r3, r2
 8009386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f023 0307 	bic.w	r3, r3, #7
 800938e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4a15      	ldr	r2, [pc, #84]	; (80093e8 <prvHeapInit+0xb4>)
 8009394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009396:	4b14      	ldr	r3, [pc, #80]	; (80093e8 <prvHeapInit+0xb4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2200      	movs	r2, #0
 800939c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800939e:	4b12      	ldr	r3, [pc, #72]	; (80093e8 <prvHeapInit+0xb4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	1ad2      	subs	r2, r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093b4:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <prvHeapInit+0xb4>)
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	4a0a      	ldr	r2, [pc, #40]	; (80093ec <prvHeapInit+0xb8>)
 80093c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	4a09      	ldr	r2, [pc, #36]	; (80093f0 <prvHeapInit+0xbc>)
 80093ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093cc:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <prvHeapInit+0xc0>)
 80093ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093d2:	601a      	str	r2, [r3, #0]
}
 80093d4:	bf00      	nop
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	20000eb0 	.word	0x20000eb0
 80093e4:	20004ab0 	.word	0x20004ab0
 80093e8:	20004ab8 	.word	0x20004ab8
 80093ec:	20004ac0 	.word	0x20004ac0
 80093f0:	20004abc 	.word	0x20004abc
 80093f4:	20004acc 	.word	0x20004acc

080093f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009400:	4b28      	ldr	r3, [pc, #160]	; (80094a4 <prvInsertBlockIntoFreeList+0xac>)
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e002      	b.n	800940c <prvInsertBlockIntoFreeList+0x14>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	429a      	cmp	r2, r3
 8009414:	d8f7      	bhi.n	8009406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	4413      	add	r3, r2
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	d108      	bne.n	800943a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	441a      	add	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	441a      	add	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d118      	bne.n	8009480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	4b15      	ldr	r3, [pc, #84]	; (80094a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d00d      	beq.n	8009476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	441a      	add	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	e008      	b.n	8009488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009476:	4b0c      	ldr	r3, [pc, #48]	; (80094a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	e003      	b.n	8009488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	429a      	cmp	r2, r3
 800948e:	d002      	beq.n	8009496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009496:	bf00      	nop
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	20004ab0 	.word	0x20004ab0
 80094a8:	20004ab8 	.word	0x20004ab8

080094ac <__errno>:
 80094ac:	4b01      	ldr	r3, [pc, #4]	; (80094b4 <__errno+0x8>)
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20000030 	.word	0x20000030

080094b8 <std>:
 80094b8:	2300      	movs	r3, #0
 80094ba:	b510      	push	{r4, lr}
 80094bc:	4604      	mov	r4, r0
 80094be:	e9c0 3300 	strd	r3, r3, [r0]
 80094c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094c6:	6083      	str	r3, [r0, #8]
 80094c8:	8181      	strh	r1, [r0, #12]
 80094ca:	6643      	str	r3, [r0, #100]	; 0x64
 80094cc:	81c2      	strh	r2, [r0, #14]
 80094ce:	6183      	str	r3, [r0, #24]
 80094d0:	4619      	mov	r1, r3
 80094d2:	2208      	movs	r2, #8
 80094d4:	305c      	adds	r0, #92	; 0x5c
 80094d6:	f000 f91a 	bl	800970e <memset>
 80094da:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <std+0x38>)
 80094dc:	6263      	str	r3, [r4, #36]	; 0x24
 80094de:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <std+0x3c>)
 80094e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80094e2:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <std+0x40>)
 80094e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094e6:	4b05      	ldr	r3, [pc, #20]	; (80094fc <std+0x44>)
 80094e8:	6224      	str	r4, [r4, #32]
 80094ea:	6323      	str	r3, [r4, #48]	; 0x30
 80094ec:	bd10      	pop	{r4, pc}
 80094ee:	bf00      	nop
 80094f0:	080098f9 	.word	0x080098f9
 80094f4:	0800991b 	.word	0x0800991b
 80094f8:	08009953 	.word	0x08009953
 80094fc:	08009977 	.word	0x08009977

08009500 <_cleanup_r>:
 8009500:	4901      	ldr	r1, [pc, #4]	; (8009508 <_cleanup_r+0x8>)
 8009502:	f000 b8af 	b.w	8009664 <_fwalk_reent>
 8009506:	bf00      	nop
 8009508:	08009ad1 	.word	0x08009ad1

0800950c <__sfmoreglue>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	1e4a      	subs	r2, r1, #1
 8009510:	2568      	movs	r5, #104	; 0x68
 8009512:	4355      	muls	r5, r2
 8009514:	460e      	mov	r6, r1
 8009516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800951a:	f000 f901 	bl	8009720 <_malloc_r>
 800951e:	4604      	mov	r4, r0
 8009520:	b140      	cbz	r0, 8009534 <__sfmoreglue+0x28>
 8009522:	2100      	movs	r1, #0
 8009524:	e9c0 1600 	strd	r1, r6, [r0]
 8009528:	300c      	adds	r0, #12
 800952a:	60a0      	str	r0, [r4, #8]
 800952c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009530:	f000 f8ed 	bl	800970e <memset>
 8009534:	4620      	mov	r0, r4
 8009536:	bd70      	pop	{r4, r5, r6, pc}

08009538 <__sfp_lock_acquire>:
 8009538:	4801      	ldr	r0, [pc, #4]	; (8009540 <__sfp_lock_acquire+0x8>)
 800953a:	f000 b8d8 	b.w	80096ee <__retarget_lock_acquire_recursive>
 800953e:	bf00      	nop
 8009540:	20004d80 	.word	0x20004d80

08009544 <__sfp_lock_release>:
 8009544:	4801      	ldr	r0, [pc, #4]	; (800954c <__sfp_lock_release+0x8>)
 8009546:	f000 b8d3 	b.w	80096f0 <__retarget_lock_release_recursive>
 800954a:	bf00      	nop
 800954c:	20004d80 	.word	0x20004d80

08009550 <__sinit_lock_acquire>:
 8009550:	4801      	ldr	r0, [pc, #4]	; (8009558 <__sinit_lock_acquire+0x8>)
 8009552:	f000 b8cc 	b.w	80096ee <__retarget_lock_acquire_recursive>
 8009556:	bf00      	nop
 8009558:	20004d7b 	.word	0x20004d7b

0800955c <__sinit_lock_release>:
 800955c:	4801      	ldr	r0, [pc, #4]	; (8009564 <__sinit_lock_release+0x8>)
 800955e:	f000 b8c7 	b.w	80096f0 <__retarget_lock_release_recursive>
 8009562:	bf00      	nop
 8009564:	20004d7b 	.word	0x20004d7b

08009568 <__sinit>:
 8009568:	b510      	push	{r4, lr}
 800956a:	4604      	mov	r4, r0
 800956c:	f7ff fff0 	bl	8009550 <__sinit_lock_acquire>
 8009570:	69a3      	ldr	r3, [r4, #24]
 8009572:	b11b      	cbz	r3, 800957c <__sinit+0x14>
 8009574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009578:	f7ff bff0 	b.w	800955c <__sinit_lock_release>
 800957c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009580:	6523      	str	r3, [r4, #80]	; 0x50
 8009582:	4b13      	ldr	r3, [pc, #76]	; (80095d0 <__sinit+0x68>)
 8009584:	4a13      	ldr	r2, [pc, #76]	; (80095d4 <__sinit+0x6c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	62a2      	str	r2, [r4, #40]	; 0x28
 800958a:	42a3      	cmp	r3, r4
 800958c:	bf04      	itt	eq
 800958e:	2301      	moveq	r3, #1
 8009590:	61a3      	streq	r3, [r4, #24]
 8009592:	4620      	mov	r0, r4
 8009594:	f000 f820 	bl	80095d8 <__sfp>
 8009598:	6060      	str	r0, [r4, #4]
 800959a:	4620      	mov	r0, r4
 800959c:	f000 f81c 	bl	80095d8 <__sfp>
 80095a0:	60a0      	str	r0, [r4, #8]
 80095a2:	4620      	mov	r0, r4
 80095a4:	f000 f818 	bl	80095d8 <__sfp>
 80095a8:	2200      	movs	r2, #0
 80095aa:	60e0      	str	r0, [r4, #12]
 80095ac:	2104      	movs	r1, #4
 80095ae:	6860      	ldr	r0, [r4, #4]
 80095b0:	f7ff ff82 	bl	80094b8 <std>
 80095b4:	68a0      	ldr	r0, [r4, #8]
 80095b6:	2201      	movs	r2, #1
 80095b8:	2109      	movs	r1, #9
 80095ba:	f7ff ff7d 	bl	80094b8 <std>
 80095be:	68e0      	ldr	r0, [r4, #12]
 80095c0:	2202      	movs	r2, #2
 80095c2:	2112      	movs	r1, #18
 80095c4:	f7ff ff78 	bl	80094b8 <std>
 80095c8:	2301      	movs	r3, #1
 80095ca:	61a3      	str	r3, [r4, #24]
 80095cc:	e7d2      	b.n	8009574 <__sinit+0xc>
 80095ce:	bf00      	nop
 80095d0:	0800a7f4 	.word	0x0800a7f4
 80095d4:	08009501 	.word	0x08009501

080095d8 <__sfp>:
 80095d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095da:	4607      	mov	r7, r0
 80095dc:	f7ff ffac 	bl	8009538 <__sfp_lock_acquire>
 80095e0:	4b1e      	ldr	r3, [pc, #120]	; (800965c <__sfp+0x84>)
 80095e2:	681e      	ldr	r6, [r3, #0]
 80095e4:	69b3      	ldr	r3, [r6, #24]
 80095e6:	b913      	cbnz	r3, 80095ee <__sfp+0x16>
 80095e8:	4630      	mov	r0, r6
 80095ea:	f7ff ffbd 	bl	8009568 <__sinit>
 80095ee:	3648      	adds	r6, #72	; 0x48
 80095f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	d503      	bpl.n	8009600 <__sfp+0x28>
 80095f8:	6833      	ldr	r3, [r6, #0]
 80095fa:	b30b      	cbz	r3, 8009640 <__sfp+0x68>
 80095fc:	6836      	ldr	r6, [r6, #0]
 80095fe:	e7f7      	b.n	80095f0 <__sfp+0x18>
 8009600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009604:	b9d5      	cbnz	r5, 800963c <__sfp+0x64>
 8009606:	4b16      	ldr	r3, [pc, #88]	; (8009660 <__sfp+0x88>)
 8009608:	60e3      	str	r3, [r4, #12]
 800960a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800960e:	6665      	str	r5, [r4, #100]	; 0x64
 8009610:	f000 f86c 	bl	80096ec <__retarget_lock_init_recursive>
 8009614:	f7ff ff96 	bl	8009544 <__sfp_lock_release>
 8009618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800961c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009620:	6025      	str	r5, [r4, #0]
 8009622:	61a5      	str	r5, [r4, #24]
 8009624:	2208      	movs	r2, #8
 8009626:	4629      	mov	r1, r5
 8009628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800962c:	f000 f86f 	bl	800970e <memset>
 8009630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009638:	4620      	mov	r0, r4
 800963a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800963c:	3468      	adds	r4, #104	; 0x68
 800963e:	e7d9      	b.n	80095f4 <__sfp+0x1c>
 8009640:	2104      	movs	r1, #4
 8009642:	4638      	mov	r0, r7
 8009644:	f7ff ff62 	bl	800950c <__sfmoreglue>
 8009648:	4604      	mov	r4, r0
 800964a:	6030      	str	r0, [r6, #0]
 800964c:	2800      	cmp	r0, #0
 800964e:	d1d5      	bne.n	80095fc <__sfp+0x24>
 8009650:	f7ff ff78 	bl	8009544 <__sfp_lock_release>
 8009654:	230c      	movs	r3, #12
 8009656:	603b      	str	r3, [r7, #0]
 8009658:	e7ee      	b.n	8009638 <__sfp+0x60>
 800965a:	bf00      	nop
 800965c:	0800a7f4 	.word	0x0800a7f4
 8009660:	ffff0001 	.word	0xffff0001

08009664 <_fwalk_reent>:
 8009664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009668:	4606      	mov	r6, r0
 800966a:	4688      	mov	r8, r1
 800966c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009670:	2700      	movs	r7, #0
 8009672:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009676:	f1b9 0901 	subs.w	r9, r9, #1
 800967a:	d505      	bpl.n	8009688 <_fwalk_reent+0x24>
 800967c:	6824      	ldr	r4, [r4, #0]
 800967e:	2c00      	cmp	r4, #0
 8009680:	d1f7      	bne.n	8009672 <_fwalk_reent+0xe>
 8009682:	4638      	mov	r0, r7
 8009684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009688:	89ab      	ldrh	r3, [r5, #12]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d907      	bls.n	800969e <_fwalk_reent+0x3a>
 800968e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009692:	3301      	adds	r3, #1
 8009694:	d003      	beq.n	800969e <_fwalk_reent+0x3a>
 8009696:	4629      	mov	r1, r5
 8009698:	4630      	mov	r0, r6
 800969a:	47c0      	blx	r8
 800969c:	4307      	orrs	r7, r0
 800969e:	3568      	adds	r5, #104	; 0x68
 80096a0:	e7e9      	b.n	8009676 <_fwalk_reent+0x12>
	...

080096a4 <__libc_init_array>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	4d0d      	ldr	r5, [pc, #52]	; (80096dc <__libc_init_array+0x38>)
 80096a8:	4c0d      	ldr	r4, [pc, #52]	; (80096e0 <__libc_init_array+0x3c>)
 80096aa:	1b64      	subs	r4, r4, r5
 80096ac:	10a4      	asrs	r4, r4, #2
 80096ae:	2600      	movs	r6, #0
 80096b0:	42a6      	cmp	r6, r4
 80096b2:	d109      	bne.n	80096c8 <__libc_init_array+0x24>
 80096b4:	4d0b      	ldr	r5, [pc, #44]	; (80096e4 <__libc_init_array+0x40>)
 80096b6:	4c0c      	ldr	r4, [pc, #48]	; (80096e8 <__libc_init_array+0x44>)
 80096b8:	f000 ffe2 	bl	800a680 <_init>
 80096bc:	1b64      	subs	r4, r4, r5
 80096be:	10a4      	asrs	r4, r4, #2
 80096c0:	2600      	movs	r6, #0
 80096c2:	42a6      	cmp	r6, r4
 80096c4:	d105      	bne.n	80096d2 <__libc_init_array+0x2e>
 80096c6:	bd70      	pop	{r4, r5, r6, pc}
 80096c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096cc:	4798      	blx	r3
 80096ce:	3601      	adds	r6, #1
 80096d0:	e7ee      	b.n	80096b0 <__libc_init_array+0xc>
 80096d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d6:	4798      	blx	r3
 80096d8:	3601      	adds	r6, #1
 80096da:	e7f2      	b.n	80096c2 <__libc_init_array+0x1e>
 80096dc:	0800a834 	.word	0x0800a834
 80096e0:	0800a834 	.word	0x0800a834
 80096e4:	0800a834 	.word	0x0800a834
 80096e8:	0800a838 	.word	0x0800a838

080096ec <__retarget_lock_init_recursive>:
 80096ec:	4770      	bx	lr

080096ee <__retarget_lock_acquire_recursive>:
 80096ee:	4770      	bx	lr

080096f0 <__retarget_lock_release_recursive>:
 80096f0:	4770      	bx	lr

080096f2 <memcpy>:
 80096f2:	440a      	add	r2, r1
 80096f4:	4291      	cmp	r1, r2
 80096f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096fa:	d100      	bne.n	80096fe <memcpy+0xc>
 80096fc:	4770      	bx	lr
 80096fe:	b510      	push	{r4, lr}
 8009700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009708:	4291      	cmp	r1, r2
 800970a:	d1f9      	bne.n	8009700 <memcpy+0xe>
 800970c:	bd10      	pop	{r4, pc}

0800970e <memset>:
 800970e:	4402      	add	r2, r0
 8009710:	4603      	mov	r3, r0
 8009712:	4293      	cmp	r3, r2
 8009714:	d100      	bne.n	8009718 <memset+0xa>
 8009716:	4770      	bx	lr
 8009718:	f803 1b01 	strb.w	r1, [r3], #1
 800971c:	e7f9      	b.n	8009712 <memset+0x4>
	...

08009720 <_malloc_r>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	1ccd      	adds	r5, r1, #3
 8009724:	f025 0503 	bic.w	r5, r5, #3
 8009728:	3508      	adds	r5, #8
 800972a:	2d0c      	cmp	r5, #12
 800972c:	bf38      	it	cc
 800972e:	250c      	movcc	r5, #12
 8009730:	2d00      	cmp	r5, #0
 8009732:	4606      	mov	r6, r0
 8009734:	db01      	blt.n	800973a <_malloc_r+0x1a>
 8009736:	42a9      	cmp	r1, r5
 8009738:	d903      	bls.n	8009742 <_malloc_r+0x22>
 800973a:	230c      	movs	r3, #12
 800973c:	6033      	str	r3, [r6, #0]
 800973e:	2000      	movs	r0, #0
 8009740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009742:	f000 fa13 	bl	8009b6c <__malloc_lock>
 8009746:	4921      	ldr	r1, [pc, #132]	; (80097cc <_malloc_r+0xac>)
 8009748:	680a      	ldr	r2, [r1, #0]
 800974a:	4614      	mov	r4, r2
 800974c:	b99c      	cbnz	r4, 8009776 <_malloc_r+0x56>
 800974e:	4f20      	ldr	r7, [pc, #128]	; (80097d0 <_malloc_r+0xb0>)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	b923      	cbnz	r3, 800975e <_malloc_r+0x3e>
 8009754:	4621      	mov	r1, r4
 8009756:	4630      	mov	r0, r6
 8009758:	f000 f8be 	bl	80098d8 <_sbrk_r>
 800975c:	6038      	str	r0, [r7, #0]
 800975e:	4629      	mov	r1, r5
 8009760:	4630      	mov	r0, r6
 8009762:	f000 f8b9 	bl	80098d8 <_sbrk_r>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d123      	bne.n	80097b2 <_malloc_r+0x92>
 800976a:	230c      	movs	r3, #12
 800976c:	6033      	str	r3, [r6, #0]
 800976e:	4630      	mov	r0, r6
 8009770:	f000 fa02 	bl	8009b78 <__malloc_unlock>
 8009774:	e7e3      	b.n	800973e <_malloc_r+0x1e>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	1b5b      	subs	r3, r3, r5
 800977a:	d417      	bmi.n	80097ac <_malloc_r+0x8c>
 800977c:	2b0b      	cmp	r3, #11
 800977e:	d903      	bls.n	8009788 <_malloc_r+0x68>
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	441c      	add	r4, r3
 8009784:	6025      	str	r5, [r4, #0]
 8009786:	e004      	b.n	8009792 <_malloc_r+0x72>
 8009788:	6863      	ldr	r3, [r4, #4]
 800978a:	42a2      	cmp	r2, r4
 800978c:	bf0c      	ite	eq
 800978e:	600b      	streq	r3, [r1, #0]
 8009790:	6053      	strne	r3, [r2, #4]
 8009792:	4630      	mov	r0, r6
 8009794:	f000 f9f0 	bl	8009b78 <__malloc_unlock>
 8009798:	f104 000b 	add.w	r0, r4, #11
 800979c:	1d23      	adds	r3, r4, #4
 800979e:	f020 0007 	bic.w	r0, r0, #7
 80097a2:	1ac2      	subs	r2, r0, r3
 80097a4:	d0cc      	beq.n	8009740 <_malloc_r+0x20>
 80097a6:	1a1b      	subs	r3, r3, r0
 80097a8:	50a3      	str	r3, [r4, r2]
 80097aa:	e7c9      	b.n	8009740 <_malloc_r+0x20>
 80097ac:	4622      	mov	r2, r4
 80097ae:	6864      	ldr	r4, [r4, #4]
 80097b0:	e7cc      	b.n	800974c <_malloc_r+0x2c>
 80097b2:	1cc4      	adds	r4, r0, #3
 80097b4:	f024 0403 	bic.w	r4, r4, #3
 80097b8:	42a0      	cmp	r0, r4
 80097ba:	d0e3      	beq.n	8009784 <_malloc_r+0x64>
 80097bc:	1a21      	subs	r1, r4, r0
 80097be:	4630      	mov	r0, r6
 80097c0:	f000 f88a 	bl	80098d8 <_sbrk_r>
 80097c4:	3001      	adds	r0, #1
 80097c6:	d1dd      	bne.n	8009784 <_malloc_r+0x64>
 80097c8:	e7cf      	b.n	800976a <_malloc_r+0x4a>
 80097ca:	bf00      	nop
 80097cc:	20004ad0 	.word	0x20004ad0
 80097d0:	20004ad4 	.word	0x20004ad4

080097d4 <iprintf>:
 80097d4:	b40f      	push	{r0, r1, r2, r3}
 80097d6:	4b0a      	ldr	r3, [pc, #40]	; (8009800 <iprintf+0x2c>)
 80097d8:	b513      	push	{r0, r1, r4, lr}
 80097da:	681c      	ldr	r4, [r3, #0]
 80097dc:	b124      	cbz	r4, 80097e8 <iprintf+0x14>
 80097de:	69a3      	ldr	r3, [r4, #24]
 80097e0:	b913      	cbnz	r3, 80097e8 <iprintf+0x14>
 80097e2:	4620      	mov	r0, r4
 80097e4:	f7ff fec0 	bl	8009568 <__sinit>
 80097e8:	ab05      	add	r3, sp, #20
 80097ea:	9a04      	ldr	r2, [sp, #16]
 80097ec:	68a1      	ldr	r1, [r4, #8]
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 fa41 	bl	8009c78 <_vfiprintf_r>
 80097f6:	b002      	add	sp, #8
 80097f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097fc:	b004      	add	sp, #16
 80097fe:	4770      	bx	lr
 8009800:	20000030 	.word	0x20000030

08009804 <cleanup_glue>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	460c      	mov	r4, r1
 8009808:	6809      	ldr	r1, [r1, #0]
 800980a:	4605      	mov	r5, r0
 800980c:	b109      	cbz	r1, 8009812 <cleanup_glue+0xe>
 800980e:	f7ff fff9 	bl	8009804 <cleanup_glue>
 8009812:	4621      	mov	r1, r4
 8009814:	4628      	mov	r0, r5
 8009816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800981a:	f000 b9b3 	b.w	8009b84 <_free_r>
	...

08009820 <_reclaim_reent>:
 8009820:	4b2c      	ldr	r3, [pc, #176]	; (80098d4 <_reclaim_reent+0xb4>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4283      	cmp	r3, r0
 8009826:	b570      	push	{r4, r5, r6, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	d051      	beq.n	80098d0 <_reclaim_reent+0xb0>
 800982c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800982e:	b143      	cbz	r3, 8009842 <_reclaim_reent+0x22>
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d14a      	bne.n	80098cc <_reclaim_reent+0xac>
 8009836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009838:	6819      	ldr	r1, [r3, #0]
 800983a:	b111      	cbz	r1, 8009842 <_reclaim_reent+0x22>
 800983c:	4620      	mov	r0, r4
 800983e:	f000 f9a1 	bl	8009b84 <_free_r>
 8009842:	6961      	ldr	r1, [r4, #20]
 8009844:	b111      	cbz	r1, 800984c <_reclaim_reent+0x2c>
 8009846:	4620      	mov	r0, r4
 8009848:	f000 f99c 	bl	8009b84 <_free_r>
 800984c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800984e:	b111      	cbz	r1, 8009856 <_reclaim_reent+0x36>
 8009850:	4620      	mov	r0, r4
 8009852:	f000 f997 	bl	8009b84 <_free_r>
 8009856:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009858:	b111      	cbz	r1, 8009860 <_reclaim_reent+0x40>
 800985a:	4620      	mov	r0, r4
 800985c:	f000 f992 	bl	8009b84 <_free_r>
 8009860:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009862:	b111      	cbz	r1, 800986a <_reclaim_reent+0x4a>
 8009864:	4620      	mov	r0, r4
 8009866:	f000 f98d 	bl	8009b84 <_free_r>
 800986a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800986c:	b111      	cbz	r1, 8009874 <_reclaim_reent+0x54>
 800986e:	4620      	mov	r0, r4
 8009870:	f000 f988 	bl	8009b84 <_free_r>
 8009874:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009876:	b111      	cbz	r1, 800987e <_reclaim_reent+0x5e>
 8009878:	4620      	mov	r0, r4
 800987a:	f000 f983 	bl	8009b84 <_free_r>
 800987e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009880:	b111      	cbz	r1, 8009888 <_reclaim_reent+0x68>
 8009882:	4620      	mov	r0, r4
 8009884:	f000 f97e 	bl	8009b84 <_free_r>
 8009888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800988a:	b111      	cbz	r1, 8009892 <_reclaim_reent+0x72>
 800988c:	4620      	mov	r0, r4
 800988e:	f000 f979 	bl	8009b84 <_free_r>
 8009892:	69a3      	ldr	r3, [r4, #24]
 8009894:	b1e3      	cbz	r3, 80098d0 <_reclaim_reent+0xb0>
 8009896:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009898:	4620      	mov	r0, r4
 800989a:	4798      	blx	r3
 800989c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800989e:	b1b9      	cbz	r1, 80098d0 <_reclaim_reent+0xb0>
 80098a0:	4620      	mov	r0, r4
 80098a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098a6:	f7ff bfad 	b.w	8009804 <cleanup_glue>
 80098aa:	5949      	ldr	r1, [r1, r5]
 80098ac:	b941      	cbnz	r1, 80098c0 <_reclaim_reent+0xa0>
 80098ae:	3504      	adds	r5, #4
 80098b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b2:	2d80      	cmp	r5, #128	; 0x80
 80098b4:	68d9      	ldr	r1, [r3, #12]
 80098b6:	d1f8      	bne.n	80098aa <_reclaim_reent+0x8a>
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 f963 	bl	8009b84 <_free_r>
 80098be:	e7ba      	b.n	8009836 <_reclaim_reent+0x16>
 80098c0:	680e      	ldr	r6, [r1, #0]
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 f95e 	bl	8009b84 <_free_r>
 80098c8:	4631      	mov	r1, r6
 80098ca:	e7ef      	b.n	80098ac <_reclaim_reent+0x8c>
 80098cc:	2500      	movs	r5, #0
 80098ce:	e7ef      	b.n	80098b0 <_reclaim_reent+0x90>
 80098d0:	bd70      	pop	{r4, r5, r6, pc}
 80098d2:	bf00      	nop
 80098d4:	20000030 	.word	0x20000030

080098d8 <_sbrk_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d06      	ldr	r5, [pc, #24]	; (80098f4 <_sbrk_r+0x1c>)
 80098dc:	2300      	movs	r3, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	602b      	str	r3, [r5, #0]
 80098e4:	f7f8 fe54 	bl	8002590 <_sbrk>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_sbrk_r+0x1a>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_sbrk_r+0x1a>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	20004d84 	.word	0x20004d84

080098f8 <__sread>:
 80098f8:	b510      	push	{r4, lr}
 80098fa:	460c      	mov	r4, r1
 80098fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009900:	f000 fc7e 	bl	800a200 <_read_r>
 8009904:	2800      	cmp	r0, #0
 8009906:	bfab      	itete	ge
 8009908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800990a:	89a3      	ldrhlt	r3, [r4, #12]
 800990c:	181b      	addge	r3, r3, r0
 800990e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009912:	bfac      	ite	ge
 8009914:	6563      	strge	r3, [r4, #84]	; 0x54
 8009916:	81a3      	strhlt	r3, [r4, #12]
 8009918:	bd10      	pop	{r4, pc}

0800991a <__swrite>:
 800991a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991e:	461f      	mov	r7, r3
 8009920:	898b      	ldrh	r3, [r1, #12]
 8009922:	05db      	lsls	r3, r3, #23
 8009924:	4605      	mov	r5, r0
 8009926:	460c      	mov	r4, r1
 8009928:	4616      	mov	r6, r2
 800992a:	d505      	bpl.n	8009938 <__swrite+0x1e>
 800992c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009930:	2302      	movs	r3, #2
 8009932:	2200      	movs	r2, #0
 8009934:	f000 f908 	bl	8009b48 <_lseek_r>
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800993e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009942:	81a3      	strh	r3, [r4, #12]
 8009944:	4632      	mov	r2, r6
 8009946:	463b      	mov	r3, r7
 8009948:	4628      	mov	r0, r5
 800994a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800994e:	f000 b817 	b.w	8009980 <_write_r>

08009952 <__sseek>:
 8009952:	b510      	push	{r4, lr}
 8009954:	460c      	mov	r4, r1
 8009956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995a:	f000 f8f5 	bl	8009b48 <_lseek_r>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	bf15      	itete	ne
 8009964:	6560      	strne	r0, [r4, #84]	; 0x54
 8009966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800996a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800996e:	81a3      	strheq	r3, [r4, #12]
 8009970:	bf18      	it	ne
 8009972:	81a3      	strhne	r3, [r4, #12]
 8009974:	bd10      	pop	{r4, pc}

08009976 <__sclose>:
 8009976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800997a:	f000 b813 	b.w	80099a4 <_close_r>
	...

08009980 <_write_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d07      	ldr	r5, [pc, #28]	; (80099a0 <_write_r+0x20>)
 8009984:	4604      	mov	r4, r0
 8009986:	4608      	mov	r0, r1
 8009988:	4611      	mov	r1, r2
 800998a:	2200      	movs	r2, #0
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f7f8 fdad 	bl	80024ee <_write>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_write_r+0x1e>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_write_r+0x1e>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20004d84 	.word	0x20004d84

080099a4 <_close_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d06      	ldr	r5, [pc, #24]	; (80099c0 <_close_r+0x1c>)
 80099a8:	2300      	movs	r3, #0
 80099aa:	4604      	mov	r4, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	f7f8 fdb9 	bl	8002526 <_close>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d102      	bne.n	80099be <_close_r+0x1a>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	b103      	cbz	r3, 80099be <_close_r+0x1a>
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	20004d84 	.word	0x20004d84

080099c4 <__sflush_r>:
 80099c4:	898a      	ldrh	r2, [r1, #12]
 80099c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ca:	4605      	mov	r5, r0
 80099cc:	0710      	lsls	r0, r2, #28
 80099ce:	460c      	mov	r4, r1
 80099d0:	d458      	bmi.n	8009a84 <__sflush_r+0xc0>
 80099d2:	684b      	ldr	r3, [r1, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	dc05      	bgt.n	80099e4 <__sflush_r+0x20>
 80099d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dc02      	bgt.n	80099e4 <__sflush_r+0x20>
 80099de:	2000      	movs	r0, #0
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099e6:	2e00      	cmp	r6, #0
 80099e8:	d0f9      	beq.n	80099de <__sflush_r+0x1a>
 80099ea:	2300      	movs	r3, #0
 80099ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099f0:	682f      	ldr	r7, [r5, #0]
 80099f2:	602b      	str	r3, [r5, #0]
 80099f4:	d032      	beq.n	8009a5c <__sflush_r+0x98>
 80099f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	075a      	lsls	r2, r3, #29
 80099fc:	d505      	bpl.n	8009a0a <__sflush_r+0x46>
 80099fe:	6863      	ldr	r3, [r4, #4]
 8009a00:	1ac0      	subs	r0, r0, r3
 8009a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a04:	b10b      	cbz	r3, 8009a0a <__sflush_r+0x46>
 8009a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a08:	1ac0      	subs	r0, r0, r3
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a10:	6a21      	ldr	r1, [r4, #32]
 8009a12:	4628      	mov	r0, r5
 8009a14:	47b0      	blx	r6
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	d106      	bne.n	8009a2a <__sflush_r+0x66>
 8009a1c:	6829      	ldr	r1, [r5, #0]
 8009a1e:	291d      	cmp	r1, #29
 8009a20:	d82c      	bhi.n	8009a7c <__sflush_r+0xb8>
 8009a22:	4a2a      	ldr	r2, [pc, #168]	; (8009acc <__sflush_r+0x108>)
 8009a24:	40ca      	lsrs	r2, r1
 8009a26:	07d6      	lsls	r6, r2, #31
 8009a28:	d528      	bpl.n	8009a7c <__sflush_r+0xb8>
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	6062      	str	r2, [r4, #4]
 8009a2e:	04d9      	lsls	r1, r3, #19
 8009a30:	6922      	ldr	r2, [r4, #16]
 8009a32:	6022      	str	r2, [r4, #0]
 8009a34:	d504      	bpl.n	8009a40 <__sflush_r+0x7c>
 8009a36:	1c42      	adds	r2, r0, #1
 8009a38:	d101      	bne.n	8009a3e <__sflush_r+0x7a>
 8009a3a:	682b      	ldr	r3, [r5, #0]
 8009a3c:	b903      	cbnz	r3, 8009a40 <__sflush_r+0x7c>
 8009a3e:	6560      	str	r0, [r4, #84]	; 0x54
 8009a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a42:	602f      	str	r7, [r5, #0]
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d0ca      	beq.n	80099de <__sflush_r+0x1a>
 8009a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a4c:	4299      	cmp	r1, r3
 8009a4e:	d002      	beq.n	8009a56 <__sflush_r+0x92>
 8009a50:	4628      	mov	r0, r5
 8009a52:	f000 f897 	bl	8009b84 <_free_r>
 8009a56:	2000      	movs	r0, #0
 8009a58:	6360      	str	r0, [r4, #52]	; 0x34
 8009a5a:	e7c1      	b.n	80099e0 <__sflush_r+0x1c>
 8009a5c:	6a21      	ldr	r1, [r4, #32]
 8009a5e:	2301      	movs	r3, #1
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b0      	blx	r6
 8009a64:	1c41      	adds	r1, r0, #1
 8009a66:	d1c7      	bne.n	80099f8 <__sflush_r+0x34>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0c4      	beq.n	80099f8 <__sflush_r+0x34>
 8009a6e:	2b1d      	cmp	r3, #29
 8009a70:	d001      	beq.n	8009a76 <__sflush_r+0xb2>
 8009a72:	2b16      	cmp	r3, #22
 8009a74:	d101      	bne.n	8009a7a <__sflush_r+0xb6>
 8009a76:	602f      	str	r7, [r5, #0]
 8009a78:	e7b1      	b.n	80099de <__sflush_r+0x1a>
 8009a7a:	89a3      	ldrh	r3, [r4, #12]
 8009a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a80:	81a3      	strh	r3, [r4, #12]
 8009a82:	e7ad      	b.n	80099e0 <__sflush_r+0x1c>
 8009a84:	690f      	ldr	r7, [r1, #16]
 8009a86:	2f00      	cmp	r7, #0
 8009a88:	d0a9      	beq.n	80099de <__sflush_r+0x1a>
 8009a8a:	0793      	lsls	r3, r2, #30
 8009a8c:	680e      	ldr	r6, [r1, #0]
 8009a8e:	bf08      	it	eq
 8009a90:	694b      	ldreq	r3, [r1, #20]
 8009a92:	600f      	str	r7, [r1, #0]
 8009a94:	bf18      	it	ne
 8009a96:	2300      	movne	r3, #0
 8009a98:	eba6 0807 	sub.w	r8, r6, r7
 8009a9c:	608b      	str	r3, [r1, #8]
 8009a9e:	f1b8 0f00 	cmp.w	r8, #0
 8009aa2:	dd9c      	ble.n	80099de <__sflush_r+0x1a>
 8009aa4:	6a21      	ldr	r1, [r4, #32]
 8009aa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009aa8:	4643      	mov	r3, r8
 8009aaa:	463a      	mov	r2, r7
 8009aac:	4628      	mov	r0, r5
 8009aae:	47b0      	blx	r6
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	dc06      	bgt.n	8009ac2 <__sflush_r+0xfe>
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ac0:	e78e      	b.n	80099e0 <__sflush_r+0x1c>
 8009ac2:	4407      	add	r7, r0
 8009ac4:	eba8 0800 	sub.w	r8, r8, r0
 8009ac8:	e7e9      	b.n	8009a9e <__sflush_r+0xda>
 8009aca:	bf00      	nop
 8009acc:	20400001 	.word	0x20400001

08009ad0 <_fflush_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	690b      	ldr	r3, [r1, #16]
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	b913      	cbnz	r3, 8009ae0 <_fflush_r+0x10>
 8009ada:	2500      	movs	r5, #0
 8009adc:	4628      	mov	r0, r5
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	b118      	cbz	r0, 8009aea <_fflush_r+0x1a>
 8009ae2:	6983      	ldr	r3, [r0, #24]
 8009ae4:	b90b      	cbnz	r3, 8009aea <_fflush_r+0x1a>
 8009ae6:	f7ff fd3f 	bl	8009568 <__sinit>
 8009aea:	4b14      	ldr	r3, [pc, #80]	; (8009b3c <_fflush_r+0x6c>)
 8009aec:	429c      	cmp	r4, r3
 8009aee:	d11b      	bne.n	8009b28 <_fflush_r+0x58>
 8009af0:	686c      	ldr	r4, [r5, #4]
 8009af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0ef      	beq.n	8009ada <_fflush_r+0xa>
 8009afa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009afc:	07d0      	lsls	r0, r2, #31
 8009afe:	d404      	bmi.n	8009b0a <_fflush_r+0x3a>
 8009b00:	0599      	lsls	r1, r3, #22
 8009b02:	d402      	bmi.n	8009b0a <_fflush_r+0x3a>
 8009b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b06:	f7ff fdf2 	bl	80096ee <__retarget_lock_acquire_recursive>
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	f7ff ff59 	bl	80099c4 <__sflush_r>
 8009b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b14:	07da      	lsls	r2, r3, #31
 8009b16:	4605      	mov	r5, r0
 8009b18:	d4e0      	bmi.n	8009adc <_fflush_r+0xc>
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	059b      	lsls	r3, r3, #22
 8009b1e:	d4dd      	bmi.n	8009adc <_fflush_r+0xc>
 8009b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b22:	f7ff fde5 	bl	80096f0 <__retarget_lock_release_recursive>
 8009b26:	e7d9      	b.n	8009adc <_fflush_r+0xc>
 8009b28:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <_fflush_r+0x70>)
 8009b2a:	429c      	cmp	r4, r3
 8009b2c:	d101      	bne.n	8009b32 <_fflush_r+0x62>
 8009b2e:	68ac      	ldr	r4, [r5, #8]
 8009b30:	e7df      	b.n	8009af2 <_fflush_r+0x22>
 8009b32:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <_fflush_r+0x74>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	bf08      	it	eq
 8009b38:	68ec      	ldreq	r4, [r5, #12]
 8009b3a:	e7da      	b.n	8009af2 <_fflush_r+0x22>
 8009b3c:	0800a7b4 	.word	0x0800a7b4
 8009b40:	0800a7d4 	.word	0x0800a7d4
 8009b44:	0800a794 	.word	0x0800a794

08009b48 <_lseek_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4d07      	ldr	r5, [pc, #28]	; (8009b68 <_lseek_r+0x20>)
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	4608      	mov	r0, r1
 8009b50:	4611      	mov	r1, r2
 8009b52:	2200      	movs	r2, #0
 8009b54:	602a      	str	r2, [r5, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	f7f8 fd0c 	bl	8002574 <_lseek>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_lseek_r+0x1e>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_lseek_r+0x1e>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	20004d84 	.word	0x20004d84

08009b6c <__malloc_lock>:
 8009b6c:	4801      	ldr	r0, [pc, #4]	; (8009b74 <__malloc_lock+0x8>)
 8009b6e:	f7ff bdbe 	b.w	80096ee <__retarget_lock_acquire_recursive>
 8009b72:	bf00      	nop
 8009b74:	20004d7c 	.word	0x20004d7c

08009b78 <__malloc_unlock>:
 8009b78:	4801      	ldr	r0, [pc, #4]	; (8009b80 <__malloc_unlock+0x8>)
 8009b7a:	f7ff bdb9 	b.w	80096f0 <__retarget_lock_release_recursive>
 8009b7e:	bf00      	nop
 8009b80:	20004d7c 	.word	0x20004d7c

08009b84 <_free_r>:
 8009b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b86:	2900      	cmp	r1, #0
 8009b88:	d048      	beq.n	8009c1c <_free_r+0x98>
 8009b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b8e:	9001      	str	r0, [sp, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f1a1 0404 	sub.w	r4, r1, #4
 8009b96:	bfb8      	it	lt
 8009b98:	18e4      	addlt	r4, r4, r3
 8009b9a:	f7ff ffe7 	bl	8009b6c <__malloc_lock>
 8009b9e:	4a20      	ldr	r2, [pc, #128]	; (8009c20 <_free_r+0x9c>)
 8009ba0:	9801      	ldr	r0, [sp, #4]
 8009ba2:	6813      	ldr	r3, [r2, #0]
 8009ba4:	4615      	mov	r5, r2
 8009ba6:	b933      	cbnz	r3, 8009bb6 <_free_r+0x32>
 8009ba8:	6063      	str	r3, [r4, #4]
 8009baa:	6014      	str	r4, [r2, #0]
 8009bac:	b003      	add	sp, #12
 8009bae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bb2:	f7ff bfe1 	b.w	8009b78 <__malloc_unlock>
 8009bb6:	42a3      	cmp	r3, r4
 8009bb8:	d90b      	bls.n	8009bd2 <_free_r+0x4e>
 8009bba:	6821      	ldr	r1, [r4, #0]
 8009bbc:	1862      	adds	r2, r4, r1
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	bf04      	itt	eq
 8009bc2:	681a      	ldreq	r2, [r3, #0]
 8009bc4:	685b      	ldreq	r3, [r3, #4]
 8009bc6:	6063      	str	r3, [r4, #4]
 8009bc8:	bf04      	itt	eq
 8009bca:	1852      	addeq	r2, r2, r1
 8009bcc:	6022      	streq	r2, [r4, #0]
 8009bce:	602c      	str	r4, [r5, #0]
 8009bd0:	e7ec      	b.n	8009bac <_free_r+0x28>
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	b10b      	cbz	r3, 8009bdc <_free_r+0x58>
 8009bd8:	42a3      	cmp	r3, r4
 8009bda:	d9fa      	bls.n	8009bd2 <_free_r+0x4e>
 8009bdc:	6811      	ldr	r1, [r2, #0]
 8009bde:	1855      	adds	r5, r2, r1
 8009be0:	42a5      	cmp	r5, r4
 8009be2:	d10b      	bne.n	8009bfc <_free_r+0x78>
 8009be4:	6824      	ldr	r4, [r4, #0]
 8009be6:	4421      	add	r1, r4
 8009be8:	1854      	adds	r4, r2, r1
 8009bea:	42a3      	cmp	r3, r4
 8009bec:	6011      	str	r1, [r2, #0]
 8009bee:	d1dd      	bne.n	8009bac <_free_r+0x28>
 8009bf0:	681c      	ldr	r4, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	6053      	str	r3, [r2, #4]
 8009bf6:	4421      	add	r1, r4
 8009bf8:	6011      	str	r1, [r2, #0]
 8009bfa:	e7d7      	b.n	8009bac <_free_r+0x28>
 8009bfc:	d902      	bls.n	8009c04 <_free_r+0x80>
 8009bfe:	230c      	movs	r3, #12
 8009c00:	6003      	str	r3, [r0, #0]
 8009c02:	e7d3      	b.n	8009bac <_free_r+0x28>
 8009c04:	6825      	ldr	r5, [r4, #0]
 8009c06:	1961      	adds	r1, r4, r5
 8009c08:	428b      	cmp	r3, r1
 8009c0a:	bf04      	itt	eq
 8009c0c:	6819      	ldreq	r1, [r3, #0]
 8009c0e:	685b      	ldreq	r3, [r3, #4]
 8009c10:	6063      	str	r3, [r4, #4]
 8009c12:	bf04      	itt	eq
 8009c14:	1949      	addeq	r1, r1, r5
 8009c16:	6021      	streq	r1, [r4, #0]
 8009c18:	6054      	str	r4, [r2, #4]
 8009c1a:	e7c7      	b.n	8009bac <_free_r+0x28>
 8009c1c:	b003      	add	sp, #12
 8009c1e:	bd30      	pop	{r4, r5, pc}
 8009c20:	20004ad0 	.word	0x20004ad0

08009c24 <__sfputc_r>:
 8009c24:	6893      	ldr	r3, [r2, #8]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	b410      	push	{r4}
 8009c2c:	6093      	str	r3, [r2, #8]
 8009c2e:	da08      	bge.n	8009c42 <__sfputc_r+0x1e>
 8009c30:	6994      	ldr	r4, [r2, #24]
 8009c32:	42a3      	cmp	r3, r4
 8009c34:	db01      	blt.n	8009c3a <__sfputc_r+0x16>
 8009c36:	290a      	cmp	r1, #10
 8009c38:	d103      	bne.n	8009c42 <__sfputc_r+0x1e>
 8009c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c3e:	f000 baf1 	b.w	800a224 <__swbuf_r>
 8009c42:	6813      	ldr	r3, [r2, #0]
 8009c44:	1c58      	adds	r0, r3, #1
 8009c46:	6010      	str	r0, [r2, #0]
 8009c48:	7019      	strb	r1, [r3, #0]
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <__sfputs_r>:
 8009c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c54:	4606      	mov	r6, r0
 8009c56:	460f      	mov	r7, r1
 8009c58:	4614      	mov	r4, r2
 8009c5a:	18d5      	adds	r5, r2, r3
 8009c5c:	42ac      	cmp	r4, r5
 8009c5e:	d101      	bne.n	8009c64 <__sfputs_r+0x12>
 8009c60:	2000      	movs	r0, #0
 8009c62:	e007      	b.n	8009c74 <__sfputs_r+0x22>
 8009c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c68:	463a      	mov	r2, r7
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7ff ffda 	bl	8009c24 <__sfputc_r>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d1f3      	bne.n	8009c5c <__sfputs_r+0xa>
 8009c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c78 <_vfiprintf_r>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	460d      	mov	r5, r1
 8009c7e:	b09d      	sub	sp, #116	; 0x74
 8009c80:	4614      	mov	r4, r2
 8009c82:	4698      	mov	r8, r3
 8009c84:	4606      	mov	r6, r0
 8009c86:	b118      	cbz	r0, 8009c90 <_vfiprintf_r+0x18>
 8009c88:	6983      	ldr	r3, [r0, #24]
 8009c8a:	b90b      	cbnz	r3, 8009c90 <_vfiprintf_r+0x18>
 8009c8c:	f7ff fc6c 	bl	8009568 <__sinit>
 8009c90:	4b89      	ldr	r3, [pc, #548]	; (8009eb8 <_vfiprintf_r+0x240>)
 8009c92:	429d      	cmp	r5, r3
 8009c94:	d11b      	bne.n	8009cce <_vfiprintf_r+0x56>
 8009c96:	6875      	ldr	r5, [r6, #4]
 8009c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c9a:	07d9      	lsls	r1, r3, #31
 8009c9c:	d405      	bmi.n	8009caa <_vfiprintf_r+0x32>
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	059a      	lsls	r2, r3, #22
 8009ca2:	d402      	bmi.n	8009caa <_vfiprintf_r+0x32>
 8009ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ca6:	f7ff fd22 	bl	80096ee <__retarget_lock_acquire_recursive>
 8009caa:	89ab      	ldrh	r3, [r5, #12]
 8009cac:	071b      	lsls	r3, r3, #28
 8009cae:	d501      	bpl.n	8009cb4 <_vfiprintf_r+0x3c>
 8009cb0:	692b      	ldr	r3, [r5, #16]
 8009cb2:	b9eb      	cbnz	r3, 8009cf0 <_vfiprintf_r+0x78>
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f000 fb06 	bl	800a2c8 <__swsetup_r>
 8009cbc:	b1c0      	cbz	r0, 8009cf0 <_vfiprintf_r+0x78>
 8009cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cc0:	07dc      	lsls	r4, r3, #31
 8009cc2:	d50e      	bpl.n	8009ce2 <_vfiprintf_r+0x6a>
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cc8:	b01d      	add	sp, #116	; 0x74
 8009cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cce:	4b7b      	ldr	r3, [pc, #492]	; (8009ebc <_vfiprintf_r+0x244>)
 8009cd0:	429d      	cmp	r5, r3
 8009cd2:	d101      	bne.n	8009cd8 <_vfiprintf_r+0x60>
 8009cd4:	68b5      	ldr	r5, [r6, #8]
 8009cd6:	e7df      	b.n	8009c98 <_vfiprintf_r+0x20>
 8009cd8:	4b79      	ldr	r3, [pc, #484]	; (8009ec0 <_vfiprintf_r+0x248>)
 8009cda:	429d      	cmp	r5, r3
 8009cdc:	bf08      	it	eq
 8009cde:	68f5      	ldreq	r5, [r6, #12]
 8009ce0:	e7da      	b.n	8009c98 <_vfiprintf_r+0x20>
 8009ce2:	89ab      	ldrh	r3, [r5, #12]
 8009ce4:	0598      	lsls	r0, r3, #22
 8009ce6:	d4ed      	bmi.n	8009cc4 <_vfiprintf_r+0x4c>
 8009ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cea:	f7ff fd01 	bl	80096f0 <__retarget_lock_release_recursive>
 8009cee:	e7e9      	b.n	8009cc4 <_vfiprintf_r+0x4c>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf4:	2320      	movs	r3, #32
 8009cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cfe:	2330      	movs	r3, #48	; 0x30
 8009d00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ec4 <_vfiprintf_r+0x24c>
 8009d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d08:	f04f 0901 	mov.w	r9, #1
 8009d0c:	4623      	mov	r3, r4
 8009d0e:	469a      	mov	sl, r3
 8009d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d14:	b10a      	cbz	r2, 8009d1a <_vfiprintf_r+0xa2>
 8009d16:	2a25      	cmp	r2, #37	; 0x25
 8009d18:	d1f9      	bne.n	8009d0e <_vfiprintf_r+0x96>
 8009d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d1e:	d00b      	beq.n	8009d38 <_vfiprintf_r+0xc0>
 8009d20:	465b      	mov	r3, fp
 8009d22:	4622      	mov	r2, r4
 8009d24:	4629      	mov	r1, r5
 8009d26:	4630      	mov	r0, r6
 8009d28:	f7ff ff93 	bl	8009c52 <__sfputs_r>
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	f000 80aa 	beq.w	8009e86 <_vfiprintf_r+0x20e>
 8009d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d34:	445a      	add	r2, fp
 8009d36:	9209      	str	r2, [sp, #36]	; 0x24
 8009d38:	f89a 3000 	ldrb.w	r3, [sl]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 80a2 	beq.w	8009e86 <_vfiprintf_r+0x20e>
 8009d42:	2300      	movs	r3, #0
 8009d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d4c:	f10a 0a01 	add.w	sl, sl, #1
 8009d50:	9304      	str	r3, [sp, #16]
 8009d52:	9307      	str	r3, [sp, #28]
 8009d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d58:	931a      	str	r3, [sp, #104]	; 0x68
 8009d5a:	4654      	mov	r4, sl
 8009d5c:	2205      	movs	r2, #5
 8009d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d62:	4858      	ldr	r0, [pc, #352]	; (8009ec4 <_vfiprintf_r+0x24c>)
 8009d64:	f7f6 fa44 	bl	80001f0 <memchr>
 8009d68:	9a04      	ldr	r2, [sp, #16]
 8009d6a:	b9d8      	cbnz	r0, 8009da4 <_vfiprintf_r+0x12c>
 8009d6c:	06d1      	lsls	r1, r2, #27
 8009d6e:	bf44      	itt	mi
 8009d70:	2320      	movmi	r3, #32
 8009d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d76:	0713      	lsls	r3, r2, #28
 8009d78:	bf44      	itt	mi
 8009d7a:	232b      	movmi	r3, #43	; 0x2b
 8009d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d80:	f89a 3000 	ldrb.w	r3, [sl]
 8009d84:	2b2a      	cmp	r3, #42	; 0x2a
 8009d86:	d015      	beq.n	8009db4 <_vfiprintf_r+0x13c>
 8009d88:	9a07      	ldr	r2, [sp, #28]
 8009d8a:	4654      	mov	r4, sl
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	f04f 0c0a 	mov.w	ip, #10
 8009d92:	4621      	mov	r1, r4
 8009d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d98:	3b30      	subs	r3, #48	; 0x30
 8009d9a:	2b09      	cmp	r3, #9
 8009d9c:	d94e      	bls.n	8009e3c <_vfiprintf_r+0x1c4>
 8009d9e:	b1b0      	cbz	r0, 8009dce <_vfiprintf_r+0x156>
 8009da0:	9207      	str	r2, [sp, #28]
 8009da2:	e014      	b.n	8009dce <_vfiprintf_r+0x156>
 8009da4:	eba0 0308 	sub.w	r3, r0, r8
 8009da8:	fa09 f303 	lsl.w	r3, r9, r3
 8009dac:	4313      	orrs	r3, r2
 8009dae:	9304      	str	r3, [sp, #16]
 8009db0:	46a2      	mov	sl, r4
 8009db2:	e7d2      	b.n	8009d5a <_vfiprintf_r+0xe2>
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	1d19      	adds	r1, r3, #4
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	9103      	str	r1, [sp, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	bfbb      	ittet	lt
 8009dc0:	425b      	neglt	r3, r3
 8009dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8009dc6:	9307      	strge	r3, [sp, #28]
 8009dc8:	9307      	strlt	r3, [sp, #28]
 8009dca:	bfb8      	it	lt
 8009dcc:	9204      	strlt	r2, [sp, #16]
 8009dce:	7823      	ldrb	r3, [r4, #0]
 8009dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8009dd2:	d10c      	bne.n	8009dee <_vfiprintf_r+0x176>
 8009dd4:	7863      	ldrb	r3, [r4, #1]
 8009dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd8:	d135      	bne.n	8009e46 <_vfiprintf_r+0x1ce>
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	1d1a      	adds	r2, r3, #4
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	9203      	str	r2, [sp, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	bfb8      	it	lt
 8009de6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009dea:	3402      	adds	r4, #2
 8009dec:	9305      	str	r3, [sp, #20]
 8009dee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ed4 <_vfiprintf_r+0x25c>
 8009df2:	7821      	ldrb	r1, [r4, #0]
 8009df4:	2203      	movs	r2, #3
 8009df6:	4650      	mov	r0, sl
 8009df8:	f7f6 f9fa 	bl	80001f0 <memchr>
 8009dfc:	b140      	cbz	r0, 8009e10 <_vfiprintf_r+0x198>
 8009dfe:	2340      	movs	r3, #64	; 0x40
 8009e00:	eba0 000a 	sub.w	r0, r0, sl
 8009e04:	fa03 f000 	lsl.w	r0, r3, r0
 8009e08:	9b04      	ldr	r3, [sp, #16]
 8009e0a:	4303      	orrs	r3, r0
 8009e0c:	3401      	adds	r4, #1
 8009e0e:	9304      	str	r3, [sp, #16]
 8009e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e14:	482c      	ldr	r0, [pc, #176]	; (8009ec8 <_vfiprintf_r+0x250>)
 8009e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e1a:	2206      	movs	r2, #6
 8009e1c:	f7f6 f9e8 	bl	80001f0 <memchr>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d03f      	beq.n	8009ea4 <_vfiprintf_r+0x22c>
 8009e24:	4b29      	ldr	r3, [pc, #164]	; (8009ecc <_vfiprintf_r+0x254>)
 8009e26:	bb1b      	cbnz	r3, 8009e70 <_vfiprintf_r+0x1f8>
 8009e28:	9b03      	ldr	r3, [sp, #12]
 8009e2a:	3307      	adds	r3, #7
 8009e2c:	f023 0307 	bic.w	r3, r3, #7
 8009e30:	3308      	adds	r3, #8
 8009e32:	9303      	str	r3, [sp, #12]
 8009e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e36:	443b      	add	r3, r7
 8009e38:	9309      	str	r3, [sp, #36]	; 0x24
 8009e3a:	e767      	b.n	8009d0c <_vfiprintf_r+0x94>
 8009e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e40:	460c      	mov	r4, r1
 8009e42:	2001      	movs	r0, #1
 8009e44:	e7a5      	b.n	8009d92 <_vfiprintf_r+0x11a>
 8009e46:	2300      	movs	r3, #0
 8009e48:	3401      	adds	r4, #1
 8009e4a:	9305      	str	r3, [sp, #20]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	f04f 0c0a 	mov.w	ip, #10
 8009e52:	4620      	mov	r0, r4
 8009e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e58:	3a30      	subs	r2, #48	; 0x30
 8009e5a:	2a09      	cmp	r2, #9
 8009e5c:	d903      	bls.n	8009e66 <_vfiprintf_r+0x1ee>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0c5      	beq.n	8009dee <_vfiprintf_r+0x176>
 8009e62:	9105      	str	r1, [sp, #20]
 8009e64:	e7c3      	b.n	8009dee <_vfiprintf_r+0x176>
 8009e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e7f0      	b.n	8009e52 <_vfiprintf_r+0x1da>
 8009e70:	ab03      	add	r3, sp, #12
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	462a      	mov	r2, r5
 8009e76:	4b16      	ldr	r3, [pc, #88]	; (8009ed0 <_vfiprintf_r+0x258>)
 8009e78:	a904      	add	r1, sp, #16
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f3af 8000 	nop.w
 8009e80:	4607      	mov	r7, r0
 8009e82:	1c78      	adds	r0, r7, #1
 8009e84:	d1d6      	bne.n	8009e34 <_vfiprintf_r+0x1bc>
 8009e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e88:	07d9      	lsls	r1, r3, #31
 8009e8a:	d405      	bmi.n	8009e98 <_vfiprintf_r+0x220>
 8009e8c:	89ab      	ldrh	r3, [r5, #12]
 8009e8e:	059a      	lsls	r2, r3, #22
 8009e90:	d402      	bmi.n	8009e98 <_vfiprintf_r+0x220>
 8009e92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e94:	f7ff fc2c 	bl	80096f0 <__retarget_lock_release_recursive>
 8009e98:	89ab      	ldrh	r3, [r5, #12]
 8009e9a:	065b      	lsls	r3, r3, #25
 8009e9c:	f53f af12 	bmi.w	8009cc4 <_vfiprintf_r+0x4c>
 8009ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ea2:	e711      	b.n	8009cc8 <_vfiprintf_r+0x50>
 8009ea4:	ab03      	add	r3, sp, #12
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	462a      	mov	r2, r5
 8009eaa:	4b09      	ldr	r3, [pc, #36]	; (8009ed0 <_vfiprintf_r+0x258>)
 8009eac:	a904      	add	r1, sp, #16
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f000 f880 	bl	8009fb4 <_printf_i>
 8009eb4:	e7e4      	b.n	8009e80 <_vfiprintf_r+0x208>
 8009eb6:	bf00      	nop
 8009eb8:	0800a7b4 	.word	0x0800a7b4
 8009ebc:	0800a7d4 	.word	0x0800a7d4
 8009ec0:	0800a794 	.word	0x0800a794
 8009ec4:	0800a7f8 	.word	0x0800a7f8
 8009ec8:	0800a802 	.word	0x0800a802
 8009ecc:	00000000 	.word	0x00000000
 8009ed0:	08009c53 	.word	0x08009c53
 8009ed4:	0800a7fe 	.word	0x0800a7fe

08009ed8 <_printf_common>:
 8009ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009edc:	4616      	mov	r6, r2
 8009ede:	4699      	mov	r9, r3
 8009ee0:	688a      	ldr	r2, [r1, #8]
 8009ee2:	690b      	ldr	r3, [r1, #16]
 8009ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	bfb8      	it	lt
 8009eec:	4613      	movlt	r3, r2
 8009eee:	6033      	str	r3, [r6, #0]
 8009ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	b10a      	cbz	r2, 8009efe <_printf_common+0x26>
 8009efa:	3301      	adds	r3, #1
 8009efc:	6033      	str	r3, [r6, #0]
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	0699      	lsls	r1, r3, #26
 8009f02:	bf42      	ittt	mi
 8009f04:	6833      	ldrmi	r3, [r6, #0]
 8009f06:	3302      	addmi	r3, #2
 8009f08:	6033      	strmi	r3, [r6, #0]
 8009f0a:	6825      	ldr	r5, [r4, #0]
 8009f0c:	f015 0506 	ands.w	r5, r5, #6
 8009f10:	d106      	bne.n	8009f20 <_printf_common+0x48>
 8009f12:	f104 0a19 	add.w	sl, r4, #25
 8009f16:	68e3      	ldr	r3, [r4, #12]
 8009f18:	6832      	ldr	r2, [r6, #0]
 8009f1a:	1a9b      	subs	r3, r3, r2
 8009f1c:	42ab      	cmp	r3, r5
 8009f1e:	dc26      	bgt.n	8009f6e <_printf_common+0x96>
 8009f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f24:	1e13      	subs	r3, r2, #0
 8009f26:	6822      	ldr	r2, [r4, #0]
 8009f28:	bf18      	it	ne
 8009f2a:	2301      	movne	r3, #1
 8009f2c:	0692      	lsls	r2, r2, #26
 8009f2e:	d42b      	bmi.n	8009f88 <_printf_common+0xb0>
 8009f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f34:	4649      	mov	r1, r9
 8009f36:	4638      	mov	r0, r7
 8009f38:	47c0      	blx	r8
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d01e      	beq.n	8009f7c <_printf_common+0xa4>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	68e5      	ldr	r5, [r4, #12]
 8009f42:	6832      	ldr	r2, [r6, #0]
 8009f44:	f003 0306 	and.w	r3, r3, #6
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	bf08      	it	eq
 8009f4c:	1aad      	subeq	r5, r5, r2
 8009f4e:	68a3      	ldr	r3, [r4, #8]
 8009f50:	6922      	ldr	r2, [r4, #16]
 8009f52:	bf0c      	ite	eq
 8009f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f58:	2500      	movne	r5, #0
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	bfc4      	itt	gt
 8009f5e:	1a9b      	subgt	r3, r3, r2
 8009f60:	18ed      	addgt	r5, r5, r3
 8009f62:	2600      	movs	r6, #0
 8009f64:	341a      	adds	r4, #26
 8009f66:	42b5      	cmp	r5, r6
 8009f68:	d11a      	bne.n	8009fa0 <_printf_common+0xc8>
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	e008      	b.n	8009f80 <_printf_common+0xa8>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	4652      	mov	r2, sl
 8009f72:	4649      	mov	r1, r9
 8009f74:	4638      	mov	r0, r7
 8009f76:	47c0      	blx	r8
 8009f78:	3001      	adds	r0, #1
 8009f7a:	d103      	bne.n	8009f84 <_printf_common+0xac>
 8009f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f84:	3501      	adds	r5, #1
 8009f86:	e7c6      	b.n	8009f16 <_printf_common+0x3e>
 8009f88:	18e1      	adds	r1, r4, r3
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	2030      	movs	r0, #48	; 0x30
 8009f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f92:	4422      	add	r2, r4
 8009f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f9c:	3302      	adds	r3, #2
 8009f9e:	e7c7      	b.n	8009f30 <_printf_common+0x58>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	47c0      	blx	r8
 8009faa:	3001      	adds	r0, #1
 8009fac:	d0e6      	beq.n	8009f7c <_printf_common+0xa4>
 8009fae:	3601      	adds	r6, #1
 8009fb0:	e7d9      	b.n	8009f66 <_printf_common+0x8e>
	...

08009fb4 <_printf_i>:
 8009fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb8:	460c      	mov	r4, r1
 8009fba:	4691      	mov	r9, r2
 8009fbc:	7e27      	ldrb	r7, [r4, #24]
 8009fbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009fc0:	2f78      	cmp	r7, #120	; 0x78
 8009fc2:	4680      	mov	r8, r0
 8009fc4:	469a      	mov	sl, r3
 8009fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fca:	d807      	bhi.n	8009fdc <_printf_i+0x28>
 8009fcc:	2f62      	cmp	r7, #98	; 0x62
 8009fce:	d80a      	bhi.n	8009fe6 <_printf_i+0x32>
 8009fd0:	2f00      	cmp	r7, #0
 8009fd2:	f000 80d8 	beq.w	800a186 <_printf_i+0x1d2>
 8009fd6:	2f58      	cmp	r7, #88	; 0x58
 8009fd8:	f000 80a3 	beq.w	800a122 <_printf_i+0x16e>
 8009fdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fe4:	e03a      	b.n	800a05c <_printf_i+0xa8>
 8009fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fea:	2b15      	cmp	r3, #21
 8009fec:	d8f6      	bhi.n	8009fdc <_printf_i+0x28>
 8009fee:	a001      	add	r0, pc, #4	; (adr r0, 8009ff4 <_printf_i+0x40>)
 8009ff0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009ff4:	0800a04d 	.word	0x0800a04d
 8009ff8:	0800a061 	.word	0x0800a061
 8009ffc:	08009fdd 	.word	0x08009fdd
 800a000:	08009fdd 	.word	0x08009fdd
 800a004:	08009fdd 	.word	0x08009fdd
 800a008:	08009fdd 	.word	0x08009fdd
 800a00c:	0800a061 	.word	0x0800a061
 800a010:	08009fdd 	.word	0x08009fdd
 800a014:	08009fdd 	.word	0x08009fdd
 800a018:	08009fdd 	.word	0x08009fdd
 800a01c:	08009fdd 	.word	0x08009fdd
 800a020:	0800a16d 	.word	0x0800a16d
 800a024:	0800a091 	.word	0x0800a091
 800a028:	0800a14f 	.word	0x0800a14f
 800a02c:	08009fdd 	.word	0x08009fdd
 800a030:	08009fdd 	.word	0x08009fdd
 800a034:	0800a18f 	.word	0x0800a18f
 800a038:	08009fdd 	.word	0x08009fdd
 800a03c:	0800a091 	.word	0x0800a091
 800a040:	08009fdd 	.word	0x08009fdd
 800a044:	08009fdd 	.word	0x08009fdd
 800a048:	0800a157 	.word	0x0800a157
 800a04c:	680b      	ldr	r3, [r1, #0]
 800a04e:	1d1a      	adds	r2, r3, #4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	600a      	str	r2, [r1, #0]
 800a054:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a05c:	2301      	movs	r3, #1
 800a05e:	e0a3      	b.n	800a1a8 <_printf_i+0x1f4>
 800a060:	6825      	ldr	r5, [r4, #0]
 800a062:	6808      	ldr	r0, [r1, #0]
 800a064:	062e      	lsls	r6, r5, #24
 800a066:	f100 0304 	add.w	r3, r0, #4
 800a06a:	d50a      	bpl.n	800a082 <_printf_i+0xce>
 800a06c:	6805      	ldr	r5, [r0, #0]
 800a06e:	600b      	str	r3, [r1, #0]
 800a070:	2d00      	cmp	r5, #0
 800a072:	da03      	bge.n	800a07c <_printf_i+0xc8>
 800a074:	232d      	movs	r3, #45	; 0x2d
 800a076:	426d      	negs	r5, r5
 800a078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a07c:	485e      	ldr	r0, [pc, #376]	; (800a1f8 <_printf_i+0x244>)
 800a07e:	230a      	movs	r3, #10
 800a080:	e019      	b.n	800a0b6 <_printf_i+0x102>
 800a082:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a086:	6805      	ldr	r5, [r0, #0]
 800a088:	600b      	str	r3, [r1, #0]
 800a08a:	bf18      	it	ne
 800a08c:	b22d      	sxthne	r5, r5
 800a08e:	e7ef      	b.n	800a070 <_printf_i+0xbc>
 800a090:	680b      	ldr	r3, [r1, #0]
 800a092:	6825      	ldr	r5, [r4, #0]
 800a094:	1d18      	adds	r0, r3, #4
 800a096:	6008      	str	r0, [r1, #0]
 800a098:	0628      	lsls	r0, r5, #24
 800a09a:	d501      	bpl.n	800a0a0 <_printf_i+0xec>
 800a09c:	681d      	ldr	r5, [r3, #0]
 800a09e:	e002      	b.n	800a0a6 <_printf_i+0xf2>
 800a0a0:	0669      	lsls	r1, r5, #25
 800a0a2:	d5fb      	bpl.n	800a09c <_printf_i+0xe8>
 800a0a4:	881d      	ldrh	r5, [r3, #0]
 800a0a6:	4854      	ldr	r0, [pc, #336]	; (800a1f8 <_printf_i+0x244>)
 800a0a8:	2f6f      	cmp	r7, #111	; 0x6f
 800a0aa:	bf0c      	ite	eq
 800a0ac:	2308      	moveq	r3, #8
 800a0ae:	230a      	movne	r3, #10
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0b6:	6866      	ldr	r6, [r4, #4]
 800a0b8:	60a6      	str	r6, [r4, #8]
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	bfa2      	ittt	ge
 800a0be:	6821      	ldrge	r1, [r4, #0]
 800a0c0:	f021 0104 	bicge.w	r1, r1, #4
 800a0c4:	6021      	strge	r1, [r4, #0]
 800a0c6:	b90d      	cbnz	r5, 800a0cc <_printf_i+0x118>
 800a0c8:	2e00      	cmp	r6, #0
 800a0ca:	d04d      	beq.n	800a168 <_printf_i+0x1b4>
 800a0cc:	4616      	mov	r6, r2
 800a0ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0d2:	fb03 5711 	mls	r7, r3, r1, r5
 800a0d6:	5dc7      	ldrb	r7, [r0, r7]
 800a0d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0dc:	462f      	mov	r7, r5
 800a0de:	42bb      	cmp	r3, r7
 800a0e0:	460d      	mov	r5, r1
 800a0e2:	d9f4      	bls.n	800a0ce <_printf_i+0x11a>
 800a0e4:	2b08      	cmp	r3, #8
 800a0e6:	d10b      	bne.n	800a100 <_printf_i+0x14c>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	07df      	lsls	r7, r3, #31
 800a0ec:	d508      	bpl.n	800a100 <_printf_i+0x14c>
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	6861      	ldr	r1, [r4, #4]
 800a0f2:	4299      	cmp	r1, r3
 800a0f4:	bfde      	ittt	le
 800a0f6:	2330      	movle	r3, #48	; 0x30
 800a0f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0fc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a100:	1b92      	subs	r2, r2, r6
 800a102:	6122      	str	r2, [r4, #16]
 800a104:	f8cd a000 	str.w	sl, [sp]
 800a108:	464b      	mov	r3, r9
 800a10a:	aa03      	add	r2, sp, #12
 800a10c:	4621      	mov	r1, r4
 800a10e:	4640      	mov	r0, r8
 800a110:	f7ff fee2 	bl	8009ed8 <_printf_common>
 800a114:	3001      	adds	r0, #1
 800a116:	d14c      	bne.n	800a1b2 <_printf_i+0x1fe>
 800a118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a11c:	b004      	add	sp, #16
 800a11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a122:	4835      	ldr	r0, [pc, #212]	; (800a1f8 <_printf_i+0x244>)
 800a124:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	680e      	ldr	r6, [r1, #0]
 800a12c:	061f      	lsls	r7, r3, #24
 800a12e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a132:	600e      	str	r6, [r1, #0]
 800a134:	d514      	bpl.n	800a160 <_printf_i+0x1ac>
 800a136:	07d9      	lsls	r1, r3, #31
 800a138:	bf44      	itt	mi
 800a13a:	f043 0320 	orrmi.w	r3, r3, #32
 800a13e:	6023      	strmi	r3, [r4, #0]
 800a140:	b91d      	cbnz	r5, 800a14a <_printf_i+0x196>
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	f023 0320 	bic.w	r3, r3, #32
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	2310      	movs	r3, #16
 800a14c:	e7b0      	b.n	800a0b0 <_printf_i+0xfc>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	f043 0320 	orr.w	r3, r3, #32
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	2378      	movs	r3, #120	; 0x78
 800a158:	4828      	ldr	r0, [pc, #160]	; (800a1fc <_printf_i+0x248>)
 800a15a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a15e:	e7e3      	b.n	800a128 <_printf_i+0x174>
 800a160:	065e      	lsls	r6, r3, #25
 800a162:	bf48      	it	mi
 800a164:	b2ad      	uxthmi	r5, r5
 800a166:	e7e6      	b.n	800a136 <_printf_i+0x182>
 800a168:	4616      	mov	r6, r2
 800a16a:	e7bb      	b.n	800a0e4 <_printf_i+0x130>
 800a16c:	680b      	ldr	r3, [r1, #0]
 800a16e:	6826      	ldr	r6, [r4, #0]
 800a170:	6960      	ldr	r0, [r4, #20]
 800a172:	1d1d      	adds	r5, r3, #4
 800a174:	600d      	str	r5, [r1, #0]
 800a176:	0635      	lsls	r5, r6, #24
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	d501      	bpl.n	800a180 <_printf_i+0x1cc>
 800a17c:	6018      	str	r0, [r3, #0]
 800a17e:	e002      	b.n	800a186 <_printf_i+0x1d2>
 800a180:	0671      	lsls	r1, r6, #25
 800a182:	d5fb      	bpl.n	800a17c <_printf_i+0x1c8>
 800a184:	8018      	strh	r0, [r3, #0]
 800a186:	2300      	movs	r3, #0
 800a188:	6123      	str	r3, [r4, #16]
 800a18a:	4616      	mov	r6, r2
 800a18c:	e7ba      	b.n	800a104 <_printf_i+0x150>
 800a18e:	680b      	ldr	r3, [r1, #0]
 800a190:	1d1a      	adds	r2, r3, #4
 800a192:	600a      	str	r2, [r1, #0]
 800a194:	681e      	ldr	r6, [r3, #0]
 800a196:	6862      	ldr	r2, [r4, #4]
 800a198:	2100      	movs	r1, #0
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7f6 f828 	bl	80001f0 <memchr>
 800a1a0:	b108      	cbz	r0, 800a1a6 <_printf_i+0x1f2>
 800a1a2:	1b80      	subs	r0, r0, r6
 800a1a4:	6060      	str	r0, [r4, #4]
 800a1a6:	6863      	ldr	r3, [r4, #4]
 800a1a8:	6123      	str	r3, [r4, #16]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1b0:	e7a8      	b.n	800a104 <_printf_i+0x150>
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	47d0      	blx	sl
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d0ab      	beq.n	800a118 <_printf_i+0x164>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	079b      	lsls	r3, r3, #30
 800a1c4:	d413      	bmi.n	800a1ee <_printf_i+0x23a>
 800a1c6:	68e0      	ldr	r0, [r4, #12]
 800a1c8:	9b03      	ldr	r3, [sp, #12]
 800a1ca:	4298      	cmp	r0, r3
 800a1cc:	bfb8      	it	lt
 800a1ce:	4618      	movlt	r0, r3
 800a1d0:	e7a4      	b.n	800a11c <_printf_i+0x168>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4632      	mov	r2, r6
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	4640      	mov	r0, r8
 800a1da:	47d0      	blx	sl
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d09b      	beq.n	800a118 <_printf_i+0x164>
 800a1e0:	3501      	adds	r5, #1
 800a1e2:	68e3      	ldr	r3, [r4, #12]
 800a1e4:	9903      	ldr	r1, [sp, #12]
 800a1e6:	1a5b      	subs	r3, r3, r1
 800a1e8:	42ab      	cmp	r3, r5
 800a1ea:	dcf2      	bgt.n	800a1d2 <_printf_i+0x21e>
 800a1ec:	e7eb      	b.n	800a1c6 <_printf_i+0x212>
 800a1ee:	2500      	movs	r5, #0
 800a1f0:	f104 0619 	add.w	r6, r4, #25
 800a1f4:	e7f5      	b.n	800a1e2 <_printf_i+0x22e>
 800a1f6:	bf00      	nop
 800a1f8:	0800a809 	.word	0x0800a809
 800a1fc:	0800a81a 	.word	0x0800a81a

0800a200 <_read_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4d07      	ldr	r5, [pc, #28]	; (800a220 <_read_r+0x20>)
 800a204:	4604      	mov	r4, r0
 800a206:	4608      	mov	r0, r1
 800a208:	4611      	mov	r1, r2
 800a20a:	2200      	movs	r2, #0
 800a20c:	602a      	str	r2, [r5, #0]
 800a20e:	461a      	mov	r2, r3
 800a210:	f7f8 f950 	bl	80024b4 <_read>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_read_r+0x1e>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_read_r+0x1e>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	20004d84 	.word	0x20004d84

0800a224 <__swbuf_r>:
 800a224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a226:	460e      	mov	r6, r1
 800a228:	4614      	mov	r4, r2
 800a22a:	4605      	mov	r5, r0
 800a22c:	b118      	cbz	r0, 800a236 <__swbuf_r+0x12>
 800a22e:	6983      	ldr	r3, [r0, #24]
 800a230:	b90b      	cbnz	r3, 800a236 <__swbuf_r+0x12>
 800a232:	f7ff f999 	bl	8009568 <__sinit>
 800a236:	4b21      	ldr	r3, [pc, #132]	; (800a2bc <__swbuf_r+0x98>)
 800a238:	429c      	cmp	r4, r3
 800a23a:	d12b      	bne.n	800a294 <__swbuf_r+0x70>
 800a23c:	686c      	ldr	r4, [r5, #4]
 800a23e:	69a3      	ldr	r3, [r4, #24]
 800a240:	60a3      	str	r3, [r4, #8]
 800a242:	89a3      	ldrh	r3, [r4, #12]
 800a244:	071a      	lsls	r2, r3, #28
 800a246:	d52f      	bpl.n	800a2a8 <__swbuf_r+0x84>
 800a248:	6923      	ldr	r3, [r4, #16]
 800a24a:	b36b      	cbz	r3, 800a2a8 <__swbuf_r+0x84>
 800a24c:	6923      	ldr	r3, [r4, #16]
 800a24e:	6820      	ldr	r0, [r4, #0]
 800a250:	1ac0      	subs	r0, r0, r3
 800a252:	6963      	ldr	r3, [r4, #20]
 800a254:	b2f6      	uxtb	r6, r6
 800a256:	4283      	cmp	r3, r0
 800a258:	4637      	mov	r7, r6
 800a25a:	dc04      	bgt.n	800a266 <__swbuf_r+0x42>
 800a25c:	4621      	mov	r1, r4
 800a25e:	4628      	mov	r0, r5
 800a260:	f7ff fc36 	bl	8009ad0 <_fflush_r>
 800a264:	bb30      	cbnz	r0, 800a2b4 <__swbuf_r+0x90>
 800a266:	68a3      	ldr	r3, [r4, #8]
 800a268:	3b01      	subs	r3, #1
 800a26a:	60a3      	str	r3, [r4, #8]
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	6022      	str	r2, [r4, #0]
 800a272:	701e      	strb	r6, [r3, #0]
 800a274:	6963      	ldr	r3, [r4, #20]
 800a276:	3001      	adds	r0, #1
 800a278:	4283      	cmp	r3, r0
 800a27a:	d004      	beq.n	800a286 <__swbuf_r+0x62>
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	07db      	lsls	r3, r3, #31
 800a280:	d506      	bpl.n	800a290 <__swbuf_r+0x6c>
 800a282:	2e0a      	cmp	r6, #10
 800a284:	d104      	bne.n	800a290 <__swbuf_r+0x6c>
 800a286:	4621      	mov	r1, r4
 800a288:	4628      	mov	r0, r5
 800a28a:	f7ff fc21 	bl	8009ad0 <_fflush_r>
 800a28e:	b988      	cbnz	r0, 800a2b4 <__swbuf_r+0x90>
 800a290:	4638      	mov	r0, r7
 800a292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a294:	4b0a      	ldr	r3, [pc, #40]	; (800a2c0 <__swbuf_r+0x9c>)
 800a296:	429c      	cmp	r4, r3
 800a298:	d101      	bne.n	800a29e <__swbuf_r+0x7a>
 800a29a:	68ac      	ldr	r4, [r5, #8]
 800a29c:	e7cf      	b.n	800a23e <__swbuf_r+0x1a>
 800a29e:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <__swbuf_r+0xa0>)
 800a2a0:	429c      	cmp	r4, r3
 800a2a2:	bf08      	it	eq
 800a2a4:	68ec      	ldreq	r4, [r5, #12]
 800a2a6:	e7ca      	b.n	800a23e <__swbuf_r+0x1a>
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f000 f80c 	bl	800a2c8 <__swsetup_r>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d0cb      	beq.n	800a24c <__swbuf_r+0x28>
 800a2b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a2b8:	e7ea      	b.n	800a290 <__swbuf_r+0x6c>
 800a2ba:	bf00      	nop
 800a2bc:	0800a7b4 	.word	0x0800a7b4
 800a2c0:	0800a7d4 	.word	0x0800a7d4
 800a2c4:	0800a794 	.word	0x0800a794

0800a2c8 <__swsetup_r>:
 800a2c8:	4b32      	ldr	r3, [pc, #200]	; (800a394 <__swsetup_r+0xcc>)
 800a2ca:	b570      	push	{r4, r5, r6, lr}
 800a2cc:	681d      	ldr	r5, [r3, #0]
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	b125      	cbz	r5, 800a2de <__swsetup_r+0x16>
 800a2d4:	69ab      	ldr	r3, [r5, #24]
 800a2d6:	b913      	cbnz	r3, 800a2de <__swsetup_r+0x16>
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f7ff f945 	bl	8009568 <__sinit>
 800a2de:	4b2e      	ldr	r3, [pc, #184]	; (800a398 <__swsetup_r+0xd0>)
 800a2e0:	429c      	cmp	r4, r3
 800a2e2:	d10f      	bne.n	800a304 <__swsetup_r+0x3c>
 800a2e4:	686c      	ldr	r4, [r5, #4]
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2ec:	0719      	lsls	r1, r3, #28
 800a2ee:	d42c      	bmi.n	800a34a <__swsetup_r+0x82>
 800a2f0:	06dd      	lsls	r5, r3, #27
 800a2f2:	d411      	bmi.n	800a318 <__swsetup_r+0x50>
 800a2f4:	2309      	movs	r3, #9
 800a2f6:	6033      	str	r3, [r6, #0]
 800a2f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2fc:	81a3      	strh	r3, [r4, #12]
 800a2fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a302:	e03e      	b.n	800a382 <__swsetup_r+0xba>
 800a304:	4b25      	ldr	r3, [pc, #148]	; (800a39c <__swsetup_r+0xd4>)
 800a306:	429c      	cmp	r4, r3
 800a308:	d101      	bne.n	800a30e <__swsetup_r+0x46>
 800a30a:	68ac      	ldr	r4, [r5, #8]
 800a30c:	e7eb      	b.n	800a2e6 <__swsetup_r+0x1e>
 800a30e:	4b24      	ldr	r3, [pc, #144]	; (800a3a0 <__swsetup_r+0xd8>)
 800a310:	429c      	cmp	r4, r3
 800a312:	bf08      	it	eq
 800a314:	68ec      	ldreq	r4, [r5, #12]
 800a316:	e7e6      	b.n	800a2e6 <__swsetup_r+0x1e>
 800a318:	0758      	lsls	r0, r3, #29
 800a31a:	d512      	bpl.n	800a342 <__swsetup_r+0x7a>
 800a31c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a31e:	b141      	cbz	r1, 800a332 <__swsetup_r+0x6a>
 800a320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a324:	4299      	cmp	r1, r3
 800a326:	d002      	beq.n	800a32e <__swsetup_r+0x66>
 800a328:	4630      	mov	r0, r6
 800a32a:	f7ff fc2b 	bl	8009b84 <_free_r>
 800a32e:	2300      	movs	r3, #0
 800a330:	6363      	str	r3, [r4, #52]	; 0x34
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	2300      	movs	r3, #0
 800a33c:	6063      	str	r3, [r4, #4]
 800a33e:	6923      	ldr	r3, [r4, #16]
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	f043 0308 	orr.w	r3, r3, #8
 800a348:	81a3      	strh	r3, [r4, #12]
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	b94b      	cbnz	r3, 800a362 <__swsetup_r+0x9a>
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a358:	d003      	beq.n	800a362 <__swsetup_r+0x9a>
 800a35a:	4621      	mov	r1, r4
 800a35c:	4630      	mov	r0, r6
 800a35e:	f000 f845 	bl	800a3ec <__smakebuf_r>
 800a362:	89a0      	ldrh	r0, [r4, #12]
 800a364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a368:	f010 0301 	ands.w	r3, r0, #1
 800a36c:	d00a      	beq.n	800a384 <__swsetup_r+0xbc>
 800a36e:	2300      	movs	r3, #0
 800a370:	60a3      	str	r3, [r4, #8]
 800a372:	6963      	ldr	r3, [r4, #20]
 800a374:	425b      	negs	r3, r3
 800a376:	61a3      	str	r3, [r4, #24]
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	b943      	cbnz	r3, 800a38e <__swsetup_r+0xc6>
 800a37c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a380:	d1ba      	bne.n	800a2f8 <__swsetup_r+0x30>
 800a382:	bd70      	pop	{r4, r5, r6, pc}
 800a384:	0781      	lsls	r1, r0, #30
 800a386:	bf58      	it	pl
 800a388:	6963      	ldrpl	r3, [r4, #20]
 800a38a:	60a3      	str	r3, [r4, #8]
 800a38c:	e7f4      	b.n	800a378 <__swsetup_r+0xb0>
 800a38e:	2000      	movs	r0, #0
 800a390:	e7f7      	b.n	800a382 <__swsetup_r+0xba>
 800a392:	bf00      	nop
 800a394:	20000030 	.word	0x20000030
 800a398:	0800a7b4 	.word	0x0800a7b4
 800a39c:	0800a7d4 	.word	0x0800a7d4
 800a3a0:	0800a794 	.word	0x0800a794

0800a3a4 <__swhatbuf_r>:
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	460e      	mov	r6, r1
 800a3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	b096      	sub	sp, #88	; 0x58
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	461d      	mov	r5, r3
 800a3b4:	da07      	bge.n	800a3c6 <__swhatbuf_r+0x22>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	602b      	str	r3, [r5, #0]
 800a3ba:	89b3      	ldrh	r3, [r6, #12]
 800a3bc:	061a      	lsls	r2, r3, #24
 800a3be:	d410      	bmi.n	800a3e2 <__swhatbuf_r+0x3e>
 800a3c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3c4:	e00e      	b.n	800a3e4 <__swhatbuf_r+0x40>
 800a3c6:	466a      	mov	r2, sp
 800a3c8:	f000 f850 	bl	800a46c <_fstat_r>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	dbf2      	blt.n	800a3b6 <__swhatbuf_r+0x12>
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3da:	425a      	negs	r2, r3
 800a3dc:	415a      	adcs	r2, r3
 800a3de:	602a      	str	r2, [r5, #0]
 800a3e0:	e7ee      	b.n	800a3c0 <__swhatbuf_r+0x1c>
 800a3e2:	2340      	movs	r3, #64	; 0x40
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	6023      	str	r3, [r4, #0]
 800a3e8:	b016      	add	sp, #88	; 0x58
 800a3ea:	bd70      	pop	{r4, r5, r6, pc}

0800a3ec <__smakebuf_r>:
 800a3ec:	898b      	ldrh	r3, [r1, #12]
 800a3ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3f0:	079d      	lsls	r5, r3, #30
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	d507      	bpl.n	800a408 <__smakebuf_r+0x1c>
 800a3f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	2301      	movs	r3, #1
 800a402:	6163      	str	r3, [r4, #20]
 800a404:	b002      	add	sp, #8
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	ab01      	add	r3, sp, #4
 800a40a:	466a      	mov	r2, sp
 800a40c:	f7ff ffca 	bl	800a3a4 <__swhatbuf_r>
 800a410:	9900      	ldr	r1, [sp, #0]
 800a412:	4605      	mov	r5, r0
 800a414:	4630      	mov	r0, r6
 800a416:	f7ff f983 	bl	8009720 <_malloc_r>
 800a41a:	b948      	cbnz	r0, 800a430 <__smakebuf_r+0x44>
 800a41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a420:	059a      	lsls	r2, r3, #22
 800a422:	d4ef      	bmi.n	800a404 <__smakebuf_r+0x18>
 800a424:	f023 0303 	bic.w	r3, r3, #3
 800a428:	f043 0302 	orr.w	r3, r3, #2
 800a42c:	81a3      	strh	r3, [r4, #12]
 800a42e:	e7e3      	b.n	800a3f8 <__smakebuf_r+0xc>
 800a430:	4b0d      	ldr	r3, [pc, #52]	; (800a468 <__smakebuf_r+0x7c>)
 800a432:	62b3      	str	r3, [r6, #40]	; 0x28
 800a434:	89a3      	ldrh	r3, [r4, #12]
 800a436:	6020      	str	r0, [r4, #0]
 800a438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a43c:	81a3      	strh	r3, [r4, #12]
 800a43e:	9b00      	ldr	r3, [sp, #0]
 800a440:	6163      	str	r3, [r4, #20]
 800a442:	9b01      	ldr	r3, [sp, #4]
 800a444:	6120      	str	r0, [r4, #16]
 800a446:	b15b      	cbz	r3, 800a460 <__smakebuf_r+0x74>
 800a448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a44c:	4630      	mov	r0, r6
 800a44e:	f000 f81f 	bl	800a490 <_isatty_r>
 800a452:	b128      	cbz	r0, 800a460 <__smakebuf_r+0x74>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	f023 0303 	bic.w	r3, r3, #3
 800a45a:	f043 0301 	orr.w	r3, r3, #1
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	89a0      	ldrh	r0, [r4, #12]
 800a462:	4305      	orrs	r5, r0
 800a464:	81a5      	strh	r5, [r4, #12]
 800a466:	e7cd      	b.n	800a404 <__smakebuf_r+0x18>
 800a468:	08009501 	.word	0x08009501

0800a46c <_fstat_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d07      	ldr	r5, [pc, #28]	; (800a48c <_fstat_r+0x20>)
 800a470:	2300      	movs	r3, #0
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	4611      	mov	r1, r2
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	f7f8 f860 	bl	800253e <_fstat>
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	d102      	bne.n	800a488 <_fstat_r+0x1c>
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	b103      	cbz	r3, 800a488 <_fstat_r+0x1c>
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	bd38      	pop	{r3, r4, r5, pc}
 800a48a:	bf00      	nop
 800a48c:	20004d84 	.word	0x20004d84

0800a490 <_isatty_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d06      	ldr	r5, [pc, #24]	; (800a4ac <_isatty_r+0x1c>)
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	602b      	str	r3, [r5, #0]
 800a49c:	f7f8 f85f 	bl	800255e <_isatty>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d102      	bne.n	800a4aa <_isatty_r+0x1a>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	b103      	cbz	r3, 800a4aa <_isatty_r+0x1a>
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	20004d84 	.word	0x20004d84

0800a4b0 <sqrt>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	ed2d 8b02 	vpush	{d8}
 800a4b6:	ec55 4b10 	vmov	r4, r5, d0
 800a4ba:	f000 f82d 	bl	800a518 <__ieee754_sqrt>
 800a4be:	4b15      	ldr	r3, [pc, #84]	; (800a514 <sqrt+0x64>)
 800a4c0:	eeb0 8a40 	vmov.f32	s16, s0
 800a4c4:	eef0 8a60 	vmov.f32	s17, s1
 800a4c8:	f993 3000 	ldrsb.w	r3, [r3]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	d019      	beq.n	800a504 <sqrt+0x54>
 800a4d0:	4622      	mov	r2, r4
 800a4d2:	462b      	mov	r3, r5
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	f7f6 fb30 	bl	8000b3c <__aeabi_dcmpun>
 800a4dc:	b990      	cbnz	r0, 800a504 <sqrt+0x54>
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	f7f6 fb01 	bl	8000aec <__aeabi_dcmplt>
 800a4ea:	b158      	cbz	r0, 800a504 <sqrt+0x54>
 800a4ec:	f7fe ffde 	bl	80094ac <__errno>
 800a4f0:	2321      	movs	r3, #33	; 0x21
 800a4f2:	6003      	str	r3, [r0, #0]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	f7f6 f9ae 	bl	800085c <__aeabi_ddiv>
 800a500:	ec41 0b18 	vmov	d8, r0, r1
 800a504:	eeb0 0a48 	vmov.f32	s0, s16
 800a508:	eef0 0a68 	vmov.f32	s1, s17
 800a50c:	ecbd 8b02 	vpop	{d8}
 800a510:	bd38      	pop	{r3, r4, r5, pc}
 800a512:	bf00      	nop
 800a514:	20000094 	.word	0x20000094

0800a518 <__ieee754_sqrt>:
 800a518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51c:	ec55 4b10 	vmov	r4, r5, d0
 800a520:	4e56      	ldr	r6, [pc, #344]	; (800a67c <__ieee754_sqrt+0x164>)
 800a522:	43ae      	bics	r6, r5
 800a524:	ee10 0a10 	vmov	r0, s0
 800a528:	ee10 3a10 	vmov	r3, s0
 800a52c:	4629      	mov	r1, r5
 800a52e:	462a      	mov	r2, r5
 800a530:	d110      	bne.n	800a554 <__ieee754_sqrt+0x3c>
 800a532:	ee10 2a10 	vmov	r2, s0
 800a536:	462b      	mov	r3, r5
 800a538:	f7f6 f866 	bl	8000608 <__aeabi_dmul>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4620      	mov	r0, r4
 800a542:	4629      	mov	r1, r5
 800a544:	f7f5 feaa 	bl	800029c <__adddf3>
 800a548:	4604      	mov	r4, r0
 800a54a:	460d      	mov	r5, r1
 800a54c:	ec45 4b10 	vmov	d0, r4, r5
 800a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a554:	2d00      	cmp	r5, #0
 800a556:	dc10      	bgt.n	800a57a <__ieee754_sqrt+0x62>
 800a558:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a55c:	4330      	orrs	r0, r6
 800a55e:	d0f5      	beq.n	800a54c <__ieee754_sqrt+0x34>
 800a560:	b15d      	cbz	r5, 800a57a <__ieee754_sqrt+0x62>
 800a562:	ee10 2a10 	vmov	r2, s0
 800a566:	462b      	mov	r3, r5
 800a568:	ee10 0a10 	vmov	r0, s0
 800a56c:	f7f5 fe94 	bl	8000298 <__aeabi_dsub>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	f7f6 f972 	bl	800085c <__aeabi_ddiv>
 800a578:	e7e6      	b.n	800a548 <__ieee754_sqrt+0x30>
 800a57a:	1509      	asrs	r1, r1, #20
 800a57c:	d076      	beq.n	800a66c <__ieee754_sqrt+0x154>
 800a57e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a582:	07ce      	lsls	r6, r1, #31
 800a584:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a588:	bf5e      	ittt	pl
 800a58a:	0fda      	lsrpl	r2, r3, #31
 800a58c:	005b      	lslpl	r3, r3, #1
 800a58e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a592:	0fda      	lsrs	r2, r3, #31
 800a594:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a598:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a59c:	2000      	movs	r0, #0
 800a59e:	106d      	asrs	r5, r5, #1
 800a5a0:	005b      	lsls	r3, r3, #1
 800a5a2:	f04f 0e16 	mov.w	lr, #22
 800a5a6:	4684      	mov	ip, r0
 800a5a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5ac:	eb0c 0401 	add.w	r4, ip, r1
 800a5b0:	4294      	cmp	r4, r2
 800a5b2:	bfde      	ittt	le
 800a5b4:	1b12      	suble	r2, r2, r4
 800a5b6:	eb04 0c01 	addle.w	ip, r4, r1
 800a5ba:	1840      	addle	r0, r0, r1
 800a5bc:	0052      	lsls	r2, r2, #1
 800a5be:	f1be 0e01 	subs.w	lr, lr, #1
 800a5c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a5c6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a5ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5ce:	d1ed      	bne.n	800a5ac <__ieee754_sqrt+0x94>
 800a5d0:	4671      	mov	r1, lr
 800a5d2:	2720      	movs	r7, #32
 800a5d4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a5d8:	4562      	cmp	r2, ip
 800a5da:	eb04 060e 	add.w	r6, r4, lr
 800a5de:	dc02      	bgt.n	800a5e6 <__ieee754_sqrt+0xce>
 800a5e0:	d113      	bne.n	800a60a <__ieee754_sqrt+0xf2>
 800a5e2:	429e      	cmp	r6, r3
 800a5e4:	d811      	bhi.n	800a60a <__ieee754_sqrt+0xf2>
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	eb06 0e04 	add.w	lr, r6, r4
 800a5ec:	da43      	bge.n	800a676 <__ieee754_sqrt+0x15e>
 800a5ee:	f1be 0f00 	cmp.w	lr, #0
 800a5f2:	db40      	blt.n	800a676 <__ieee754_sqrt+0x15e>
 800a5f4:	f10c 0801 	add.w	r8, ip, #1
 800a5f8:	eba2 020c 	sub.w	r2, r2, ip
 800a5fc:	429e      	cmp	r6, r3
 800a5fe:	bf88      	it	hi
 800a600:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a604:	1b9b      	subs	r3, r3, r6
 800a606:	4421      	add	r1, r4
 800a608:	46c4      	mov	ip, r8
 800a60a:	0052      	lsls	r2, r2, #1
 800a60c:	3f01      	subs	r7, #1
 800a60e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a612:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a616:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a61a:	d1dd      	bne.n	800a5d8 <__ieee754_sqrt+0xc0>
 800a61c:	4313      	orrs	r3, r2
 800a61e:	d006      	beq.n	800a62e <__ieee754_sqrt+0x116>
 800a620:	1c4c      	adds	r4, r1, #1
 800a622:	bf13      	iteet	ne
 800a624:	3101      	addne	r1, #1
 800a626:	3001      	addeq	r0, #1
 800a628:	4639      	moveq	r1, r7
 800a62a:	f021 0101 	bicne.w	r1, r1, #1
 800a62e:	1043      	asrs	r3, r0, #1
 800a630:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a634:	0849      	lsrs	r1, r1, #1
 800a636:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a63a:	07c2      	lsls	r2, r0, #31
 800a63c:	bf48      	it	mi
 800a63e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a642:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a646:	460c      	mov	r4, r1
 800a648:	463d      	mov	r5, r7
 800a64a:	e77f      	b.n	800a54c <__ieee754_sqrt+0x34>
 800a64c:	0ada      	lsrs	r2, r3, #11
 800a64e:	3815      	subs	r0, #21
 800a650:	055b      	lsls	r3, r3, #21
 800a652:	2a00      	cmp	r2, #0
 800a654:	d0fa      	beq.n	800a64c <__ieee754_sqrt+0x134>
 800a656:	02d7      	lsls	r7, r2, #11
 800a658:	d50a      	bpl.n	800a670 <__ieee754_sqrt+0x158>
 800a65a:	f1c1 0420 	rsb	r4, r1, #32
 800a65e:	fa23 f404 	lsr.w	r4, r3, r4
 800a662:	1e4d      	subs	r5, r1, #1
 800a664:	408b      	lsls	r3, r1
 800a666:	4322      	orrs	r2, r4
 800a668:	1b41      	subs	r1, r0, r5
 800a66a:	e788      	b.n	800a57e <__ieee754_sqrt+0x66>
 800a66c:	4608      	mov	r0, r1
 800a66e:	e7f0      	b.n	800a652 <__ieee754_sqrt+0x13a>
 800a670:	0052      	lsls	r2, r2, #1
 800a672:	3101      	adds	r1, #1
 800a674:	e7ef      	b.n	800a656 <__ieee754_sqrt+0x13e>
 800a676:	46e0      	mov	r8, ip
 800a678:	e7be      	b.n	800a5f8 <__ieee754_sqrt+0xe0>
 800a67a:	bf00      	nop
 800a67c:	7ff00000 	.word	0x7ff00000

0800a680 <_init>:
 800a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a682:	bf00      	nop
 800a684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a686:	bc08      	pop	{r3}
 800a688:	469e      	mov	lr, r3
 800a68a:	4770      	bx	lr

0800a68c <_fini>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	bf00      	nop
 800a690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a692:	bc08      	pop	{r3}
 800a694:	469e      	mov	lr, r3
 800a696:	4770      	bx	lr
